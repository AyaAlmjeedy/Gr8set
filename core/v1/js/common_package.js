(function() {
    this.MooTools = {
        version: "1.6.0",
        build: "529422872adfff401b901b8b6c7ca5114ee95e2b"
    };
    var e = this.typeOf = function(i) {
        if (i == null) {
            return "null"
        }
        if (i.$family != null) {
            return i.$family()
        }
        if (i.nodeName) {
            if (i.nodeType == 1) {
                return "element"
            }
            if (i.nodeType == 3) {
                return (/\S/).test(i.nodeValue) ? "textnode" : "whitespace"
            }
        } else {
            if (typeof i.length == "number") {
                if ("callee" in i) {
                    return "arguments"
                }
                if ("item" in i) {
                    return "collection"
                }
            }
        }
        return typeof i
    };
    var t = this.instanceOf = function(v, i) {
        if (v == null) {
            return false
        }
        var u = v.$constructor || v.constructor;
        while (u) {
            if (u === i) {
                return true
            }
            u = u.parent
        }
        if (!v.hasOwnProperty) {
            return false
        }
        return v instanceof i
    };
    var m = Object.prototype.hasOwnProperty;
    var q = true;
    for (var p in {
            toString: 1
        }) {
        q = null
    }
    if (q) {
        q = ["hasOwnProperty", "valueOf", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "constructor"]
    }

    function f(v, x, y) {
        if (q) {
            for (var w = q.length; w--;) {
                var u = q[w];
                if (m.call(v, u)) {
                    x.call(y, u, v[u])
                }
            }
        }
    }
    var g = this.Function;
    g.prototype.overloadSetter = function(u) {
        var i = this;
        return function(w, v) {
            if (w == null) {
                return this
            }
            if (u || typeof w != "string") {
                for (var x in w) {
                    i.call(this, x, w[x])
                }
                f(w, i, this)
            } else {
                i.call(this, w, v)
            }
            return this
        }
    };
    g.prototype.overloadGetter = function(u) {
        var i = this;
        return function(w) {
            var x, v;
            if (typeof w != "string") {
                x = w
            } else {
                if (arguments.length > 1) {
                    x = arguments
                } else {
                    if (u) {
                        x = [w]
                    }
                }
            }
            if (x) {
                v = {};
                for (var y = 0; y < x.length; y++) {
                    v[x[y]] = i.call(this, x[y])
                }
            } else {
                v = i.call(this, w)
            }
            return v
        }
    };
    g.prototype.extend = function(i, u) {
        this[i] = u
    }.overloadSetter();
    g.prototype.implement = function(i, u) {
        this.prototype[i] = u
    }.overloadSetter();
    var n = Array.prototype.slice;
    Array.convert = function(i) {
        if (i == null) {
            return []
        }
        return (k.isEnumerable(i) && typeof i != "string") ? (e(i) == "array") ? i : n.call(i) : [i]
    };
    g.convert = function(i) {
        return (e(i) == "function") ? i : function() {
            return i
        }
    };
    Number.convert = function(u) {
        var i = parseFloat(u);
        return isFinite(i) ? i : null
    };
    String.convert = function(i) {
        return i + ""
    };
    Array.from = Array.convert;
    g.from = g.convert;
    Number.from = Number.convert;
    String.from = String.convert;
    g.implement({
        hide: function() {
            this.$hidden = true;
            return this
        },
        protect: function() {
            this.$protected = true;
            return this
        }
    });
    var k = this.Type = function(w, v) {
        if (w) {
            var u = w.toLowerCase();
            var i = function(x) {
                return (e(x) == u)
            };
            k["is" + w] = i;
            if (v != null) {
                v.prototype.$family = (function() {
                    return u
                }).hide()
            }
        }
        if (v == null) {
            return null
        }
        v.extend(this);
        v.$constructor = k;
        v.prototype.$constructor = v;
        return v
    };
    var o = Object.prototype.toString;
    k.isEnumerable = function(i) {
        return (i != null && typeof i.length == "number" && o.call(i) != "[object Function]")
    };
    var b = {};
    var d = function(i) {
        var u = e(i.prototype);
        return b[u] || (b[u] = [])
    };
    var h = function(v, z) {
        if (z && z.$hidden) {
            return
        }
        var u = d(this);
        for (var w = 0; w < u.length; w++) {
            var y = u[w];
            if (e(y) == "type") {
                h.call(y, v, z)
            } else {
                y.call(this, v, z)
            }
        }
        var x = this.prototype[v];
        if (x == null || !x.$protected) {
            this.prototype[v] = z
        }
        if (this[v] == null && e(z) == "function") {
            s.call(this, v, function(i) {
                return z.apply(i, n.call(arguments, 1))
            })
        }
    };
    var s = function(i, v) {
        if (v && v.$hidden) {
            return
        }
        var u = this[i];
        if (u == null || !u.$protected) {
            this[i] = v
        }
    };
    k.implement({
        implement: h.overloadSetter(),
        extend: s.overloadSetter(),
        alias: function(i, u) {
            h.call(this, i, this.prototype[u])
        }.overloadSetter(),
        mirror: function(i) {
            d(this).push(i);
            return this
        }
    });
    new k("Type", k);
    var c = function(u, z, x) {
        var w = (z != Object),
            D = z.prototype;
        if (w) {
            z = new k(u, z)
        }
        for (var A = 0, y = x.length; A < y; A++) {
            var E = x[A],
                C = z[E],
                B = D[E];
            if (C) {
                C.protect()
            }
            if (w && B) {
                z.implement(E, B.protect())
            }
        }
        if (w) {
            var v = D.propertyIsEnumerable(x[0]);
            z.forEachMethod = function(I) {
                if (!v) {
                    for (var H = 0, F = x.length; H < F; H++) {
                        I.call(D, D[x[H]], x[H])
                    }
                }
                for (var G in D) {
                    I.call(D, D[G], G)
                }
            }
        }
        return c
    };
    c("String", String, ["charAt", "charCodeAt", "concat", "contains", "indexOf", "lastIndexOf", "match", "quote", "replace", "search", "slice", "split", "substr", "substring", "trim", "toLowerCase", "toUpperCase"])("Array", Array, ["pop", "push", "reverse", "shift", "sort", "splice", "unshift", "concat", "join", "slice", "indexOf", "lastIndexOf", "filter", "forEach", "every", "map", "some", "reduce", "reduceRight", "contains"])("Number", Number, ["toExponential", "toFixed", "toLocaleString", "toPrecision"])("Function", g, ["apply", "call", "bind"])("RegExp", RegExp, ["exec", "test"])("Object", Object, ["create", "defineProperty", "defineProperties", "keys", "getPrototypeOf", "getOwnPropertyDescriptor", "getOwnPropertyNames", "preventExtensions", "isExtensible", "seal", "isSealed", "freeze", "isFrozen"])("Date", Date, ["now"]);
    Object.extend = s.overloadSetter();
    Date.extend("now", function() {
        return +(new Date)
    });
    new k("Boolean", Boolean);
    Number.prototype.$family = function() {
        return isFinite(this) ? "number" : "null"
    }.hide();
    Number.extend("random", function(u, i) {
        return Math.floor(Math.random() * (i - u + 1) + u)
    });
    Array.implement({
        forEach: function(w, x) {
            for (var v = 0, u = this.length; v < u; v++) {
                if (v in this) {
                    w.call(x, this[v], v, this)
                }
            }
        },
        each: function(i, u) {
            Array.forEach(this, i, u);
            return this
        }
    });
    Object.extend({
        keys: function(u) {
            var v = [];
            for (var i in u) {
                if (m.call(u, i)) {
                    v.push(i)
                }
            }
            f(u, function(w) {
                v.push(w)
            });
            return v
        },
        forEach: function(i, u, v) {
            Object.keys(i).forEach(function(w) {
                u.call(v, i[w], w, i)
            })
        }
    });
    Object.each = Object.forEach;
    var r = function(i) {
        switch (e(i)) {
            case "array":
                return i.clone();
            case "object":
                return Object.clone(i);
            default:
                return i
        }
    };
    Array.implement("clone", function() {
        var u = this.length,
            v = new Array(u);
        while (u--) {
            v[u] = r(this[u])
        }
        return v
    });
    var a = function(u, i, v) {
        switch (e(v)) {
            case "object":
                if (e(u[i]) == "object") {
                    Object.merge(u[i], v)
                } else {
                    u[i] = Object.clone(v)
                }
                break;
            case "array":
                u[i] = v.clone();
                break;
            default:
                u[i] = v
        }
        return u
    };
    Object.extend({
        merge: function(B, x, w) {
            if (e(x) == "string") {
                return a(B, x, w)
            }
            for (var A = 1, u = arguments.length; A < u; A++) {
                var y = arguments[A];
                for (var z in y) {
                    a(B, z, y[z])
                }
            }
            return B
        },
        clone: function(i) {
            var v = {};
            for (var u in i) {
                v[u] = r(i[u])
            }
            return v
        },
        append: function(y) {
            for (var x = 1, v = arguments.length; x < v; x++) {
                var u = arguments[x] || {};
                for (var w in u) {
                    y[w] = u[w]
                }
            }
            return y
        }
    });
    ["Object", "WhiteSpace", "TextNode", "Collection", "Arguments"].each(function(i) {
        new k(i)
    });
    var j = Date.now();
    String.extend("uniqueID", function() {
        return (j++).toString(36)
    })
})();
Array.implement({
    every: function(c, d) {
        for (var b = 0, a = this.length >>> 0; b < a; b++) {
            if ((b in this) && !c.call(d, this[b], b, this)) {
                return false
            }
        }
        return true
    },
    filter: function(d, f) {
        var c = [];
        for (var e, b = 0, a = this.length >>> 0; b < a; b++) {
            if (b in this) {
                e = this[b];
                if (d.call(f, e, b, this)) {
                    c.push(e)
                }
            }
        }
        return c
    },
    indexOf: function(c, d) {
        var b = this.length >>> 0;
        for (var a = (d < 0) ? Math.max(0, b + d) : d || 0; a < b; a++) {
            if (this[a] === c) {
                return a
            }
        }
        return -1
    },
    map: function(c, e) {
        var d = this.length >>> 0,
            b = Array(d);
        for (var a = 0; a < d; a++) {
            if (a in this) {
                b[a] = c.call(e, this[a], a, this)
            }
        }
        return b
    },
    some: function(c, d) {
        for (var b = 0, a = this.length >>> 0; b < a; b++) {
            if ((b in this) && c.call(d, this[b], b, this)) {
                return true
            }
        }
        return false
    },
    clean: function() {
        return this.filter(function(a) {
            return a != null
        })
    },
    invoke: function(a) {
        var b = Array.slice(arguments, 1);
        return this.map(function(c) {
            return c[a].apply(c, b)
        })
    },
    associate: function(c) {
        var d = {},
            b = Math.min(this.length, c.length);
        for (var a = 0; a < b; a++) {
            d[c[a]] = this[a]
        }
        return d
    },
    link: function(c) {
        var a = {};
        for (var e = 0, b = this.length; e < b; e++) {
            for (var d in c) {
                if (c[d](this[e])) {
                    a[d] = this[e];
                    delete c[d];
                    break
                }
            }
        }
        return a
    },
    contains: function(a, b) {
        return this.indexOf(a, b) != -1
    },
    append: function(a) {
        this.push.apply(this, a);
        return this
    },
    getLast: function() {
        return (this.length) ? this[this.length - 1] : null
    },
    getRandom: function() {
        return (this.length) ? this[Number.random(0, this.length - 1)] : null
    },
    include: function(a) {
        if (!this.contains(a)) {
            this.push(a)
        }
        return this
    },
    combine: function(c) {
        for (var b = 0, a = c.length; b < a; b++) {
            this.include(c[b])
        }
        return this
    },
    erase: function(b) {
        for (var a = this.length; a--;) {
            if (this[a] === b) {
                this.splice(a, 1)
            }
        }
        return this
    },
    empty: function() {
        this.length = 0;
        return this
    },
    flatten: function() {
        var d = [];
        for (var b = 0, a = this.length; b < a; b++) {
            var c = typeOf(this[b]);
            if (c == "null") {
                continue
            }
            d = d.concat((c == "array" || c == "collection" || c == "arguments" || instanceOf(this[b], Array)) ? Array.flatten(this[b]) : this[b])
        }
        return d
    },
    pick: function() {
        for (var b = 0, a = this.length; b < a; b++) {
            if (this[b] != null) {
                return this[b]
            }
        }
        return null
    },
    hexToRgb: function(b) {
        if (this.length != 3) {
            return null
        }
        var a = this.map(function(c) {
            if (c.length == 1) {
                c += c
            }
            return parseInt(c, 16)
        });
        return (b) ? a : "rgb(" + a + ")"
    },
    rgbToHex: function(d) {
        if (this.length < 3) {
            return null
        }
        if (this.length == 4 && this[3] == 0 && !d) {
            return "transparent"
        }
        var b = [];
        for (var a = 0; a < 3; a++) {
            var c = (this[a] - 0).toString(16);
            b.push((c.length == 1) ? "0" + c : c)
        }
        return (d) ? b : "#" + b.join("")
    }
});
Function.extend({
    attempt: function() {
        for (var b = 0, a = arguments.length; b < a; b++) {
            try {
                return arguments[b]()
            } catch (c) {}
        }
        return null
    }
});
Function.implement({
    attempt: function(a, c) {
        try {
            return this.apply(c, Array.convert(a))
        } catch (b) {}
        return null
    },
    bind: function(e) {
        var a = this,
            b = arguments.length > 1 ? Array.slice(arguments, 1) : null,
            d = function() {};
        var c = function() {
            var g = e,
                h = arguments.length;
            if (this instanceof c) {
                d.prototype = a.prototype;
                g = new d
            }
            var f = (!b && !h) ? a.call(g) : a.apply(g, b && h ? b.concat(Array.slice(arguments)) : b || arguments);
            return g == e ? f : g
        };
        return c
    },
    pass: function(b, c) {
        var a = this;
        if (b != null) {
            b = Array.convert(b)
        }
        return function() {
            return a.apply(c, b || arguments)
        }
    },
    delay: function(b, c, a) {
        return setTimeout(this.pass((a == null ? [] : a), c), b)
    },
    periodical: function(c, b, a) {
        return setInterval(this.pass((a == null ? [] : a), b), c)
    }
});
Number.implement({
    limit: function(b, a) {
        return Math.min(a, Math.max(b, this))
    },
    round: function(a) {
        a = Math.pow(10, a || 0).toFixed(a < 0 ? -a : 0);
        return Math.round(this * a) / a
    },
    times: function(b, c) {
        for (var a = 0; a < this; a++) {
            b.call(c, a, this)
        }
    },
    toFloat: function() {
        return parseFloat(this)
    },
    toInt: function(a) {
        return parseInt(this, a || 10)
    }
});
Number.alias("each", "times");
(function(b) {
    var a = {};
    b.each(function(c) {
        if (!Number[c]) {
            a[c] = function() {
                return Math[c].apply(null, [this].concat(Array.convert(arguments)))
            }
        }
    });
    Number.implement(a)
})(["abs", "acos", "asin", "atan", "atan2", "ceil", "cos", "exp", "floor", "log", "max", "min", "pow", "sin", "sqrt", "tan"]);
String.implement({
    contains: function(b, a) {
        return (a ? String(this).slice(a) : String(this)).indexOf(b) > -1
    },
    test: function(a, b) {
        return ((typeOf(a) == "regexp") ? a : new RegExp("" + a, b)).test(this)
    },
    trim: function() {
        return String(this).replace(/^\s+|\s+$/g, "")
    },
    clean: function() {
        return String(this).replace(/\s+/g, " ").trim()
    },
    camelCase: function() {
        return String(this).replace(/-\D/g, function(a) {
            return a.charAt(1).toUpperCase()
        })
    },
    hyphenate: function() {
        return String(this).replace(/[A-Z]/g, function(a) {
            return ("-" + a.charAt(0).toLowerCase())
        })
    },
    capitalize: function() {
        return String(this).replace(/\b[a-z]/g, function(a) {
            return a.toUpperCase()
        })
    },
    escapeRegExp: function() {
        return String(this).replace(/([-.*+?^${}()|[\]\/\\])/g, "\\$1")
    },
    toInt: function(a) {
        return parseInt(this, a || 10)
    },
    toFloat: function() {
        return parseFloat(this)
    },
    hexToRgb: function(b) {
        var a = String(this).match(/^#?(\w{1,2})(\w{1,2})(\w{1,2})$/);
        return (a) ? a.slice(1).hexToRgb(b) : null
    },
    rgbToHex: function(b) {
        var a = String(this).match(/\d{1,3}/g);
        return (a) ? a.rgbToHex(b) : null
    },
    substitute: function(a, b) {
        return String(this).replace(b || (/\\?\{([^{}]+)\}/g), function(d, c) {
            if (d.charAt(0) == "\\") {
                return d.slice(1)
            }
            return (a[c] != null) ? a[c] : ""
        })
    }
});
String.prototype.contains = function(a, b) {
    return (b) ? (b + this + b).indexOf(b + a + b) > -1 : String(this).indexOf(a) > -1
};
(function() {
    var h = this.document;
    var f = h.window = this;
    var b = function(n, e) {
        n = n.toLowerCase();
        e = (e ? e.toLowerCase() : "");
        var o = n.match(/(edge)[\s\/:]([\w\d\.]+)/);
        if (!o) {
            o = n.match(/(opera|ie|firefox|chrome|trident|crios|version)[\s\/:]([\w\d\.]+)?.*?(safari|(?:rv[\s\/:]|version[\s\/:])([\w\d\.]+)|$)/) || [null, "unknown", 0]
        }
        if (o[1] == "trident") {
            o[1] = "ie";
            if (o[4]) {
                o[2] = o[4]
            }
        } else {
            if (o[1] == "crios") {
                o[1] = "chrome"
            }
        }
        e = n.match(/ip(?:ad|od|hone)/) ? "ios" : (n.match(/(?:webos|android)/) || n.match(/mac|win|linux/) || ["other"])[0];
        if (e == "win") {
            e = "windows"
        }
        return {
            extend: Function.prototype.extend,
            name: (o[1] == "version") ? o[3] : o[1],
            version: parseFloat((o[1] == "opera" && o[4]) ? o[4] : o[2]),
            platform: e
        }
    };
    var m = this.Browser = b(navigator.userAgent, navigator.platform);
    if (m.name == "ie" && h.documentMode) {
        m.version = h.documentMode
    }
    m.extend({
        Features: {
            xpath: !!(h.evaluate),
            air: !!(f.runtime),
            query: !!(h.querySelector),
            json: !!(f.JSON)
        },
        parseUA: b
    });
    m[m.name] = true;
    m[m.name + parseInt(m.version, 10)] = true;
    var a = m.platform;
    if (a == "windows") {
        a = "win"
    }
    m.Platform = {
        name: a
    };
    m.Platform[a] = true;
    m.Request = (function() {
        var o = function() {
            return new XMLHttpRequest()
        };
        var n = function() {
            return new ActiveXObject("MSXML2.XMLHTTP")
        };
        var e = function() {
            return new ActiveXObject("Microsoft.XMLHTTP")
        };
        return Function.attempt(function() {
            o();
            return o
        }, function() {
            n();
            return n
        }, function() {
            e();
            return e
        })
    })();
    m.Features.xhr = !!(m.Request);
    var g = (Function.attempt(function() {
        return navigator.plugins["Shockwave Flash"].description
    }, function() {
        return new ActiveXObject("ShockwaveFlash.ShockwaveFlash").GetVariable("$version")
    }) || "0 r0").match(/\d+/g);
    m.Plugins = {
        Flash: {
            version: Number(g[0] || "0." + g[1]) || 0,
            build: Number(g[2]) || 0
        }
    };
    m.exec = function(n) {
        if (!n) {
            return n
        }
        if (f.execScript) {
            f.execScript(n)
        } else {
            var e = h.createElement("script");
            e.setAttribute("type", "text/javascript");
            e.text = n;
            h.head.appendChild(e);
            h.head.removeChild(e)
        }
        return n
    };
    String.implement("stripScripts", function(n) {
        var e = "";
        var o = this.replace(/<script[^>]*>([\s\S]*?)<\/script>/gi, function(p, q) {
            e += q + "\n";
            return ""
        });
        if (n === true) {
            m.exec(e)
        } else {
            if (typeOf(n) == "function") {
                n(e, o)
            }
        }
        return o
    });
    m.extend({
        Document: this.Document,
        Window: this.Window,
        Element: this.Element,
        Event: this.Event
    });
    this.Window = this.$constructor = new Type("Window", function() {});
    this.$family = Function.convert("window").hide();
    Window.mirror(function(e, n) {
        f[e] = n
    });
    this.Document = h.$constructor = new Type("Document", function() {});
    h.$family = Function.convert("document").hide();
    Document.mirror(function(e, n) {
        h[e] = n
    });
    h.html = h.documentElement;
    if (!h.head) {
        h.head = h.getElementsByTagName("head")[0]
    }
    if (h.execCommand) {
        try {
            h.execCommand("BackgroundImageCache", false, true)
        } catch (d) {}
    }
    if (this.attachEvent && !this.addEventListener) {
        var c = function() {
            this.detachEvent("onunload", c);
            h.head = h.html = h.window = null;
            f = this.Window = h = null
        };
        this.attachEvent("onunload", c)
    }
    var j = Array.convert;
    try {
        j(h.html.childNodes)
    } catch (d) {
        Array.convert = function(n) {
            if (typeof n != "string" && Type.isEnumerable(n) && typeOf(n) != "array") {
                var e = n.length,
                    o = new Array(e);
                while (e--) {
                    o[e] = n[e]
                }
                return o
            }
            return j(n)
        };
        var i = Array.prototype,
            k = i.slice;
        ["pop", "push", "reverse", "shift", "sort", "splice", "unshift", "concat", "join", "slice"].each(function(e) {
            var n = i[e];
            Array[e] = function(o) {
                return n.apply(Array.convert(o), k.call(arguments, 1))
            }
        })
    }
})();
(function() {
    var a = this.Class = new Type("Class", function(h) {
        if (instanceOf(h, Function)) {
            h = {
                initialize: h
            }
        }
        var g = function() {
            e(this);
            if (g.$prototyping) {
                return this
            }
            this.$caller = null;
            this.$family = null;
            var i = (this.initialize) ? this.initialize.apply(this, arguments) : this;
            this.$caller = this.caller = null;
            return i
        }.extend(this).implement(h);
        g.$constructor = a;
        g.prototype.$constructor = g;
        g.prototype.parent = c;
        return g
    });
    var c = function() {
        if (!this.$caller) {
            throw new Error('The method "parent" cannot be called.')
        }
        var g = this.$caller.$name,
            h = this.$caller.$owner.parent,
            i = (h) ? h.prototype[g] : null;
        if (!i) {
            throw new Error('The method "' + g + '" has no parent.')
        }
        return i.apply(this, arguments)
    };
    var e = function(g) {
        for (var h in g) {
            var j = g[h];
            switch (typeOf(j)) {
                case "object":
                    var i = function() {};
                    i.prototype = j;
                    g[h] = e(new i);
                    break;
                case "array":
                    g[h] = j.clone();
                    break
            }
        }
        return g
    };
    var b = function(g, h, j) {
        if (j.$origin) {
            j = j.$origin
        }
        var i = function() {
            if (j.$protected && this.$caller == null) {
                throw new Error('The method "' + h + '" cannot be called.')
            }
            var m = this.caller,
                n = this.$caller;
            this.caller = n;
            this.$caller = i;
            var k = j.apply(this, arguments);
            this.$caller = n;
            this.caller = m;
            return k
        }.extend({
            $owner: g,
            $origin: j,
            $name: h
        });
        return i
    };
    var f = function(h, i, g) {
        if (a.Mutators.hasOwnProperty(h)) {
            i = a.Mutators[h].call(this, i);
            if (i == null) {
                return this
            }
        }
        if (typeOf(i) == "function") {
            if (i.$hidden) {
                return this
            }
            this.prototype[h] = (g) ? i : b(this, h, i)
        } else {
            Object.merge(this.prototype, h, i)
        }
        return this
    };
    var d = function(g) {
        g.$prototyping = true;
        var h = new g;
        delete g.$prototyping;
        return h
    };
    a.implement("implement", f.overloadSetter());
    a.Mutators = {
        Extends: function(g) {
            this.parent = g;
            this.prototype = d(g)
        },
        Implements: function(g) {
            Array.convert(g).each(function(j) {
                var h = new j;
                for (var i in h) {
                    f.call(this, i, h[i], true)
                }
            }, this)
        }
    }
})();
(function() {
    this.Chain = new Class({
        $chain: [],
        chain: function() {
            this.$chain.append(Array.flatten(arguments));
            return this
        },
        callChain: function() {
            return (this.$chain.length) ? this.$chain.shift().apply(this, arguments) : false
        },
        clearChain: function() {
            this.$chain.empty();
            return this
        }
    });
    var a = function(b) {
        return b.replace(/^on([A-Z])/, function(c, d) {
            return d.toLowerCase()
        })
    };
    this.Events = new Class({
        $events: {},
        addEvent: function(d, c, b) {
            d = a(d);
            this.$events[d] = (this.$events[d] || []).include(c);
            if (b) {
                c.internal = true
            }
            return this
        },
        addEvents: function(b) {
            for (var c in b) {
                this.addEvent(c, b[c])
            }
            return this
        },
        fireEvent: function(e, c, b) {
            e = a(e);
            var d = this.$events[e];
            if (!d) {
                return this
            }
            c = Array.convert(c);
            d.each(function(f) {
                if (b) {
                    f.delay(b, this, c)
                } else {
                    f.apply(this, c)
                }
            }, this);
            return this
        },
        removeEvent: function(e, d) {
            e = a(e);
            var c = this.$events[e];
            if (c && !d.internal) {
                var b = c.indexOf(d);
                if (b != -1) {
                    delete c[b]
                }
            }
            return this
        },
        removeEvents: function(d) {
            var e;
            if (typeOf(d) == "object") {
                for (e in d) {
                    this.removeEvent(e, d[e])
                }
                return this
            }
            if (d) {
                d = a(d)
            }
            for (e in this.$events) {
                if (d && d != e) {
                    continue
                }
                var c = this.$events[e];
                for (var b = c.length; b--;) {
                    if (b in c) {
                        this.removeEvent(e, c[b])
                    }
                }
            }
            return this
        }
    });
    this.Options = new Class({
        setOptions: function() {
            var b = this.options = Object.merge.apply(null, [{}, this.options].append(arguments));
            if (this.addEvent) {
                for (var c in b) {
                    if (typeOf(b[c]) != "function" || !(/^on[A-Z]/).test(c)) {
                        continue
                    }
                    this.addEvent(c, b[c]);
                    delete b[c]
                }
            }
            return this
        }
    })
})();
(function() {
    var k = 0,
        d = 1,
        b = 2;
    var h = Class.Thenable = new Class({
        $thenableState: k,
        $thenableResult: null,
        $thenableReactions: [],
        resolve: function(m) {
            i(this, m);
            return this
        },
        reject: function(m) {
            j(this, m);
            return this
        },
        getThenableState: function() {
            switch (this.$thenableState) {
                case k:
                    return "pending";
                case d:
                    return "fulfilled";
                case b:
                    return "rejected"
            }
        },
        resetThenable: function(m) {
            j(this, m);
            f(this);
            return this
        },
        then: function(o, n) {
            if (typeof o !== "function") {
                o = "Identity"
            }
            if (typeof n !== "function") {
                n = "Thrower"
            }
            var m = new h();
            this.$thenableReactions.push({
                thenable: m,
                fulfillHandler: o,
                rejectHandler: n
            });
            if (this.$thenableState !== k) {
                c(this)
            }
            return m
        },
        "catch": function(m) {
            return this.then(null, m)
        }
    });
    h.extend({
        resolve: function(n) {
            var m;
            if (n instanceof h) {
                m = n
            } else {
                m = new h();
                i(m, n)
            }
            return m
        },
        reject: function(n) {
            var m = new h();
            j(m, n);
            return m
        }
    });

    function i(m, p) {
        if (m.$thenableState === k) {
            if (m === p) {
                j(m, new TypeError("Tried to resolve a thenable with itself."))
            } else {
                if (p && (typeof p === "object" || typeof p === "function")) {
                    var q;
                    try {
                        q = p.then
                    } catch (o) {
                        j(m, o)
                    }
                    if (typeof q === "function") {
                        var n = false;
                        a(function() {
                            try {
                                q.call(p, function(s) {
                                    if (!n) {
                                        n = true;
                                        i(m, s)
                                    }
                                }, function(s) {
                                    if (!n) {
                                        n = true;
                                        j(m, s)
                                    }
                                })
                            } catch (r) {
                                if (!n) {
                                    n = true;
                                    j(m, r)
                                }
                            }
                        })
                    } else {
                        g(m, p)
                    }
                } else {
                    g(m, p)
                }
            }
        }
    }

    function g(m, n) {
        if (m.$thenableState === k) {
            m.$thenableResult = n;
            m.$thenableState = d;
            c(m)
        }
    }

    function j(m, n) {
        if (m.$thenableState === k) {
            m.$thenableResult = n;
            m.$thenableState = b;
            c(m)
        }
    }

    function f(m) {
        if (m.$thenableState !== k) {
            m.$thenableResult = null;
            m.$thenableState = k
        }
    }

    function c(n) {
        var q = n.$thenableState,
            m = n.$thenableResult,
            o = n.$thenableReactions,
            p;
        if (q === d) {
            n.$thenableReactions = [];
            p = "fulfillHandler"
        } else {
            if (q == b) {
                n.$thenableReactions = [];
                p = "rejectHandler"
            }
        }
        if (p) {
            a(e.pass([m, o, p]))
        }
    }

    function e(m, o, s) {
        for (var q = 0, n = o.length; q < n; ++q) {
            var t = o[q],
                r = t[s];
            if (r === "Identity") {
                i(t.thenable, m)
            } else {
                if (r === "Thrower") {
                    j(t.thenable, m)
                } else {
                    try {
                        i(t.thenable, r(m))
                    } catch (p) {
                        j(t.thenable, p)
                    }
                }
            }
        }
    }
    var a;
    if (typeof process !== "undefined" && typeof process.nextTick === "function") {
        a = process.nextTick
    } else {
        if (typeof setImmediate !== "undefined") {
            a = setImmediate
        } else {
            a = function(m) {
                setTimeout(m, 0)
            }
        }
    }
})();
(function() {
    Object.extend({
        subset: function(c, f) {
            var e = {};
            for (var d = 0, a = f.length; d < a; d++) {
                var b = f[d];
                if (b in c) {
                    e[b] = c[b]
                }
            }
            return e
        },
        map: function(a, e, g) {
            var d = {};
            var f = Object.keys(a);
            for (var c = 0; c < f.length; c++) {
                var b = f[c];
                d[b] = e.call(g, a[b], b, a)
            }
            return d
        },
        filter: function(a, e, h) {
            var d = {};
            var f = Object.keys(a);
            for (var c = 0; c < f.length; c++) {
                var b = f[c],
                    g = a[b];
                if (e.call(h, g, b, a)) {
                    d[b] = g
                }
            }
            return d
        },
        every: function(a, d, f) {
            var e = Object.keys(a);
            for (var c = 0; c < e.length; c++) {
                var b = e[c];
                if (!d.call(f, a[b], b)) {
                    return false
                }
            }
            return true
        },
        some: function(a, d, f) {
            var e = Object.keys(a);
            for (var c = 0; c < e.length; c++) {
                var b = e[c];
                if (d.call(f, a[b], b)) {
                    return true
                }
            }
            return false
        },
        values: function(c) {
            var b = [];
            var e = Object.keys(c);
            for (var d = 0; d < e.length; d++) {
                var a = e[d];
                b.push(c[a])
            }
            return b
        },
        getLength: function(a) {
            return Object.keys(a).length
        },
        keyOf: function(a, e) {
            var d = Object.keys(a);
            for (var c = 0; c < d.length; c++) {
                var b = d[c];
                if (a[b] === e) {
                    return b
                }
            }
            return null
        },
        contains: function(a, b) {
            return Object.keyOf(a, b) != null
        },
        toQueryString: function(a, b) {
            var c = [];
            Object.each(a, function(g, f) {
                if (b) {
                    f = b + "[" + f + "]"
                }
                var e;
                switch (typeOf(g)) {
                    case "object":
                        e = Object.toQueryString(g, f);
                        break;
                    case "array":
                        var d = {};
                        g.each(function(j, h) {
                            d[h] = j
                        });
                        e = Object.toQueryString(d, f);
                        break;
                    default:
                        e = f + "=" + encodeURIComponent(g)
                }
                if (g != null) {
                    c.push(e)
                }
            });
            return c.join("&")
        }
    })
})();
(function() {
    var k, o, m, g, a = {},
        c = {},
        n = /\\/g;
    var e = function(r, q) {
        if (r == null) {
            return null
        }
        if (r.Slick === true) {
            return r
        }
        r = ("" + r).replace(/^\s+|\s+$/g, "");
        g = !!q;
        var p = (g) ? c : a;
        if (p[r]) {
            return p[r]
        }
        k = {
            Slick: true,
            expressions: [],
            raw: r,
            reverse: function() {
                return e(this.raw, true)
            }
        };
        o = -1;
        while (r != (r = r.replace(j, b))) {}
        k.length = k.expressions.length;
        return p[k.raw] = (g) ? h(k) : k
    };
    var i = function(p) {
        if (p === "!") {
            return " "
        } else {
            if (p === " ") {
                return "!"
            } else {
                if ((/^!/).test(p)) {
                    return p.replace(/^!/, "")
                } else {
                    return "!" + p
                }
            }
        }
    };
    var h = function(v) {
        var s = v.expressions;
        for (var q = 0; q < s.length; q++) {
            var u = s[q];
            var r = {
                parts: [],
                tag: "*",
                combinator: i(u[0].combinator)
            };
            for (var p = 0; p < u.length; p++) {
                var t = u[p];
                if (!t.reverseCombinator) {
                    t.reverseCombinator = " "
                }
                t.combinator = t.reverseCombinator;
                delete t.reverseCombinator
            }
            u.reverse().push(r)
        }
        return v
    };
    var f = function(p) {
        return p.replace(/[-[\]{}()*+?.\\^$|,#\s]/g, function(q) {
            return "\\" + q
        })
    };
    var j = new RegExp("^(?:\\s*(,)\\s*|\\s*(<combinator>+)\\s*|(\\s+)|(<unicode>+|\\*)|\\#(<unicode>+)|\\.(<unicode>+)|\\[\\s*(<unicode1>+)(?:\\s*([*^$!~|]?=)(?:\\s*(?:([\"']?)(.*?)\\9)))?\\s*\\](?!\\])|(:+)(<unicode>+)(?:\\((?:(?:([\"'])([^\\13]*)\\13)|((?:\\([^)]+\\)|[^()]*)+))\\))?)".replace(/<combinator>/, "[" + f(">+~`!@$%^&={}\\;</") + "]").replace(/<unicode>/g, "(?:[\\w\\u00a1-\\uFFFF-]|\\\\[^\\s0-9a-f])").replace(/<unicode1>/g, "(?:[:\\w\\u00a1-\\uFFFF-]|\\\\[^\\s0-9a-f])"));

    function b(y, t, E, A, s, D, r, C, B, z, v, G, H, w, q, x) {
        if (t || o === -1) {
            k.expressions[++o] = [];
            m = -1;
            if (t) {
                return ""
            }
        }
        if (E || A || m === -1) {
            E = E || " ";
            var u = k.expressions[o];
            if (g && u[m]) {
                u[m].reverseCombinator = i(E)
            }
            u[++m] = {
                combinator: E,
                tag: "*"
            }
        }
        var p = k.expressions[o][m];
        if (s) {
            p.tag = s.replace(n, "")
        } else {
            if (D) {
                p.id = D.replace(n, "")
            } else {
                if (r) {
                    r = r.replace(n, "");
                    if (!p.classList) {
                        p.classList = []
                    }
                    if (!p.classes) {
                        p.classes = []
                    }
                    p.classList.push(r);
                    p.classes.push({
                        value: r,
                        regexp: new RegExp("(^|\\s)" + f(r) + "(\\s|$)")
                    })
                } else {
                    if (H) {
                        x = x || q;
                        x = x ? x.replace(n, "") : null;
                        if (!p.pseudos) {
                            p.pseudos = []
                        }
                        p.pseudos.push({
                            key: H.replace(n, ""),
                            value: x,
                            type: G.length == 1 ? "class" : "element"
                        })
                    } else {
                        if (C) {
                            C = C.replace(n, "");
                            v = (v || "").replace(n, "");
                            var F, I;
                            switch (B) {
                                case "^=":
                                    I = new RegExp("^" + f(v));
                                    break;
                                case "$=":
                                    I = new RegExp(f(v) + "$");
                                    break;
                                case "~=":
                                    I = new RegExp("(^|\\s)" + f(v) + "(\\s|$)");
                                    break;
                                case "|=":
                                    I = new RegExp("^" + f(v) + "(-|$)");
                                    break;
                                case "=":
                                    F = function(J) {
                                        return v == J
                                    };
                                    break;
                                case "*=":
                                    F = function(J) {
                                        return J && J.indexOf(v) > -1
                                    };
                                    break;
                                case "!=":
                                    F = function(J) {
                                        return v != J
                                    };
                                    break;
                                default:
                                    F = function(J) {
                                        return !!J
                                    }
                            }
                            if (v == "" && (/^[*$^]=$/).test(B)) {
                                F = function() {
                                    return false
                                }
                            }
                            if (!F) {
                                F = function(J) {
                                    return J && I.test(J)
                                }
                            }
                            if (!p.attributes) {
                                p.attributes = []
                            }
                            p.attributes.push({
                                key: C,
                                operator: B,
                                value: v,
                                test: F
                            })
                        }
                    }
                }
            }
        }
        return ""
    }
    var d = (this.Slick || {});
    d.parse = function(p) {
        return e(p)
    };
    d.escapeRegExp = f;
    if (!this.Slick) {
        this.Slick = d
    }
}).apply((typeof exports != "undefined") ? exports : this);
(function() {
    var k = {},
        n = {},
        d = Object.prototype.toString;
    k.isNativeCode = function(c) {
        return (/\{\s*\[native code\]\s*\}/).test("" + c)
    };
    k.isXML = function(c) {
        return (!!c.xmlVersion) || (!!c.xml) || (d.call(c) == "[object XMLDocument]") || (c.nodeType == 9 && c.documentElement.nodeName != "HTML")
    };
    k.setDocument = function(x) {
        var q = x.nodeType;
        if (q == 9) {} else {
            if (q) {
                x = x.ownerDocument
            } else {
                if (x.navigator) {
                    x = x.document
                } else {
                    return
                }
            }
        }
        if (this.document === x) {
            return
        }
        this.document = x;
        var B = x.documentElement,
            p = this.getUIDXML(B),
            t = n[p],
            s;
        if (t) {
            for (s in t) {
                this[s] = t[s]
            }
            return
        }
        t = n[p] = {};
        t.root = B;
        t.isXMLDocument = this.isXML(x);
        t.brokenStarGEBTN = t.starSelectsClosedQSA = t.idGetsName = t.brokenMixedCaseQSA = t.brokenGEBCN = t.brokenCheckedQSA = t.brokenEmptyAttributeQSA = t.isHTMLDocument = t.nativeMatchesSelector = false;
        var r, v, z, A, u;
        var y, w = "slick_uniqueid";
        var c = x.createElement("div");
        var o = x.body || x.getElementsByTagName("body")[0] || B;
        o.appendChild(c);
        try {
            c.innerHTML = '<a id="' + w + '"></a>';
            t.isHTMLDocument = !!x.getElementById(w)
        } catch (D) {}
        if (t.isHTMLDocument) {
            c.style.display = "none";
            c.appendChild(x.createComment(""));
            v = (c.getElementsByTagName("*").length > 1);
            try {
                c.innerHTML = "foo</foo>";
                y = c.getElementsByTagName("*");
                r = (y && !!y.length && y[0].nodeName.charAt(0) == "/")
            } catch (D) {}
            t.brokenStarGEBTN = v || r;
            try {
                c.innerHTML = '<a name="' + w + '"></a><b id="' + w + '"></b>';
                t.idGetsName = x.getElementById(w) === c.firstChild
            } catch (D) {}
            if (c.getElementsByClassName) {
                try {
                    c.innerHTML = '<a class="f"></a><a class="b"></a>';
                    c.getElementsByClassName("b").length;
                    c.firstChild.className = "b";
                    A = (c.getElementsByClassName("b").length != 2)
                } catch (D) {}
                try {
                    c.innerHTML = '<a class="a"></a><a class="f b a"></a>';
                    z = (c.getElementsByClassName("a").length != 2)
                } catch (D) {}
                t.brokenGEBCN = A || z
            }
            if (c.querySelectorAll) {
                try {
                    c.innerHTML = "foo</foo>";
                    y = c.querySelectorAll("*");
                    t.starSelectsClosedQSA = (y && !!y.length && y[0].nodeName.charAt(0) == "/")
                } catch (D) {}
                try {
                    c.innerHTML = '<a class="MiX"></a>';
                    t.brokenMixedCaseQSA = !c.querySelectorAll(".MiX").length
                } catch (D) {}
                try {
                    c.innerHTML = '<select><option selected="selected">a</option></select>';
                    t.brokenCheckedQSA = (c.querySelectorAll(":checked").length == 0)
                } catch (D) {}
                try {
                    c.innerHTML = '<a class=""></a>';
                    t.brokenEmptyAttributeQSA = (c.querySelectorAll('[class*=""]').length != 0)
                } catch (D) {}
            }
            try {
                c.innerHTML = '<form action="s"><input id="action"/></form>';
                u = (c.firstChild.getAttribute("action") != "s")
            } catch (D) {}
            t.nativeMatchesSelector = B.matches || B.mozMatchesSelector || B.webkitMatchesSelector;
            if (t.nativeMatchesSelector) {
                try {
                    t.nativeMatchesSelector.call(B, ":slick");
                    t.nativeMatchesSelector = null
                } catch (D) {}
            }
        }
        try {
            B.slick_expando = 1;
            delete B.slick_expando;
            t.getUID = this.getUIDHTML
        } catch (D) {
            t.getUID = this.getUIDXML
        }
        o.removeChild(c);
        c = y = o = null;
        t.getAttribute = (t.isHTMLDocument && u) ? function(H, F) {
            var I = this.attributeGetters[F];
            if (I) {
                return I.call(H)
            }
            var G = H.getAttributeNode(F);
            return (G) ? G.nodeValue : null
        } : function(G, F) {
            var H = this.attributeGetters[F];
            return (H) ? H.call(G) : G.getAttribute(F)
        };
        t.hasAttribute = (B && this.isNativeCode(B.hasAttribute)) ? function(G, F) {
            return G.hasAttribute(F)
        } : function(G, F) {
            G = G.getAttributeNode(F);
            return !!(G && (G.specified || G.nodeValue))
        };
        var E = B && this.isNativeCode(B.contains),
            C = x && this.isNativeCode(x.contains);
        t.contains = (E && C) ? function(F, G) {
            return F.contains(G)
        } : (E && !C) ? function(F, G) {
            return F === G || ((F === x) ? x.documentElement : F).contains(G)
        } : (B && B.compareDocumentPosition) ? function(F, G) {
            return F === G || !!(F.compareDocumentPosition(G) & 16)
        } : function(F, G) {
            if (G) {
                do {
                    if (G === F) {
                        return true
                    }
                } while ((G = G.parentNode))
            }
            return false
        };
        t.documentSorter = (B.compareDocumentPosition) ? function(G, F) {
            if (!G.compareDocumentPosition || !F.compareDocumentPosition) {
                return 0
            }
            return G.compareDocumentPosition(F) & 4 ? -1 : G === F ? 0 : 1
        } : ("sourceIndex" in B) ? function(G, F) {
            if (!G.sourceIndex || !F.sourceIndex) {
                return 0
            }
            return G.sourceIndex - F.sourceIndex
        } : (x.createRange) ? function(I, G) {
            if (!I.ownerDocument || !G.ownerDocument) {
                return 0
            }
            var H = I.ownerDocument.createRange(),
                F = G.ownerDocument.createRange();
            H.setStart(I, 0);
            H.setEnd(I, 0);
            F.setStart(G, 0);
            F.setEnd(G, 0);
            return H.compareBoundaryPoints(Range.START_TO_END, F)
        } : null;
        B = null;
        for (s in t) {
            this[s] = t[s]
        }
    };
    var f = /^([#.]?)((?:[\w-]+|\*))$/,
        h = /\[.+[*$^]=(?:""|'')?\]/,
        g = {};
    k.search = function(p, C, O, u) {
        var A = this.found = (u) ? null : (O || []);
        if (!p) {
            return A
        } else {
            if (p.navigator) {
                p = p.document
            } else {
                if (!p.nodeType) {
                    return A
                }
            }
        }
        var y, N, I, G, r = this.uniques = {},
            x = !!(O && O.length),
            c = (p.nodeType == 9);
        if (this.document !== (c ? p : p.ownerDocument)) {
            this.setDocument(p)
        }
        if (x) {
            for (N = A.length; N--;) {
                r[this.getUID(A[N])] = true
            }
        }
        if (typeof C == "string") {
            var B = C.match(f);
            simpleSelectors: if (B) {
                var K = B[1],
                    V = B[2];
                if (!K) {
                    if (V == "*" && this.brokenStarGEBTN) {
                        break simpleSelectors
                    }
                    G = p.getElementsByTagName(V);
                    if (u) {
                        return G[0] || null
                    }
                    for (N = 0; I = G[N++];) {
                        if (!(x && r[this.getUID(I)])) {
                            A.push(I)
                        }
                    }
                } else {
                    if (K == "#") {
                        if (!this.isHTMLDocument || !c) {
                            break simpleSelectors
                        }
                        I = p.getElementById(V);
                        if (!I) {
                            return A
                        }
                        if (this.idGetsName && I.getAttributeNode("id").nodeValue != V) {
                            break simpleSelectors
                        }
                        if (u) {
                            return I || null
                        }
                        if (!(x && r[this.getUID(I)])) {
                            A.push(I)
                        }
                    } else {
                        if (K == ".") {
                            if (!this.isHTMLDocument || ((!p.getElementsByClassName || this.brokenGEBCN) && p.querySelectorAll)) {
                                break simpleSelectors
                            }
                            if (p.getElementsByClassName && !this.brokenGEBCN) {
                                G = p.getElementsByClassName(V);
                                if (u) {
                                    return G[0] || null
                                }
                                for (N = 0; I = G[N++];) {
                                    if (!(x && r[this.getUID(I)])) {
                                        A.push(I)
                                    }
                                }
                            } else {
                                var t = new RegExp("(^|\\s)" + e.escapeRegExp(V) + "(\\s|$)");
                                G = p.getElementsByTagName("*");
                                for (N = 0; I = G[N++];) {
                                    className = I.className;
                                    if (!(className && t.test(className))) {
                                        continue
                                    }
                                    if (u) {
                                        return I
                                    }
                                    if (!(x && r[this.getUID(I)])) {
                                        A.push(I)
                                    }
                                }
                            }
                        }
                    }
                }
                if (x) {
                    this.sort(A)
                }
                return (u) ? null : A
            }
            querySelector: if (p.querySelectorAll) {
                if (!this.isHTMLDocument || g[C] || this.brokenMixedCaseQSA || (this.brokenCheckedQSA && C.indexOf(":checked") > -1) || (this.brokenEmptyAttributeQSA && h.test(C)) || (!c && C.indexOf(",") > -1) || e.disableQSA) {
                    break querySelector
                }
                var z = C,
                    D = p,
                    M;
                if (!c) {
                    M = D.getAttribute("id"), slickid = "slickid__";
                    D.setAttribute("id", slickid);
                    z = "#" + slickid + " " + z;
                    p = D.parentNode
                }
                try {
                    if (u) {
                        return p.querySelector(z) || null
                    } else {
                        G = p.querySelectorAll(z)
                    }
                } catch (P) {
                    g[C] = 1;
                    break querySelector
                } finally {
                    if (!c) {
                        if (M) {
                            D.setAttribute("id", M)
                        } else {
                            D.removeAttribute("id")
                        }
                        p = D
                    }
                }
                if (this.starSelectsClosedQSA) {
                    for (N = 0; I = G[N++];) {
                        if (I.nodeName > "@" && !(x && r[this.getUID(I)])) {
                            A.push(I)
                        }
                    }
                } else {
                    for (N = 0; I = G[N++];) {
                        if (!(x && r[this.getUID(I)])) {
                            A.push(I)
                        }
                    }
                }
                if (x) {
                    this.sort(A)
                }
                return A
            }
            y = this.Slick.parse(C);
            if (!y.length) {
                return A
            }
        } else {
            if (C == null) {
                return A
            } else {
                if (C.Slick) {
                    y = C
                } else {
                    if (this.contains(p.documentElement || p, C)) {
                        (A) ? A.push(C): A = C;
                        return A
                    } else {
                        return A
                    }
                }
            }
        }
        this.posNTH = {};
        this.posNTHLast = {};
        this.posNTHType = {};
        this.posNTHTypeLast = {};
        this.push = (!x && (u || (y.length == 1 && y.expressions[0].length == 1))) ? this.pushArray : this.pushUID;
        if (A == null) {
            A = []
        }
        var L, H, F;
        var J, U, E, T, Q, w, s;
        var v, q, o, R, S = y.expressions;
        search: for (N = 0;
            (q = S[N]); N++) {
            for (L = 0;
                (o = q[L]); L++) {
                J = "combinator:" + o.combinator;
                if (!this[J]) {
                    continue search
                }
                U = (this.isXMLDocument) ? o.tag : o.tag.toUpperCase();
                E = o.id;
                T = o.classList;
                Q = o.classes;
                w = o.attributes;
                s = o.pseudos;
                R = (L === (q.length - 1));
                this.bitUniques = {};
                if (R) {
                    this.uniques = r;
                    this.found = A
                } else {
                    this.uniques = {};
                    this.found = []
                }
                if (L === 0) {
                    this[J](p, U, E, Q, w, s, T);
                    if (u && R && A.length) {
                        break search
                    }
                } else {
                    if (u && R) {
                        for (H = 0, F = v.length; H < F; H++) {
                            this[J](v[H], U, E, Q, w, s, T);
                            if (A.length) {
                                break search
                            }
                        }
                    } else {
                        for (H = 0, F = v.length; H < F; H++) {
                            this[J](v[H], U, E, Q, w, s, T)
                        }
                    }
                }
                v = this.found
            }
        }
        if (x || (y.expressions.length > 1)) {
            this.sort(A)
        }
        return (u) ? (A[0] || null) : A
    };
    k.uidx = 1;
    k.uidk = "slick-uniqueid";
    k.getUIDXML = function(o) {
        var c = o.getAttribute(this.uidk);
        if (!c) {
            c = this.uidx++;
            o.setAttribute(this.uidk, c)
        }
        return c
    };
    k.getUIDHTML = function(c) {
        return c.uniqueNumber || (c.uniqueNumber = this.uidx++)
    };
    k.sort = function(c) {
        if (!this.documentSorter) {
            return c
        }
        c.sort(this.documentSorter);
        return c
    };
    k.cacheNTH = {};
    k.matchNTH = /^([+-]?\d*)?([a-z]+)?([+-]\d+)?$/;
    k.parseNTHArgument = function(r) {
        var p = r.match(this.matchNTH);
        if (!p) {
            return false
        }
        var q = p[2] || false;
        var o = p[1] || 1;
        if (o == "-") {
            o = -1
        }
        var c = +p[3] || 0;
        p = (q == "n") ? {
            a: o,
            b: c
        } : (q == "odd") ? {
            a: 2,
            b: 1
        } : (q == "even") ? {
            a: 2,
            b: 0
        } : {
            a: 0,
            b: o
        };
        return (this.cacheNTH[r] = p)
    };
    k.createNTHPseudo = function(q, o, c, p) {
        return function(t, r) {
            var v = this.getUID(t);
            if (!this[c][v]) {
                var B = t.parentNode;
                if (!B) {
                    return false
                }
                var s = B[q],
                    u = 1;
                if (p) {
                    var A = t.nodeName;
                    do {
                        if (s.nodeName != A) {
                            continue
                        }
                        this[c][this.getUID(s)] = u++
                    } while ((s = s[o]))
                } else {
                    do {
                        if (s.nodeType != 1) {
                            continue
                        }
                        this[c][this.getUID(s)] = u++
                    } while ((s = s[o]))
                }
            }
            r = r || "n";
            var w = this.cacheNTH[r] || this.parseNTHArgument(r);
            if (!w) {
                return false
            }
            var z = w.a,
                y = w.b,
                x = this[c][v];
            if (z == 0) {
                return y == x
            }
            if (z > 0) {
                if (x < y) {
                    return false
                }
            } else {
                if (y < x) {
                    return false
                }
            }
            return ((x - y) % z) == 0
        }
    };
    k.pushArray = function(q, c, s, p, o, r) {
        if (this.matchSelector(q, c, s, p, o, r)) {
            this.found.push(q)
        }
    };
    k.pushUID = function(r, c, t, q, o, s) {
        var p = this.getUID(r);
        if (!this.uniques[p] && this.matchSelector(r, c, t, q, o, s)) {
            this.uniques[p] = true;
            this.found.push(r)
        }
    };
    k.matchNode = function(o, p) {
        if (this.isHTMLDocument && this.nativeMatchesSelector) {
            try {
                return this.nativeMatchesSelector.call(o, p.replace(/\[([^=]+)=\s*([^'"\]]+?)\s*\]/g, '[$1="$2"]'))
            } catch (v) {}
        }
        var u = this.Slick.parse(p);
        if (!u) {
            return true
        }
        var s = u.expressions,
            t = 0,
            r, x;
        for (r = 0;
            (x = s[r]); r++) {
            if (x.length == 1) {
                var q = x[0];
                if (this.matchSelector(o, (this.isXMLDocument) ? q.tag : q.tag.toUpperCase(), q.id, q.classes, q.attributes, q.pseudos)) {
                    return true
                }
                t++
            }
        }
        if (t == u.length) {
            return false
        }
        var c = this.search(this.document, u),
            w;
        for (r = 0; w = c[r++];) {
            if (w === o) {
                return true
            }
        }
        return false
    };
    k.matchPseudo = function(r, c, q) {
        var o = "pseudo:" + c;
        if (this[o]) {
            return this[o](r, q)
        }
        var p = this.getAttribute(r, c);
        return (q) ? q == p : !!p
    };
    k.matchSelector = function(p, w, c, q, r, t) {
        if (w) {
            var u = (this.isXMLDocument) ? p.nodeName : p.nodeName.toUpperCase();
            if (w == "*") {
                if (u < "@") {
                    return false
                }
            } else {
                if (u != w) {
                    return false
                }
            }
        }
        if (c && p.getAttribute("id") != c) {
            return false
        }
        var s, o, v;
        if (q) {
            for (s = q.length; s--;) {
                v = this.getAttribute(p, "class");
                if (!(v && q[s].regexp.test(v))) {
                    return false
                }
            }
        }
        if (r) {
            for (s = r.length; s--;) {
                o = r[s];
                if (o.operator ? !o.test(this.getAttribute(p, o.key)) : !this.hasAttribute(p, o.key)) {
                    return false
                }
            }
        }
        if (t) {
            for (s = t.length; s--;) {
                o = t[s];
                if (!this.matchPseudo(p, o.key, o.value)) {
                    return false
                }
            }
        }
        return true
    };
    var j = {
        " ": function(r, x, o, s, t, v, q) {
            var u, w, p;
            if (this.isHTMLDocument) {
                getById: if (o) {
                    w = this.document.getElementById(o);
                    if ((!w && r.all) || (this.idGetsName && w && w.getAttributeNode("id").nodeValue != o)) {
                        p = r.all[o];
                        if (!p) {
                            return
                        }
                        if (!p[0]) {
                            p = [p]
                        }
                        for (u = 0; w = p[u++];) {
                            var c = w.getAttributeNode("id");
                            if (c && c.nodeValue == o) {
                                this.push(w, x, null, s, t, v);
                                break
                            }
                        }
                        return
                    }
                    if (!w) {
                        if (this.contains(this.root, r)) {
                            return
                        } else {
                            break getById
                        }
                    } else {
                        if (this.document !== r && !this.contains(r, w)) {
                            return
                        }
                    }
                    this.push(w, x, null, s, t, v);
                    return
                }getByClass: if (s && r.getElementsByClassName && !this.brokenGEBCN) {
                    p = r.getElementsByClassName(q.join(" "));
                    if (!(p && p.length)) {
                        break getByClass
                    }
                    for (u = 0; w = p[u++];) {
                        this.push(w, x, o, null, t, v)
                    }
                    return
                }
            }
            getByTag: {
                p = r.getElementsByTagName(x);
                if (!(p && p.length)) {
                    break getByTag
                }
                if (!this.brokenStarGEBTN) {
                    x = null
                }
                for (u = 0; w = p[u++];) {
                    this.push(w, x, o, s, t, v)
                }
            }
        },
        ">": function(q, c, s, p, o, r) {
            if ((q = q.firstChild)) {
                do {
                    if (q.nodeType == 1) {
                        this.push(q, c, s, p, o, r)
                    }
                } while ((q = q.nextSibling))
            }
        },
        "+": function(q, c, s, p, o, r) {
            while ((q = q.nextSibling)) {
                if (q.nodeType == 1) {
                    this.push(q, c, s, p, o, r);
                    break
                }
            }
        },
        "^": function(q, c, s, p, o, r) {
            q = q.firstChild;
            if (q) {
                if (q.nodeType == 1) {
                    this.push(q, c, s, p, o, r)
                } else {
                    this["combinator:+"](q, c, s, p, o, r)
                }
            }
        },
        "~": function(r, c, t, q, o, s) {
            while ((r = r.nextSibling)) {
                if (r.nodeType != 1) {
                    continue
                }
                var p = this.getUID(r);
                if (this.bitUniques[p]) {
                    break
                }
                this.bitUniques[p] = true;
                this.push(r, c, t, q, o, s)
            }
        },
        "++": function(q, c, s, p, o, r) {
            this["combinator:+"](q, c, s, p, o, r);
            this["combinator:!+"](q, c, s, p, o, r)
        },
        "~~": function(q, c, s, p, o, r) {
            this["combinator:~"](q, c, s, p, o, r);
            this["combinator:!~"](q, c, s, p, o, r)
        },
        "!": function(q, c, s, p, o, r) {
            while ((q = q.parentNode)) {
                if (q !== this.document) {
                    this.push(q, c, s, p, o, r)
                }
            }
        },
        "!>": function(q, c, s, p, o, r) {
            q = q.parentNode;
            if (q !== this.document) {
                this.push(q, c, s, p, o, r)
            }
        },
        "!+": function(q, c, s, p, o, r) {
            while ((q = q.previousSibling)) {
                if (q.nodeType == 1) {
                    this.push(q, c, s, p, o, r);
                    break
                }
            }
        },
        "!^": function(q, c, s, p, o, r) {
            q = q.lastChild;
            if (q) {
                if (q.nodeType == 1) {
                    this.push(q, c, s, p, o, r)
                } else {
                    this["combinator:!+"](q, c, s, p, o, r)
                }
            }
        },
        "!~": function(r, c, t, q, o, s) {
            while ((r = r.previousSibling)) {
                if (r.nodeType != 1) {
                    continue
                }
                var p = this.getUID(r);
                if (this.bitUniques[p]) {
                    break
                }
                this.bitUniques[p] = true;
                this.push(r, c, t, q, o, s)
            }
        }
    };
    for (var i in j) {
        k["combinator:" + i] = j[i]
    }
    var m = {
        empty: function(c) {
            var o = c.firstChild;
            return !(o && o.nodeType == 1) && !(c.innerText || c.textContent || "").length
        },
        not: function(c, o) {
            return !this.matchNode(c, o)
        },
        contains: function(c, o) {
            return (c.innerText || c.textContent || "").indexOf(o) > -1
        },
        "first-child": function(c) {
            while ((c = c.previousSibling)) {
                if (c.nodeType == 1) {
                    return false
                }
            }
            return true
        },
        "last-child": function(c) {
            while ((c = c.nextSibling)) {
                if (c.nodeType == 1) {
                    return false
                }
            }
            return true
        },
        "only-child": function(p) {
            var o = p;
            while ((o = o.previousSibling)) {
                if (o.nodeType == 1) {
                    return false
                }
            }
            var c = p;
            while ((c = c.nextSibling)) {
                if (c.nodeType == 1) {
                    return false
                }
            }
            return true
        },
        "nth-child": k.createNTHPseudo("firstChild", "nextSibling", "posNTH"),
        "nth-last-child": k.createNTHPseudo("lastChild", "previousSibling", "posNTHLast"),
        "nth-of-type": k.createNTHPseudo("firstChild", "nextSibling", "posNTHType", true),
        "nth-last-of-type": k.createNTHPseudo("lastChild", "previousSibling", "posNTHTypeLast", true),
        index: function(o, c) {
            return this["pseudo:nth-child"](o, "" + (c + 1))
        },
        even: function(c) {
            return this["pseudo:nth-child"](c, "2n")
        },
        odd: function(c) {
            return this["pseudo:nth-child"](c, "2n+1")
        },
        "first-of-type": function(c) {
            var o = c.nodeName;
            while ((c = c.previousSibling)) {
                if (c.nodeName == o) {
                    return false
                }
            }
            return true
        },
        "last-of-type": function(c) {
            var o = c.nodeName;
            while ((c = c.nextSibling)) {
                if (c.nodeName == o) {
                    return false
                }
            }
            return true
        },
        "only-of-type": function(p) {
            var o = p,
                q = p.nodeName;
            while ((o = o.previousSibling)) {
                if (o.nodeName == q) {
                    return false
                }
            }
            var c = p;
            while ((c = c.nextSibling)) {
                if (c.nodeName == q) {
                    return false
                }
            }
            return true
        },
        enabled: function(c) {
            return !c.disabled
        },
        disabled: function(c) {
            return c.disabled
        },
        checked: function(c) {
            return c.checked || c.selected
        },
        focus: function(c) {
            return this.isHTMLDocument && this.document.activeElement === c && (c.href || c.type || this.hasAttribute(c, "tabindex"))
        },
        root: function(c) {
            return (c === this.root)
        },
        selected: function(c) {
            return c.selected
        }
    };
    for (var b in m) {
        k["pseudo:" + b] = m[b]
    }
    var a = k.attributeGetters = {
        "for": function() {
            return ("htmlFor" in this) ? this.htmlFor : this.getAttribute("for")
        },
        href: function() {
            return ("href" in this) ? this.getAttribute("href", 2) : this.getAttribute("href")
        },
        style: function() {
            return (this.style) ? this.style.cssText : this.getAttribute("style")
        },
        tabindex: function() {
            var c = this.getAttributeNode("tabindex");
            return (c && c.specified) ? c.nodeValue : null
        },
        type: function() {
            return this.getAttribute("type")
        },
        maxlength: function() {
            var c = this.getAttributeNode("maxLength");
            return (c && c.specified) ? c.nodeValue : null
        }
    };
    a.MAXLENGTH = a.maxLength = a.maxlength;
    var e = k.Slick = (this.Slick || {});
    e.version = "1.1.7";
    e.search = function(o, p, c) {
        return k.search(o, p, c)
    };
    e.find = function(c, o) {
        return k.search(c, o, null, true)
    };
    e.contains = function(c, o) {
        k.setDocument(c);
        return k.contains(c, o)
    };
    e.getAttribute = function(o, c) {
        k.setDocument(o);
        return k.getAttribute(o, c)
    };
    e.hasAttribute = function(o, c) {
        k.setDocument(o);
        return k.hasAttribute(o, c)
    };
    e.match = function(o, c) {
        if (!(o && c)) {
            return false
        }
        if (!c || c === o) {
            return true
        }
        k.setDocument(o);
        return k.matchNode(o, c)
    };
    e.defineAttributeGetter = function(c, o) {
        k.attributeGetters[c] = o;
        return this
    };
    e.lookupAttributeGetter = function(c) {
        return k.attributeGetters[c]
    };
    e.definePseudo = function(c, o) {
        k["pseudo:" + c] = function(q, p) {
            return o.call(q, p)
        };
        return this
    };
    e.lookupPseudo = function(c) {
        var o = k["pseudo:" + c];
        if (o) {
            return function(p) {
                return o.call(this, p)
            }
        }
        return null
    };
    e.override = function(o, c) {
        k.override(o, c);
        return this
    };
    e.isXML = k.isXML;
    e.uidOf = function(c) {
        return k.getUIDHTML(c)
    };
    if (!this.Slick) {
        this.Slick = e
    }
}).apply((typeof exports != "undefined") ? exports : this);
var Element = this.Element = function(b, g) {
    var h = Element.Constructors[b];
    if (h) {
        return h(g)
    }
    if (typeof b != "string") {
        return document.id(b).set(g)
    }
    if (!g) {
        g = {}
    }
    if (!(/^[\w-]+$/).test(b)) {
        var e = Slick.parse(b).expressions[0][0];
        b = (e.tag == "*") ? "div" : e.tag;
        if (e.id && g.id == null) {
            g.id = e.id
        }
        var d = e.attributes;
        if (d) {
            for (var a, f = 0, c = d.length; f < c; f++) {
                a = d[f];
                if (g[a.key] != null) {
                    continue
                }
                if (a.value != null && a.operator == "=") {
                    g[a.key] = a.value
                } else {
                    if (!a.value && !a.operator) {
                        g[a.key] = true
                    }
                }
            }
        }
        if (e.classList && g["class"] == null) {
            g["class"] = e.classList.join(" ")
        }
    }
    return document.newElement(b, g)
};
if (Browser.Element) {
    Element.prototype = Browser.Element.prototype;
    Element.prototype._fireEvent = (function(a) {
        return function(b, c) {
            return a.call(this, b, c)
        }
    })(Element.prototype.fireEvent)
}
new Type("Element", Element).mirror(function(a) {
    if (Array.prototype[a]) {
        return
    }
    var b = {};
    b[a] = function() {
        var h = [],
            e = arguments,
            j = true;
        for (var g = 0, d = this.length; g < d; g++) {
            var f = this[g],
                c = h[g] = f[a].apply(f, e);
            j = (j && typeOf(c) == "element")
        }
        return (j) ? new Elements(h) : h
    };
    Elements.implement(b)
});
if (!Browser.Element) {
    Element.parent = Object;
    Element.Prototype = {
        "$constructor": Element,
        "$family": Function.convert("element").hide()
    };
    Element.mirror(function(a, b) {
        Element.Prototype[a] = b
    })
}
Element.Constructors = {};
var IFrame = new Type("IFrame", function() {
    var e = Array.link(arguments, {
        properties: Type.isObject,
        iframe: function(f) {
            return (f != null)
        }
    });
    var c = e.properties || {},
        b;
    if (e.iframe) {
        b = document.id(e.iframe)
    }
    var d = c.onload || function() {};
    delete c.onload;
    c.id = c.name = [c.id, c.name, b ? (b.id || b.name) : "IFrame_" + String.uniqueID()].pick();
    b = new Element(b || "iframe", c);
    var a = function() {
        d.call(b.contentWindow)
    };
    if (window.frames[c.id]) {
        a()
    } else {
        b.addListener("load", a)
    }
    return b
});
var Elements = this.Elements = function(a) {
    if (a && a.length) {
        var e = {},
            d;
        for (var c = 0; d = a[c++];) {
            var b = Slick.uidOf(d);
            if (!e[b]) {
                e[b] = true;
                this.push(d)
            }
        }
    }
};
Elements.prototype = {
    length: 0
};
Elements.parent = Array;
new Type("Elements", Elements).implement({
    filter: function(a, b) {
        if (!a) {
            return this
        }
        return new Elements(Array.filter(this, (typeOf(a) == "string") ? function(c) {
            return c.match(a)
        } : a, b))
    }.protect(),
    push: function() {
        var d = this.length;
        for (var b = 0, a = arguments.length; b < a; b++) {
            var c = document.id(arguments[b]);
            if (c) {
                this[d++] = c
            }
        }
        return (this.length = d)
    }.protect(),
    unshift: function() {
        var b = [];
        for (var c = 0, a = arguments.length; c < a; c++) {
            var d = document.id(arguments[c]);
            if (d) {
                b.push(d)
            }
        }
        return Array.prototype.unshift.apply(this, b)
    }.protect(),
    concat: function() {
        var b = new Elements(this);
        for (var c = 0, a = arguments.length; c < a; c++) {
            var d = arguments[c];
            if (Type.isEnumerable(d)) {
                b.append(d)
            } else {
                b.push(d)
            }
        }
        return b
    }.protect(),
    append: function(c) {
        for (var b = 0, a = c.length; b < a; b++) {
            this.push(c[b])
        }
        return this
    }.protect(),
    empty: function() {
        while (this.length) {
            delete this[--this.length]
        }
        return this
    }.protect()
});
(function() {
    var g = Array.prototype.splice,
        a = {
            "0": 0,
            "1": 1,
            length: 2
        };
    g.call(a, 1, 1);
    if (a[1] == 1) {
        Elements.implement("splice", function() {
            var h = this.length;
            var e = g.apply(this, arguments);
            while (h >= this.length) {
                delete this[h--]
            }
            return e
        }.protect())
    }
    Array.forEachMethod(function(h, e) {
        Elements.implement(e, h)
    });
    Array.mirror(Elements);
    var f;
    try {
        f = (document.createElement("<input name=x>").name == "x")
    } catch (c) {}
    var d = function(e) {
        return ("" + e).replace(/&/g, "&amp;").replace(/"/g, "&quot;")
    };
    var b = (function() {
        var j = document.createElement("style"),
            h = false;
        try {
            j.innerHTML = "#justTesing{margin: 0px;}";
            h = !!j.innerHTML
        } catch (i) {}
        return h
    })();
    Document.implement({
        newElement: function(h, i) {
            if (i) {
                if (i.checked != null) {
                    i.defaultChecked = i.checked
                }
                if ((i.type == "checkbox" || i.type == "radio") && i.value == null) {
                    i.value = "on"
                }
                if (!b && h == "style") {
                    var e = document.createElement("style");
                    e.setAttribute("type", "text/css");
                    if (i.type) {
                        delete i.type
                    }
                    return this.id(e).set(i)
                }
                if (f) {
                    h = "<" + h;
                    if (i.name) {
                        h += ' name="' + d(i.name) + '"'
                    }
                    if (i.type) {
                        h += ' type="' + d(i.type) + '"'
                    }
                    h += ">";
                    delete i.name;
                    delete i.type
                }
            }
            return this.id(this.createElement(h)).set(i)
        }
    })
})();
(function() {
    Slick.uidOf(window);
    Slick.uidOf(document);
    Document.implement({
        newTextNode: function(e) {
            return this.createTextNode(e)
        },
        getDocument: function() {
            return this
        },
        getWindow: function() {
            return this.window
        },
        id: (function() {
            var e = {
                string: function(O, N, M) {
                    O = Slick.find(M, "#" + O.replace(/(\W)/g, "\\$1"));
                    return (O) ? e.element(O, N) : null
                },
                element: function(N, O) {
                    Slick.uidOf(N);
                    if (!O && !N.$family && !(/^(?:object|embed)$/i).test(N.tagName)) {
                        var M = N.fireEvent;
                        N._fireEvent = function(P, Q) {
                            return M(P, Q)
                        };
                        Object.append(N, Element.Prototype)
                    }
                    return N
                },
                object: function(N, O, M) {
                    if (N.toElement) {
                        return e.element(N.toElement(M), O)
                    }
                    return null
                }
            };
            e.textnode = e.whitespace = e.window = e.document = function(M) {
                return M
            };
            return function(N, P, O) {
                if (N && N.$family && N.uniqueNumber) {
                    return N
                }
                var M = typeOf(N);
                return (e[M]) ? e[M](N, P, O || document) : null
            }
        })()
    });
    if (window.$ == null) {
        Window.implement("$", function(e, M) {
            return document.id(e, M, this.document)
        })
    }
    Window.implement({
        getDocument: function() {
            return this.document
        },
        getWindow: function() {
            return this
        }
    });
    [Document, Element].invoke("implement", {
        getElements: function(e) {
            return Slick.search(this, e, new Elements)
        },
        getElement: function(e) {
            return document.id(Slick.find(this, e))
        }
    });
    var z = {
        contains: function(e) {
            return Slick.contains(this, e)
        }
    };
    if (!document.contains) {
        Document.implement(z)
    }
    if (!document.createElement("div").contains) {
        Element.implement(z)
    }
    var n = function(O, N) {
        if (!O) {
            return N
        }
        O = Object.clone(Slick.parse(O));
        var M = O.expressions;
        for (var e = M.length; e--;) {
            M[e][0].combinator = N
        }
        return O
    };
    Object.forEach({
        getNext: "~",
        getPrevious: "!~",
        getParent: "!"
    }, function(e, M) {
        Element.implement(M, function(N) {
            return this.getElement(n(N, e))
        })
    });
    Object.forEach({
        getAllNext: "~",
        getAllPrevious: "!~",
        getSiblings: "~~",
        getChildren: ">",
        getParents: "!"
    }, function(e, M) {
        Element.implement(M, function(N) {
            return this.getElements(n(N, e))
        })
    });
    Element.implement({
        getFirst: function(e) {
            return document.id(Slick.search(this, n(e, ">"))[0])
        },
        getLast: function(e) {
            return document.id(Slick.search(this, n(e, ">")).getLast())
        },
        getWindow: function() {
            return this.ownerDocument.window
        },
        getDocument: function() {
            return this.ownerDocument
        },
        getElementById: function(e) {
            return document.id(Slick.find(this, "#" + ("" + e).replace(/(\W)/g, "\\$1")))
        },
        match: function(e) {
            return !e || Slick.match(this, e)
        }
    });
    if (window.$$ == null) {
        Window.implement("$$", function(e) {
            if (arguments.length == 1) {
                if (typeof e == "string") {
                    return Slick.search(this.document, e, new Elements)
                } else {
                    if (Type.isEnumerable(e)) {
                        return new Elements(e)
                    }
                }
            }
            return new Elements(arguments)
        })
    }
    var c = {
        before: function(M, e) {
            var N = e.parentNode;
            if (N) {
                N.insertBefore(M, e)
            }
        },
        after: function(M, e) {
            var N = e.parentNode;
            if (N) {
                N.insertBefore(M, e.nextSibling)
            }
        },
        bottom: function(M, e) {
            e.appendChild(M)
        },
        top: function(M, e) {
            e.insertBefore(M, e.firstChild)
        }
    };
    c.inside = c.bottom;
    var v = {},
        y = {};
    var a = {};
    Array.forEach(["type", "value", "defaultValue", "accessKey", "cellPadding", "cellSpacing", "colSpan", "frameBorder", "rowSpan", "tabIndex", "useMap"], function(e) {
        a[e.toLowerCase()] = e
    });
    a.html = "innerHTML";
    a.text = (document.createElement("div").textContent == null) ? "innerText" : "textContent";
    Object.forEach(a, function(M, e) {
        y[e] = function(N, O) {
            N[M] = O
        };
        v[e] = function(N) {
            return N[M]
        }
    });
    y.text = (function() {
        return function(e, M) {
            if (e.get("tag") == "style") {
                e.set("html", M)
            } else {
                e[a.text] = M
            }
        }
    })(y.text);
    v.text = (function(e) {
        return function(M) {
            return (M.get("tag") == "style") ? M.innerHTML : e(M)
        }
    })(v.text);
    var s = ["compact", "nowrap", "ismap", "declare", "noshade", "checked", "disabled", "readOnly", "multiple", "selected", "noresize", "defer", "defaultChecked", "autofocus", "controls", "autoplay", "loop"];
    var D = {};
    Array.forEach(s, function(e) {
        var M = e.toLowerCase();
        D[M] = e;
        y[M] = function(N, O) {
            N[e] = !!O
        };
        v[M] = function(N) {
            return !!N[e]
        }
    });
    Object.append(y, {
        "class": function(e, M) {
            ("className" in e) ? e.className = (M || ""): e.setAttribute("class", M)
        },
        "for": function(e, M) {
            ("htmlFor" in e) ? e.htmlFor = M: e.setAttribute("for", M)
        },
        style: function(e, M) {
            (e.style) ? e.style.cssText = M: e.setAttribute("style", M)
        },
        value: function(e, M) {
            e.value = (M != null) ? M : ""
        }
    });
    v["class"] = function(e) {
        return ("className" in e) ? e.className || null : e.getAttribute("class")
    };
    var H = document.createElement("button");
    try {
        H.type = "button"
    } catch (J) {}
    if (H.type != "button") {
        y.type = function(e, M) {
            e.setAttribute("type", M)
        }
    }
    H = null;
    var m = (function() {
        var O = document.createElement("style"),
            M = false;
        try {
            O.innerHTML = "#justTesing{margin: 0px;}";
            M = !!O.innerHTML
        } catch (N) {}
        return M
    })();
    var b = document.createElement("input"),
        k, j;
    b.value = "t";
    b.type = "submit";
    k = b.value != "t";
    try {
        b.value = "";
        b.type = "email";
        j = b.type == "email"
    } catch (J) {}
    b = null;
    if (k || !j) {
        y.type = function(N, M) {
            try {
                var O = N.value;
                N.type = M;
                N.value = O
            } catch (P) {}
        }
    }
    var d = (function(e) {
        e.random = "attribute";
        return (e.getAttribute("random") == "attribute")
    })(document.createElement("div"));
    var E = (function(e) {
        e.innerHTML = '<object><param name="should_fix" value="the unknown" /></object>';
        return e.cloneNode(true).firstChild.childNodes.length != 1
    })(document.createElement("div"));
    var B = !!document.createElement("div").classList;
    var g = function(e) {
        var M = (e || "").clean().split(" "),
            N = {};
        return M.filter(function(O) {
            if (O !== "" && !N[O]) {
                return N[O] = O
            }
        })
    };
    var F = function(e) {
        this.classList.add(e)
    };
    var t = function(e) {
        this.classList.remove(e)
    };
    Element.implement({
        setProperty: function(M, N) {
            var O = y[M.toLowerCase()];
            if (O) {
                O(this, N)
            } else {
                var e;
                if (d) {
                    e = this.retrieve("$attributeWhiteList", {})
                }
                if (N == null) {
                    this.removeAttribute(M);
                    if (d) {
                        delete e[M]
                    }
                } else {
                    this.setAttribute(M, "" + N);
                    if (d) {
                        e[M] = true
                    }
                }
            }
            return this
        },
        setProperties: function(e) {
            for (var M in e) {
                this.setProperty(M, e[M])
            }
            return this
        },
        getProperty: function(P) {
            var N = v[P.toLowerCase()];
            if (N) {
                return N(this)
            }
            if (d) {
                var M = this.getAttributeNode(P),
                    O = this.retrieve("$attributeWhiteList", {});
                if (!M) {
                    return null
                }
                if (M.expando && !O[P]) {
                    var Q = this.outerHTML;
                    if (Q.substr(0, Q.search(/\/?['"]?>(?![^<]*<['"])/)).indexOf(P) < 0) {
                        return null
                    }
                    O[P] = true
                }
            }
            var e = Slick.getAttribute(this, P);
            return (!e && !Slick.hasAttribute(this, P)) ? null : e
        },
        getProperties: function() {
            var e = Array.convert(arguments);
            return e.map(this.getProperty, this).associate(e)
        },
        removeProperty: function(e) {
            return this.setProperty(e, null)
        },
        removeProperties: function() {
            Array.each(arguments, this.removeProperty, this);
            return this
        },
        set: function(N, M) {
            var e = Element.Properties[N];
            (e && e.set) ? e.set.call(this, M): this.setProperty(N, M)
        }.overloadSetter(),
        get: function(M) {
            var e = Element.Properties[M];
            return (e && e.get) ? e.get.apply(this) : this.getProperty(M)
        }.overloadGetter(),
        erase: function(M) {
            var e = Element.Properties[M];
            (e && e.erase) ? e.erase.apply(this): this.removeProperty(M);
            return this
        },
        hasClass: B ? function(e) {
            return this.classList.contains(e)
        } : function(e) {
            return g(this.className).contains(e)
        },
        addClass: B ? function(e) {
            g(e).forEach(F, this);
            return this
        } : function(e) {
            this.className = g(e + " " + this.className).join(" ");
            return this
        },
        removeClass: B ? function(e) {
            g(e).forEach(t, this);
            return this
        } : function(e) {
            var M = g(this.className);
            g(e).forEach(M.erase, M);
            this.className = M.join(" ");
            return this
        },
        toggleClass: function(e, M) {
            if (M == null) {
                M = !this.hasClass(e)
            }
            return (M) ? this.addClass(e) : this.removeClass(e)
        },
        adopt: function() {
            var O = this,
                e, Q = Array.flatten(arguments),
                P = Q.length;
            if (P > 1) {
                O = e = document.createDocumentFragment()
            }
            for (var N = 0; N < P; N++) {
                var M = document.id(Q[N], true);
                if (M) {
                    O.appendChild(M)
                }
            }
            if (e) {
                this.appendChild(e)
            }
            return this
        },
        appendText: function(M, e) {
            return this.grab(this.getDocument().newTextNode(M), e)
        },
        grab: function(M, e) {
            c[e || "bottom"](document.id(M, true), this);
            return this
        },
        inject: function(M, e) {
            c[e || "bottom"](this, document.id(M, true));
            return this
        },
        replaces: function(e) {
            e = document.id(e, true);
            e.parentNode.replaceChild(this, e);
            return this
        },
        wraps: function(M, e) {
            M = document.id(M, true);
            return this.replaces(M).grab(M, e)
        },
        getSelected: function() {
            this.selectedIndex;
            return new Elements(Array.convert(this.options).filter(function(e) {
                return e.selected
            }))
        },
        toQueryString: function() {
            var e = [];
            this.getElements("input, select, textarea").each(function(N) {
                var M = N.type;
                if (!N.name || N.disabled || M == "submit" || M == "reset" || M == "file" || M == "image") {
                    return
                }
                var O = (N.get("tag") == "select") ? N.getSelected().map(function(P) {
                    return document.id(P).get("value")
                }) : ((M == "radio" || M == "checkbox") && !N.checked) ? null : N.get("value");
                Array.convert(O).each(function(P) {
                    if (typeof P != "undefined") {
                        e.push(encodeURIComponent(N.name) + "=" + encodeURIComponent(P))
                    }
                })
            });
            return e.join("&")
        }
    });
    var i = {
        before: "beforeBegin",
        after: "afterEnd",
        bottom: "beforeEnd",
        top: "afterBegin",
        inside: "beforeEnd"
    };
    Element.implement("appendHTML", ("insertAdjacentHTML" in document.createElement("div")) ? function(M, e) {
        this.insertAdjacentHTML(i[e || "bottom"], M);
        return this
    } : function(R, O) {
        var M = new Element("div", {
                html: R
            }),
            Q = M.childNodes,
            N = M.firstChild;
        if (!N) {
            return this
        }
        if (Q.length > 1) {
            N = document.createDocumentFragment();
            for (var P = 0, e = Q.length; P < e; P++) {
                N.appendChild(Q[P])
            }
        }
        c[O || "bottom"](N, this);
        return this
    });
    var r = {},
        A = {};
    var G = function(e) {
        return (A[e] || (A[e] = {}))
    };
    var C = function(M) {
        var e = M.uniqueNumber;
        if (M.removeEvents) {
            M.removeEvents()
        }
        if (M.clearAttributes) {
            M.clearAttributes()
        }
        if (e != null) {
            delete r[e];
            delete A[e]
        }
        return M
    };
    var L = {
        input: "checked",
        option: "selected",
        textarea: "value"
    };
    Element.implement({
        destroy: function() {
            var e = C(this).getElementsByTagName("*");
            Array.each(e, C);
            Element.dispose(this);
            return null
        },
        empty: function() {
            Array.convert(this.childNodes).each(Element.dispose);
            return this
        },
        dispose: function() {
            return (this.parentNode) ? this.parentNode.removeChild(this) : this
        },
        clone: function(Q, O) {
            Q = Q !== false;
            var V = this.cloneNode(Q),
                N = [V],
                P = [this],
                T;
            if (Q) {
                N.append(Array.convert(V.getElementsByTagName("*")));
                P.append(Array.convert(this.getElementsByTagName("*")))
            }
            for (T = N.length; T--;) {
                var R = N[T],
                    U = P[T];
                if (!O) {
                    R.removeAttribute("id")
                }
                if (R.clearAttributes) {
                    R.clearAttributes();
                    R.mergeAttributes(U);
                    R.removeAttribute("uniqueNumber");
                    if (R.options) {
                        var Y = R.options,
                            e = U.options;
                        for (var S = Y.length; S--;) {
                            Y[S].selected = e[S].selected
                        }
                    }
                }
                var M = L[U.tagName.toLowerCase()];
                if (M && U[M]) {
                    R[M] = U[M]
                }
            }
            if (E) {
                var W = V.getElementsByTagName("object"),
                    X = this.getElementsByTagName("object");
                for (T = W.length; T--;) {
                    W[T].outerHTML = X[T].outerHTML
                }
            }
            return document.id(V)
        }
    });
    [Element, Window, Document].invoke("implement", {
        addListener: function(M, e) {
            if (window.attachEvent && !window.addEventListener) {
                r[Slick.uidOf(this)] = this
            }
            if (this.addEventListener) {
                this.addEventListener(M, e, !!arguments[2])
            } else {
                this.attachEvent("on" + M, e)
            }
            return this
        },
        removeListener: function(M, e) {
            if (this.removeEventListener) {
                this.removeEventListener(M, e, !!arguments[2])
            } else {
                this.detachEvent("on" + M, e)
            }
            return this
        },
        retrieve: function(M, e) {
            var O = G(Slick.uidOf(this)),
                N = O[M];
            if (e != null && N == null) {
                N = O[M] = e
            }
            return N != null ? N : null
        },
        store: function(M, e) {
            var N = G(Slick.uidOf(this));
            N[M] = e;
            return this
        },
        eliminate: function(e) {
            var M = G(Slick.uidOf(this));
            delete M[e];
            return this
        }
    });
    if (window.attachEvent && !window.addEventListener) {
        var p = function() {
            Object.each(r, C);
            if (window.CollectGarbage) {
                CollectGarbage()
            }
            window.removeListener("unload", p)
        };
        window.addListener("unload", p)
    }
    Element.Properties = {};
    Element.Properties.style = {
        set: function(e) {
            this.style.cssText = e
        },
        get: function() {
            return this.style.cssText
        },
        erase: function() {
            this.style.cssText = ""
        }
    };
    Element.Properties.tag = {
        get: function() {
            return this.tagName.toLowerCase()
        }
    };
    Element.Properties.html = {
        set: function(e) {
            if (e == null) {
                e = ""
            } else {
                if (typeOf(e) == "array") {
                    e = e.join("")
                }
            }
            if (this.styleSheet && !m) {
                this.styleSheet.cssText = e
            } else {
                this.innerHTML = e
            }
        },
        erase: function() {
            this.set("html", "")
        }
    };
    var h = true,
        o = true,
        q = true;
    var I = document.createElement("div");
    var f;
    I.innerHTML = "<nav></nav>";
    h = (I.childNodes.length == 1);
    if (!h) {
        var x = "abbr article aside audio canvas datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video".split(" ");
        f = document.createDocumentFragment(), l = x.length;
        while (l--) {
            f.createElement(x[l])
        }
    }
    I = null;
    o = Function.attempt(function() {
        var e = document.createElement("table");
        e.innerHTML = "<tr><td></td></tr>";
        return true
    });
    var K = document.createElement("tr"),
        w = "<td></td>";
    K.innerHTML = w;
    q = (K.innerHTML == w);
    K = null;
    if (!o || !q || !h) {
        Element.Properties.html.set = (function(M) {
            var e = {
                table: [1, "<table>", "</table>"],
                select: [1, "<select>", "</select>"],
                tbody: [2, "<table><tbody>", "</tbody></table>"],
                tr: [3, "<table><tbody><tr>", "</tr></tbody></table>"]
            };
            e.thead = e.tfoot = e.tbody;
            return function(N) {
                if (this.styleSheet) {
                    return M.call(this, N)
                }
                var O = e[this.get("tag")];
                if (!O && !h) {
                    O = [0, "", ""]
                }
                if (!O) {
                    return M.call(this, N)
                }
                var R = O[0],
                    Q = document.createElement("div"),
                    P = Q;
                if (!h) {
                    f.appendChild(Q)
                }
                Q.innerHTML = [O[1], N, O[2]].flatten().join("");
                while (R--) {
                    P = P.firstChild
                }
                this.empty().adopt(P.childNodes);
                if (!h) {
                    f.removeChild(Q)
                }
                Q = null
            }
        })(Element.Properties.html.set)
    }
    var u = document.createElement("form");
    u.innerHTML = "<select><option>s</option></select>";
    if (u.firstChild.value != "s") {
        Element.Properties.value = {
            set: function(Q) {
                var M = this.get("tag");
                if (M != "select") {
                    return this.setProperty("value", Q)
                }
                var N = this.getElements("option");
                Q = String(Q);
                for (var O = 0; O < N.length; O++) {
                    var P = N[O],
                        e = P.getAttributeNode("value"),
                        R = (e && e.specified) ? P.value : P.get("text");
                    if (R === Q) {
                        return P.selected = true
                    }
                }
            },
            get: function() {
                var N = this,
                    M = N.get("tag");
                if (M != "select" && M != "option") {
                    return this.getProperty("value")
                }
                if (M == "select" && !(N = N.getSelected()[0])) {
                    return ""
                }
                var e = N.getAttributeNode("value");
                return (e && e.specified) ? N.value : N.get("text")
            }
        }
    }
    u = null;
    if (document.createElement("div").getAttributeNode("id")) {
        Element.Properties.id = {
            set: function(e) {
                this.id = this.getAttributeNode("id").value = e
            },
            get: function() {
                return this.id || null
            },
            erase: function() {
                this.id = this.getAttributeNode("id").value = ""
            }
        }
    }
})();
(function() {
    var c = {};
    var b = function(e) {
        var f;
        if (e.wheelDelta) {
            f = e.wheelDelta % 120 == 0 ? e.wheelDelta / 120 : e.wheelDelta / 12
        } else {
            var d = e.deltaY || e.detail || 0;
            f = -(d % 3 == 0 ? d / 3 : d * 10)
        }
        return f
    };
    var a = this.DOMEvent = new Type("DOMEvent", function(d, i) {
        if (!i) {
            i = window
        }
        d = d || i.event;
        if (d.$extended) {
            return d
        }
        this.event = d;
        this.$extended = true;
        this.shift = d.shiftKey;
        this.control = d.ctrlKey;
        this.alt = d.altKey;
        this.meta = d.metaKey;
        var k = this.type = d.type;
        var j = d.target || d.srcElement;
        while (j && j.nodeType == 3) {
            j = j.parentNode
        }
        this.target = document.id(j);
        if (k.indexOf("key") == 0) {
            var f = this.code = (d.which || d.keyCode);
            if (!this.shift || k != "keypress") {
                this.key = c[f]
            }
            if (k == "keydown" || k == "keyup") {
                if (f > 111 && f < 124) {
                    this.key = "f" + (f - 111)
                } else {
                    if (f > 95 && f < 106) {
                        this.key = f - 96
                    }
                }
            }
            if (this.key == null) {
                this.key = String.fromCharCode(f).toLowerCase()
            }
        } else {
            if (k == "click" || k == "dblclick" || k == "contextmenu" || k == "wheel" || k == "DOMMouseScroll" || k.indexOf("mouse") == 0) {
                var m = i.document;
                m = (!m.compatMode || m.compatMode == "CSS1Compat") ? m.html : m.body;
                this.page = {
                    x: (d.pageX != null) ? d.pageX : d.clientX + m.scrollLeft,
                    y: (d.pageY != null) ? d.pageY : d.clientY + m.scrollTop
                };
                this.client = {
                    x: (d.pageX != null) ? d.pageX - i.pageXOffset : d.clientX,
                    y: (d.pageY != null) ? d.pageY - i.pageYOffset : d.clientY
                };
                if (k == "DOMMouseScroll" || k == "wheel" || k == "mousewheel") {
                    this.wheel = b(d)
                }
                this.rightClick = (d.which == 3 || d.button == 2);
                if (k == "mouseover" || k == "mouseout" || k == "mouseenter" || k == "mouseleave") {
                    var e = k == "mouseover" || k == "mouseenter";
                    var n = d.relatedTarget || d[(e ? "from" : "to") + "Element"];
                    while (n && n.nodeType == 3) {
                        n = n.parentNode
                    }
                    this.relatedTarget = document.id(n)
                }
            } else {
                if (k.indexOf("touch") == 0 || k.indexOf("gesture") == 0) {
                    this.rotation = d.rotation;
                    this.scale = d.scale;
                    this.targetTouches = d.targetTouches;
                    this.changedTouches = d.changedTouches;
                    var h = this.touches = d.touches;
                    if (h && h[0]) {
                        var g = h[0];
                        this.page = {
                            x: g.pageX,
                            y: g.pageY
                        };
                        this.client = {
                            x: g.clientX,
                            y: g.clientY
                        }
                    }
                }
            }
        }
        if (!this.client) {
            this.client = {}
        }
        if (!this.page) {
            this.page = {}
        }
    });
    a.implement({
        stop: function() {
            return this.preventDefault().stopPropagation()
        },
        stopPropagation: function() {
            if (this.event.stopPropagation) {
                this.event.stopPropagation()
            } else {
                this.event.cancelBubble = true
            }
            return this
        },
        preventDefault: function() {
            if (this.event.preventDefault) {
                this.event.preventDefault()
            } else {
                this.event.returnValue = false
            }
            return this
        }
    });
    a.defineKey = function(e, d) {
        c[e] = d;
        return this
    };
    a.defineKeys = a.defineKey.overloadSetter(true);
    a.defineKeys({
        "38": "up",
        "40": "down",
        "37": "left",
        "39": "right",
        "27": "esc",
        "32": "space",
        "8": "backspace",
        "9": "tab",
        "46": "delete",
        "13": "enter"
    })
})();
(function() {
    Element.Properties.events = {
        set: function(b) {
            this.addEvents(b)
        }
    };
    [Element, Window, Document].invoke("implement", {
        addEvent: function(f, h) {
            var i = this.retrieve("events", {});
            if (!i[f]) {
                i[f] = {
                    keys: [],
                    values: []
                }
            }
            if (i[f].keys.contains(h)) {
                return this
            }
            i[f].keys.push(h);
            var g = f,
                b = Element.Events[f],
                d = h,
                j = this;
            if (b) {
                if (b.onAdd) {
                    b.onAdd.call(this, h, f)
                }
                if (b.condition) {
                    d = function(k) {
                        if (b.condition.call(this, k, f)) {
                            return h.call(this, k)
                        }
                        return true
                    }
                }
                if (b.base) {
                    g = Function.convert(b.base).call(this, f)
                }
            }
            var e = function() {
                return h.call(j)
            };
            var c = Element.NativeEvents[g];
            if (c) {
                if (c == 2) {
                    e = function(k) {
                        k = new DOMEvent(k, j.getWindow());
                        if (d.call(j, k) === false) {
                            k.stop()
                        }
                    }
                }
                this.addListener(g, e, arguments[2])
            }
            i[f].values.push(e);
            return this
        },
        removeEvent: function(e, d) {
            var c = this.retrieve("events");
            if (!c || !c[e]) {
                return this
            }
            var h = c[e];
            var b = h.keys.indexOf(d);
            if (b == -1) {
                return this
            }
            var g = h.values[b];
            delete h.keys[b];
            delete h.values[b];
            var f = Element.Events[e];
            if (f) {
                if (f.onRemove) {
                    f.onRemove.call(this, d, e)
                }
                if (f.base) {
                    e = Function.convert(f.base).call(this, e)
                }
            }
            return (Element.NativeEvents[e]) ? this.removeListener(e, g, arguments[2]) : this
        },
        addEvents: function(b) {
            for (var c in b) {
                this.addEvent(c, b[c])
            }
            return this
        },
        removeEvents: function(b) {
            var d;
            if (typeOf(b) == "object") {
                for (d in b) {
                    this.removeEvent(d, b[d])
                }
                return this
            }
            var c = this.retrieve("events");
            if (!c) {
                return this
            }
            if (!b) {
                for (d in c) {
                    this.removeEvents(d)
                }
                this.eliminate("events")
            } else {
                if (c[b]) {
                    c[b].keys.each(function(e) {
                        this.removeEvent(b, e)
                    }, this);
                    delete c[b]
                }
            }
            return this
        },
        fireEvent: function(e, c, b) {
            var d = this.retrieve("events");
            if (!d || !d[e]) {
                return this
            }
            c = Array.convert(c);
            d[e].keys.each(function(f) {
                if (b) {
                    f.delay(b, this, c)
                } else {
                    f.apply(this, c)
                }
            }, this);
            return this
        },
        cloneEvents: function(e, d) {
            e = document.id(e);
            var c = e.retrieve("events");
            if (!c) {
                return this
            }
            if (!d) {
                for (var b in c) {
                    this.cloneEvents(e, b)
                }
            } else {
                if (c[d]) {
                    c[d].keys.each(function(f) {
                        this.addEvent(d, f)
                    }, this)
                }
            }
            return this
        }
    });
    Element.NativeEvents = {
        click: 2,
        dblclick: 2,
        mouseup: 2,
        mousedown: 2,
        contextmenu: 2,
        wheel: 2,
        mousewheel: 2,
        DOMMouseScroll: 2,
        mouseover: 2,
        mouseout: 2,
        mousemove: 2,
        selectstart: 2,
        selectend: 2,
        keydown: 2,
        keypress: 2,
        keyup: 2,
        orientationchange: 2,
        touchstart: 2,
        touchmove: 2,
        touchend: 2,
        touchcancel: 2,
        gesturestart: 2,
        gesturechange: 2,
        gestureend: 2,
        focus: 2,
        blur: 2,
        change: 2,
        reset: 2,
        select: 2,
        submit: 2,
        paste: 2,
        input: 2,
        load: 2,
        unload: 1,
        beforeunload: 2,
        resize: 1,
        move: 1,
        DOMContentLoaded: 1,
        readystatechange: 1,
        hashchange: 1,
        popstate: 2,
        pageshow: 2,
        pagehide: 2,
        error: 1,
        abort: 1,
        scroll: 1,
        message: 2
    };
    Element.Events = {
        mousewheel: {
            base: "onwheel" in document ? "wheel" : "onmousewheel" in document ? "mousewheel" : "DOMMouseScroll"
        }
    };
    var a = function(b) {
        var c = b.relatedTarget;
        if (c == null) {
            return true
        }
        if (!c) {
            return false
        }
        return (c != this && c.prefix != "xul" && typeOf(this) != "document" && !this.contains(c))
    };
    if ("onmouseenter" in document.documentElement) {
        Element.NativeEvents.mouseenter = Element.NativeEvents.mouseleave = 2;
        Element.MouseenterCheck = a
    } else {
        Element.Events.mouseenter = {
            base: "mouseover",
            condition: a
        };
        Element.Events.mouseleave = {
            base: "mouseout",
            condition: a
        }
    }
    if (!window.addEventListener) {
        Element.NativeEvents.propertychange = 2;
        Element.Events.change = {
            base: function() {
                var b = this.type;
                return (this.get("tag") == "input" && (b == "radio" || b == "checkbox")) ? "propertychange" : "change"
            },
            condition: function(b) {
                return b.type != "propertychange" || b.event.propertyName == "checked"
            }
        }
    }
})();
(function() {
    var c = !!window.addEventListener;
    Element.NativeEvents.focusin = Element.NativeEvents.focusout = 2;
    var k = function(m, n, o, p, q) {
        while (q && q != m) {
            if (n(q, p)) {
                return o.call(q, p, q)
            }
            q = document.id(q.parentNode)
        }
    };
    var a = {
        mouseenter: {
            base: "mouseover",
            condition: Element.MouseenterCheck
        },
        mouseleave: {
            base: "mouseout",
            condition: Element.MouseenterCheck
        },
        focus: {
            base: "focus" + (c ? "" : "in"),
            capture: true
        },
        blur: {
            base: c ? "blur" : "focusout",
            capture: true
        }
    };
    var b = "$delegation:";
    var i = function(m) {
        return {
            base: "focusin",
            remove: function(n, p) {
                var q = n.retrieve(b + m + "listeners", {})[p];
                if (q && q.forms) {
                    for (var o = q.forms.length; o--;) {
                        if (q.forms[o].removeEvent) {
                            q.forms[o].removeEvent(m, q.fns[o])
                        }
                    }
                }
            },
            listen: function(y, s, w, o, u, t) {
                var p = (u.get("tag") == "form") ? u : o.target.getParent("form");
                if (!p) {
                    return
                }
                var v = y.retrieve(b + m + "listeners", {}),
                    q = v[t] || {
                        forms: [],
                        fns: []
                    },
                    n = q.forms,
                    x = q.fns;
                if (n.indexOf(p) != -1) {
                    return
                }
                n.push(p);
                var r = function(z) {
                    k(y, s, w, z, u)
                };
                p.addEvent(m, r);
                x.push(r);
                v[t] = q;
                y.store(b + m + "listeners", v)
            }
        }
    };
    var d = function(m) {
        return {
            base: "focusin",
            listen: function(n, o, q, r, s) {
                var p = {
                    blur: function() {
                        this.removeEvents(p)
                    }
                };
                p[m] = function(t) {
                    k(n, o, q, t, s)
                };
                r.target.addEvents(p)
            }
        }
    };
    if (!c) {
        Object.append(a, {
            submit: i("submit"),
            reset: i("reset"),
            change: d("change"),
            select: d("select")
        })
    }
    var h = Element.prototype,
        f = h.addEvent,
        j = h.removeEvent;
    var e = function(m, n) {
        return function(s, r, o) {
            if (s.indexOf(":relay") == -1) {
                return m.call(this, s, r, o)
            }
            var p = Slick.parse(s).expressions[0][0];
            if (p.pseudos[0].key != "relay") {
                return m.call(this, s, r, o)
            }
            var q = p.tag;
            p.pseudos.slice(1).each(function(t) {
                q += ":" + t.key + (t.value ? "(" + t.value + ")" : "")
            });
            m.call(this, s, r);
            return n.call(this, q, p.pseudos[0].value, r)
        }
    };
    var g = {
        addEvent: function(w, r, y) {
            var u = this.retrieve("$delegates", {}),
                s = u[w];
            if (s) {
                for (var z in s) {
                    if (s[z].fn == y && s[z].match == r) {
                        return this
                    }
                }
            }
            var q = w,
                v = r,
                p = y,
                o = a[w] || {};
            w = o.base || q;
            r = function(C) {
                return Slick.match(C, v)
            };
            var x = Element.Events[q];
            if (o.condition || x && x.condition) {
                var m = r,
                    n = o.condition || x.condition;
                r = function(D, C) {
                    return m(D, C) && n.call(D, C, w)
                }
            }
            var A = this,
                t = String.uniqueID();
            var B = o.listen ? function(C, D) {
                if (!D && C && C.target) {
                    D = C.target
                }
                if (D) {
                    o.listen(A, r, y, C, D, t)
                }
            } : function(C, D) {
                if (!D && C && C.target) {
                    D = C.target
                }
                if (D) {
                    k(A, r, y, C, D)
                }
            };
            if (!s) {
                s = {}
            }
            s[t] = {
                match: v,
                fn: p,
                delegator: B
            };
            u[q] = s;
            return f.call(this, w, B, o.capture)
        },
        removeEvent: function(t, o, u, v) {
            var r = this.retrieve("$delegates", {}),
                q = r[t];
            if (!q) {
                return this
            }
            if (v) {
                var n = t,
                    x = q[v].delegator,
                    m = a[t] || {};
                t = m.base || n;
                if (m.remove) {
                    m.remove(this, v)
                }
                delete q[v];
                r[n] = q;
                return j.call(this, t, x, m.capture)
            }
            var p, w;
            if (u) {
                for (p in q) {
                    w = q[p];
                    if (w.match == o && w.fn == u) {
                        return g.removeEvent.call(this, t, o, u, p)
                    }
                }
            } else {
                for (p in q) {
                    w = q[p];
                    if (w.match == o) {
                        g.removeEvent.call(this, t, o, w.fn, p)
                    }
                }
            }
            return this
        }
    };
    [Element, Window, Document].invoke("implement", {
        addEvent: e(f, g.addEvent),
        removeEvent: e(j, g.removeEvent)
    })
})();
(function() {
    var i = document.html,
        a;
    a = document.createElement("div");
    a.style.color = "red";
    a.style.color = null;
    var p = a.style.color == "red";
    var n = "1px solid #123abc";
    a.style.border = n;
    var o = a.style.border != n;
    a = null;
    var d = !!window.getComputedStyle,
        j = document.createElement("div").style.borderRadius != null;
    Element.Properties.styles = {
        set: function(v) {
            this.setStyles(v)
        }
    };
    var e = (i.style.opacity != null),
        s = (i.style.filter != null),
        u = /alpha\(opacity=([\d.]+)\)/i;
    var k = function(w, v) {
        w.store("$opacity", v);
        w.style.visibility = v > 0 || v == null ? "visible" : "hidden"
    };
    var c = function(v, z, y) {
        var x = v.style,
            w = x.filter || v.getComputedStyle("filter") || "";
        x.filter = (z.test(w) ? w.replace(z, y) : w + " " + y).trim();
        if (!x.filter) {
            x.removeAttribute("filter")
        }
    };
    var r = (e ? function(w, v) {
        w.style.opacity = v
    } : (s ? function(w, v) {
        if (!w.currentStyle || !w.currentStyle.hasLayout) {
            w.style.zoom = 1
        }
        if (v == null || v == 1) {
            c(w, u, "");
            if (v == 1 && g(w) != 1) {
                c(w, u, "alpha(opacity=100)")
            }
        } else {
            c(w, u, "alpha(opacity=" + (v * 100).limit(0, 100).round() + ")")
        }
    } : k));
    var g = (e ? function(w) {
        var v = w.style.opacity || w.getComputedStyle("opacity");
        return (v == "") ? 1 : v.toFloat()
    } : (s ? function(w) {
        var x = (w.style.filter || w.getComputedStyle("filter")),
            v;
        if (x) {
            v = x.match(u)
        }
        return (v == null || x == null) ? 1 : (v[1] / 100)
    } : function(w) {
        var v = w.retrieve("$opacity");
        if (v == null) {
            v = (w.style.visibility == "hidden" ? 0 : 1)
        }
        return v
    }));
    var h = (i.style.cssFloat == null) ? "styleFloat" : "cssFloat",
        t = {
            left: "0%",
            top: "0%",
            center: "50%",
            right: "100%",
            bottom: "100%"
        },
        b = (i.style.backgroundPositionX != null),
        f = /^-(ms)-/;
    var m = function(v) {
        return v.replace(f, "$1-").camelCase()
    };
    var q = function(v, w) {
        if (w == "backgroundPosition") {
            v.removeAttribute(w + "X");
            w += "Y"
        }
        v.removeAttribute(w)
    };
    Element.implement({
        getComputedStyle: function(x) {
            if (!d && this.currentStyle) {
                return this.currentStyle[m(x)]
            }
            var w = Element.getDocument(this).defaultView,
                v = w ? w.getComputedStyle(this, null) : null;
            return (v) ? v.getPropertyValue((x == h) ? "float" : x.hyphenate()) : ""
        },
        setStyle: function(w, v) {
            if (w == "opacity") {
                if (v != null) {
                    v = parseFloat(v)
                }
                r(this, v);
                return this
            }
            w = m(w == "float" ? h : w);
            if (typeOf(v) != "string") {
                var x = (Element.Styles[w] || "@").split(" ");
                v = Array.convert(v).map(function(z, y) {
                    if (!x[y]) {
                        return ""
                    }
                    return (typeOf(z) == "number") ? x[y].replace("@", Math.round(z)) : z
                }).join(" ")
            } else {
                if (v == String(Number(v))) {
                    v = Math.round(v)
                }
            }
            this.style[w] = v;
            if ((v == "" || v == null) && p && this.style.removeAttribute) {
                q(this.style, w)
            }
            return this
        },
        getStyle: function(A) {
            if (A == "opacity") {
                return g(this)
            }
            A = m(A == "float" ? h : A);
            if (j && A.indexOf("borderRadius") != -1) {
                return ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomRightRadius", "borderBottomLeftRadius"].map(function(B) {
                    return this.style[B] || "0px"
                }, this).join(" ")
            }
            var v = this.style[A];
            if (!v || A == "zIndex") {
                if (Element.ShortStyles.hasOwnProperty(A)) {
                    v = [];
                    for (var z in Element.ShortStyles[A]) {
                        v.push(this.getStyle(z))
                    }
                    return v.join(" ")
                }
                v = this.getComputedStyle(A)
            }
            if (b && /^backgroundPosition[XY]?$/.test(A)) {
                return v.replace(/(top|right|bottom|left)/g, function(B) {
                    return t[B]
                }) || "0px"
            }
            if (!v && A == "backgroundPosition") {
                return "0px 0px"
            }
            if (v) {
                v = String(v);
                var x = v.match(/rgba?\([\d\s,]+\)/);
                if (x) {
                    v = v.replace(x[0], x[0].rgbToHex())
                }
            }
            if (!d && !this.style[A]) {
                if ((/^(height|width)$/).test(A) && !(/px$/.test(v))) {
                    var w = (A == "width") ? ["left", "right"] : ["top", "bottom"],
                        y = 0;
                    w.each(function(B) {
                        y += this.getStyle("border-" + B + "-width").toInt() + this.getStyle("padding-" + B).toInt()
                    }, this);
                    return this["offset" + A.capitalize()] - y + "px"
                }
                if ((/^border(.+)Width|margin|padding/).test(A) && isNaN(parseFloat(v))) {
                    return "0px"
                }
            }
            if (o && /^border(Top|Right|Bottom|Left)?$/.test(A) && /^#/.test(v)) {
                return v.replace(/^(.+)\s(.+)\s(.+)$/, "$2 $3 $1")
            }
            return v
        },
        setStyles: function(w) {
            for (var v in w) {
                this.setStyle(v, w[v])
            }
            return this
        },
        getStyles: function() {
            var v = {};
            Array.flatten(arguments).each(function(w) {
                v[w] = this.getStyle(w)
            }, this);
            return v
        }
    });
    Element.Styles = {
        left: "@px",
        top: "@px",
        bottom: "@px",
        right: "@px",
        width: "@px",
        height: "@px",
        maxWidth: "@px",
        maxHeight: "@px",
        minWidth: "@px",
        minHeight: "@px",
        backgroundColor: "rgb(@, @, @)",
        backgroundSize: "@px",
        backgroundPosition: "@px @px",
        color: "rgb(@, @, @)",
        fontSize: "@px",
        letterSpacing: "@px",
        lineHeight: "@px",
        clip: "rect(@px @px @px @px)",
        margin: "@px @px @px @px",
        padding: "@px @px @px @px",
        border: "@px @ rgb(@, @, @) @px @ rgb(@, @, @) @px @ rgb(@, @, @)",
        borderWidth: "@px @px @px @px",
        borderStyle: "@ @ @ @",
        borderColor: "rgb(@, @, @) rgb(@, @, @) rgb(@, @, @) rgb(@, @, @)",
        zIndex: "@",
        zoom: "@",
        fontWeight: "@",
        textIndent: "@px",
        opacity: "@",
        borderRadius: "@px @px @px @px"
    };
    Element.ShortStyles = {
        margin: {},
        padding: {},
        border: {},
        borderWidth: {},
        borderStyle: {},
        borderColor: {}
    };
    ["Top", "Right", "Bottom", "Left"].each(function(B) {
        var A = Element.ShortStyles;
        var w = Element.Styles;
        ["margin", "padding"].each(function(C) {
            var D = C + B;
            A[C][D] = w[D] = "@px"
        });
        var z = "border" + B;
        A.border[z] = w[z] = "@px @ rgb(@, @, @)";
        var y = z + "Width",
            v = z + "Style",
            x = z + "Color";
        A[z] = {};
        A.borderWidth[y] = A[z][y] = w[y] = "@px";
        A.borderStyle[v] = A[z][v] = w[v] = "@";
        A.borderColor[x] = A[z][x] = w[x] = "rgb(@, @, @)"
    });
    if (b) {
        Element.ShortStyles.backgroundPosition = {
            backgroundPositionX: "@",
            backgroundPositionY: "@"
        }
    }
})();
(function() {
    var j = document.createElement("div"),
        e = document.createElement("div");
    j.style.height = "0";
    j.appendChild(e);
    var d = (e.offsetParent === j);
    j = e = null;
    var m = ["height", "paddingTop", "paddingBottom", "borderTopWidth", "borderBottomWidth"],
        h = ["width", "paddingLeft", "paddingRight", "borderLeftWidth", "borderRightWidth"];
    var g = function(r) {
        var q = window.getComputedStyle(r),
            s = {
                x: 0,
                y: 0
            };
        m.each(function(t) {
            s.y += parseFloat(q[t])
        });
        h.each(function(t) {
            s.x += parseFloat(q[t])
        });
        return s
    };
    var p = function(q) {
        return o(q, "position") != "static" || a(q)
    };
    var k = function(q) {
        return p(q) || (/^(?:table|td|th)$/i).test(q.tagName)
    };
    Element.implement({
        scrollTo: function(q, r) {
            if (a(this)) {
                this.getWindow().scrollTo(q, r)
            } else {
                this.scrollLeft = q;
                this.scrollTop = r
            }
            return this
        },
        getSize: function() {
            if (a(this)) {
                return this.getWindow().getSize()
            }
            if (!window.getComputedStyle) {
                return {
                    x: this.offsetWidth,
                    y: this.offsetHeight
                }
            }
            if (this.get("tag") == "svg") {
                return g(this)
            }
            try {
                var q = this.getBoundingClientRect();
                return {
                    x: q.width,
                    y: q.height
                }
            } catch (r) {
                return {
                    x: 0,
                    y: 0
                }
            }
        },
        getScrollSize: function() {
            if (a(this)) {
                return this.getWindow().getScrollSize()
            }
            return {
                x: this.scrollWidth,
                y: this.scrollHeight
            }
        },
        getScroll: function() {
            if (a(this)) {
                return this.getWindow().getScroll()
            }
            return {
                x: this.scrollLeft,
                y: this.scrollTop
            }
        },
        getScrolls: function() {
            var r = this.parentNode,
                q = {
                    x: 0,
                    y: 0
                };
            while (r && !a(r)) {
                q.x += r.scrollLeft;
                q.y += r.scrollTop;
                r = r.parentNode
            }
            return q
        },
        getOffsetParent: d ? function() {
            var q = this;
            if (a(q) || o(q, "position") == "fixed") {
                return null
            }
            var r = (o(q, "position") == "static") ? k : p;
            while ((q = q.parentNode)) {
                if (r(q)) {
                    return q
                }
            }
            return null
        } : function() {
            var q = this;
            if (a(q) || o(q, "position") == "fixed") {
                return null
            }
            try {
                return q.offsetParent
            } catch (r) {}
            return null
        },
        getOffsets: function() {
            var x = this.getBoundingClientRect;
            x = x && !Browser.Platform.ios;
            if (x) {
                var r = this.getBoundingClientRect(),
                    u = document.id(this.getDocument().documentElement),
                    y = u.getScroll(),
                    s = this.getScrolls(),
                    q = (o(this, "position") == "fixed");
                return {
                    x: r.left.toFloat() + s.x + ((q) ? 0 : y.x) - u.clientLeft,
                    y: r.top.toFloat() + s.y + ((q) ? 0 : y.y) - u.clientTop
                }
            }
            var t = this,
                v = {
                    x: 0,
                    y: 0
                };
            if (a(this)) {
                return v
            }
            while (t && !a(t)) {
                v.x += t.offsetLeft;
                v.y += t.offsetTop;
                if (Browser.firefox) {
                    if (!c(t)) {
                        v.x += b(t);
                        v.y += i(t)
                    }
                    var w = t.parentNode;
                    if (w && o(w, "overflow") != "visible") {
                        v.x += b(w);
                        v.y += i(w)
                    }
                } else {
                    if (t != this && Browser.safari) {
                        v.x += b(t);
                        v.y += i(t)
                    }
                }
                t = t.offsetParent
            }
            if (Browser.firefox && !c(this)) {
                v.x -= b(this);
                v.y -= i(this)
            }
            return v
        },
        getPosition: function(t) {
            var u = this.getOffsets(),
                r = this.getScrolls();
            var q = {
                x: u.x - r.x,
                y: u.y - r.y
            };
            if (t && (t = document.id(t))) {
                var s = t.getPosition();
                return {
                    x: q.x - s.x - b(t),
                    y: q.y - s.y - i(t)
                }
            }
            return q
        },
        getCoordinates: function(s) {
            if (a(this)) {
                return this.getWindow().getCoordinates()
            }
            var q = this.getPosition(s),
                r = this.getSize();
            var t = {
                left: q.x,
                top: q.y,
                width: r.x,
                height: r.y
            };
            t.right = t.left + t.width;
            t.bottom = t.top + t.height;
            return t
        },
        computePosition: function(q) {
            return {
                left: q.x - n(this, "margin-left"),
                top: q.y - n(this, "margin-top")
            }
        },
        setPosition: function(q) {
            return this.setStyles(this.computePosition(q))
        }
    });
    [Document, Window].invoke("implement", {
        getSize: function() {
            var q = f(this);
            return {
                x: q.clientWidth,
                y: q.clientHeight
            }
        },
        getScroll: function() {
            var r = this.getWindow(),
                q = f(this);
            return {
                x: r.pageXOffset || q.scrollLeft,
                y: r.pageYOffset || q.scrollTop
            }
        },
        getScrollSize: function() {
            var s = f(this),
                r = this.getSize(),
                q = this.getDocument().body;
            return {
                x: Math.max(s.scrollWidth, q.scrollWidth, r.x),
                y: Math.max(s.scrollHeight, q.scrollHeight, r.y)
            }
        },
        getPosition: function() {
            return {
                x: 0,
                y: 0
            }
        },
        getCoordinates: function() {
            var q = this.getSize();
            return {
                top: 0,
                left: 0,
                bottom: q.y,
                right: q.x,
                height: q.y,
                width: q.x
            }
        }
    });
    var o = Element.getComputedStyle;

    function n(q, r) {
        return o(q, r).toInt() || 0
    }

    function c(q) {
        return o(q, "-moz-box-sizing") == "border-box"
    }

    function i(q) {
        return n(q, "border-top-width")
    }

    function b(q) {
        return n(q, "border-left-width")
    }

    function a(q) {
        return (/^(?:body|html)$/i).test(q.tagName)
    }

    function f(q) {
        var r = q.getDocument();
        return (!r.compatMode || r.compatMode == "CSS1Compat") ? r.html : r.body
    }
})();
Element.alias({
    position: "setPosition"
});
[Window, Document, Element].invoke("implement", {
    getHeight: function() {
        return this.getSize().y
    },
    getWidth: function() {
        return this.getSize().x
    },
    getScrollTop: function() {
        return this.getScroll().y
    },
    getScrollLeft: function() {
        return this.getScroll().x
    },
    getScrollHeight: function() {
        return this.getScrollSize().y
    },
    getScrollWidth: function() {
        return this.getScrollSize().x
    },
    getTop: function() {
        return this.getPosition().y
    },
    getLeft: function() {
        return this.getPosition().x
    }
});
(function() {
    var f = this.Fx = new Class({
        Implements: [Chain, Events, Options, Class.Thenable],
        options: {
            fps: 60,
            unit: false,
            duration: 500,
            frames: null,
            frameSkip: true,
            link: "ignore"
        },
        initialize: function(g) {
            this.subject = this.subject || this;
            this.setOptions(g)
        },
        getTransition: function() {
            return function(g) {
                return -(Math.cos(Math.PI * g) - 1) / 2
            }
        },
        step: function(g) {
            if (this.options.frameSkip) {
                var h = (this.time != null) ? (g - this.time) : 0,
                    i = h / this.frameInterval;
                this.time = g;
                this.frame += i
            } else {
                this.frame++
            }
            if (this.frame < this.frames) {
                var j = this.transition(this.frame / this.frames);
                this.set(this.compute(this.from, this.to, j))
            } else {
                this.frame = this.frames;
                this.set(this.compute(this.from, this.to, 1));
                this.stop()
            }
        },
        set: function(g) {
            return g
        },
        compute: function(i, h, g) {
            return f.compute(i, h, g)
        },
        check: function() {
            if (!this.isRunning()) {
                return true
            }
            switch (this.options.link) {
                case "cancel":
                    this.cancel();
                    return true;
                case "chain":
                    this.chain(this.caller.pass(arguments, this));
                    return false
            }
            return false
        },
        start: function(k, j) {
            if (!this.check(k, j)) {
                return this
            }
            this.from = k;
            this.to = j;
            this.frame = (this.options.frameSkip) ? 0 : -1;
            this.time = null;
            this.transition = this.getTransition();
            var i = this.options.frames,
                h = this.options.fps,
                g = this.options.duration;
            this.duration = f.Durations[g] || g.toInt();
            this.frameInterval = 1000 / h;
            this.frames = i || Math.round(this.duration / this.frameInterval);
            if (this.getThenableState() !== "pending") {
                this.resetThenable(this.subject)
            }
            this.fireEvent("start", this.subject);
            b.call(this, h);
            return this
        },
        stop: function() {
            if (this.isRunning()) {
                this.time = null;
                d.call(this, this.options.fps);
                if (this.frames == this.frame) {
                    this.fireEvent("complete", this.subject);
                    if (!this.callChain()) {
                        this.fireEvent("chainComplete", this.subject)
                    }
                } else {
                    this.fireEvent("stop", this.subject)
                }
                this.resolve(this.subject === this ? null : this.subject)
            }
            return this
        },
        cancel: function() {
            if (this.isRunning()) {
                this.time = null;
                d.call(this, this.options.fps);
                this.frame = this.frames;
                this.fireEvent("cancel", this.subject).clearChain();
                this.reject(this.subject)
            }
            return this
        },
        pause: function() {
            if (this.isRunning()) {
                this.time = null;
                d.call(this, this.options.fps)
            }
            return this
        },
        resume: function() {
            if (this.isPaused()) {
                b.call(this, this.options.fps)
            }
            return this
        },
        isRunning: function() {
            var g = e[this.options.fps];
            return g && g.contains(this)
        },
        isPaused: function() {
            return (this.frame < this.frames) && !this.isRunning()
        }
    });
    f.compute = function(i, h, g) {
        return (h - i) * g + i
    };
    f.Durations = {
        "short": 250,
        normal: 500,
        "long": 1000
    };
    var e = {},
        c = {};
    var a = function() {
        var h = Date.now();
        for (var j = this.length; j--;) {
            var g = this[j];
            if (g) {
                g.step(h)
            }
        }
    };
    var b = function(h) {
        var g = e[h] || (e[h] = []);
        g.push(this);
        if (!c[h]) {
            c[h] = a.periodical(Math.round(1000 / h), g)
        }
    };
    var d = function(h) {
        var g = e[h];
        if (g) {
            g.erase(this);
            if (!g.length && c[h]) {
                delete e[h];
                c[h] = clearInterval(c[h])
            }
        }
    }
})();
Fx.CSS = new Class({
    Extends: Fx,
    prepare: function(b, e, a) {
        a = Array.convert(a);
        var h = a[0],
            g = a[1];
        if (g == null) {
            g = h;
            h = b.getStyle(e);
            var c = this.options.unit;
            if (c && h && typeof h == "string" && h.slice(-c.length) != c && parseFloat(h) != 0) {
                b.setStyle(e, g + c);
                var d = b.getComputedStyle(e);
                if (!(/px$/.test(d))) {
                    d = b.style[("pixel-" + e).camelCase()];
                    if (d == null) {
                        var f = b.style.left;
                        b.style.left = g + c;
                        d = b.style.pixelLeft;
                        b.style.left = f
                    }
                }
                h = (g || 1) / (parseFloat(d) || 1) * (parseFloat(h) || 0);
                b.setStyle(e, h + c)
            }
        }
        return {
            from: this.parse(h),
            to: this.parse(g)
        }
    },
    parse: function(a) {
        a = Function.convert(a)();
        a = (typeof a == "string") ? a.split(" ") : Array.convert(a);
        return a.map(function(c) {
            c = String(c);
            var b = false;
            Object.each(Fx.CSS.Parsers, function(e) {
                if (b) {
                    return
                }
                var d = e.parse(c);
                if (d || d === 0) {
                    b = {
                        value: d,
                        parser: e
                    }
                }
            });
            b = b || {
                value: c,
                parser: Fx.CSS.Parsers.String
            };
            return b
        })
    },
    compute: function(d, c, b) {
        var a = [];
        (Math.min(d.length, c.length)).times(function(e) {
            a.push({
                value: d[e].parser.compute(d[e].value, c[e].value, b),
                parser: d[e].parser
            })
        });
        a.$family = Function.convert("fx:css:value");
        return a
    },
    serve: function(c, b) {
        if (typeOf(c) != "fx:css:value") {
            c = this.parse(c)
        }
        var a = [];
        c.each(function(d) {
            a = a.concat(d.parser.serve(d.value, b))
        });
        return a
    },
    render: function(a, d, c, b) {
        a.setStyle(d, this.serve(c, b))
    },
    search: function(a) {
        if (Fx.CSS.Cache[a]) {
            return Fx.CSS.Cache[a]
        }
        var d = {},
            c = new RegExp("^" + a.escapeRegExp() + "$");
        var b = function(e) {
            Array.each(e, function(g) {
                if (g.media) {
                    b(g.rules || g.cssRules);
                    return
                }
                if (!g.style) {
                    return
                }
                var f = (g.selectorText) ? g.selectorText.replace(/^\w+/, function(h) {
                    return h.toLowerCase()
                }) : null;
                if (!f || !c.test(f)) {
                    return
                }
                Object.each(Element.Styles, function(i, h) {
                    if (!g.style[h] || Element.ShortStyles[h]) {
                        return
                    }
                    i = String(g.style[h]);
                    d[h] = ((/^rgb/).test(i)) ? i.rgbToHex() : i
                })
            })
        };
        Array.each(document.styleSheets, function(f) {
            var e = f.href;
            if (e && e.indexOf("://") > -1 && e.indexOf(document.domain) == -1) {
                return
            }
            var g = f.rules || f.cssRules;
            b(g)
        });
        return Fx.CSS.Cache[a] = d
    }
});
Fx.CSS.Cache = {};
Fx.CSS.Parsers = {
    Color: {
        parse: function(a) {
            if (a.match(/^#[0-9a-f]{3,6}$/i)) {
                return a.hexToRgb(true)
            }
            return ((a = a.match(/(\d+),\s*(\d+),\s*(\d+)/))) ? [a[1], a[2], a[3]] : false
        },
        compute: function(c, b, a) {
            return c.map(function(e, d) {
                return Math.round(Fx.compute(c[d], b[d], a))
            })
        },
        serve: function(a) {
            return a.map(Number)
        }
    },
    Number: {
        parse: parseFloat,
        compute: Fx.compute,
        serve: function(b, a) {
            return (a) ? b + a : b
        }
    },
    String: {
        parse: Function.convert(false),
        compute: function(b, a) {
            return a
        },
        serve: function(a) {
            return a
        }
    }
};
Fx.Morph = new Class({
    Extends: Fx.CSS,
    initialize: function(b, a) {
        this.element = this.subject = document.id(b);
        this.parent(a)
    },
    set: function(a) {
        if (typeof a == "string") {
            a = this.search(a)
        }
        for (var b in a) {
            this.render(this.element, b, a[b], this.options.unit)
        }
        return this
    },
    compute: function(e, d, c) {
        var a = {};
        for (var b in e) {
            a[b] = this.parent(e[b], d[b], c)
        }
        return a
    },
    start: function(b) {
        if (!this.check(b)) {
            return this
        }
        if (typeof b == "string") {
            b = this.search(b)
        }
        var e = {},
            d = {};
        for (var c in b) {
            var a = this.prepare(this.element, c, b[c]);
            e[c] = a.from;
            d[c] = a.to
        }
        return this.parent(e, d)
    }
});
Element.Properties.morph = {
    set: function(a) {
        this.get("morph").cancel().setOptions(a);
        return this
    },
    get: function() {
        var a = this.retrieve("morph");
        if (!a) {
            a = new Fx.Morph(this, {
                link: "cancel"
            });
            this.store("morph", a)
        }
        return a
    }
};
Element.implement({
    morph: function(a) {
        this.get("morph").start(a);
        return this
    }
});
Fx.implement({
    getTransition: function() {
        var a = this.options.transition || Fx.Transitions.Sine.easeInOut;
        if (typeof a == "string") {
            var b = a.split(":");
            a = Fx.Transitions;
            a = a[b[0]] || a[b[0].capitalize()];
            if (b[1]) {
                a = a["ease" + b[1].capitalize() + (b[2] ? b[2].capitalize() : "")]
            }
        }
        return a
    }
});
Fx.Transition = function(c, b) {
    b = Array.convert(b);
    var a = function(d) {
        return c(d, b)
    };
    return Object.append(a, {
        easeIn: a,
        easeOut: function(d) {
            return 1 - c(1 - d, b)
        },
        easeInOut: function(d) {
            return (d <= 0.5 ? c(2 * d, b) : (2 - c(2 * (1 - d), b))) / 2
        }
    })
};
Fx.Transitions = {
    linear: function(a) {
        return a
    }
};
Fx.Transitions.extend = function(a) {
    for (var b in a) {
        Fx.Transitions[b] = new Fx.Transition(a[b])
    }
};
Fx.Transitions.extend({
    Pow: function(b, a) {
        return Math.pow(b, a && a[0] || 6)
    },
    Expo: function(a) {
        return Math.pow(2, 8 * (a - 1))
    },
    Circ: function(a) {
        return 1 - Math.sin(Math.acos(a))
    },
    Sine: function(a) {
        return 1 - Math.cos(a * Math.PI / 2)
    },
    Back: function(b, a) {
        a = a && a[0] || 1.618;
        return Math.pow(b, 2) * ((a + 1) * b - a)
    },
    Bounce: function(f) {
        var e;
        for (var d = 0, c = 1; 1; d += c, c /= 2) {
            if (f >= (7 - 4 * d) / 11) {
                e = c * c - Math.pow((11 - 6 * d - 11 * f) / 4, 2);
                break
            }
        }
        return e
    },
    Elastic: function(b, a) {
        return Math.pow(2, 10 * --b) * Math.cos(20 * b * Math.PI * (a && a[0] || 1) / 3)
    }
});
["Quad", "Cubic", "Quart", "Quint"].each(function(b, a) {
    Fx.Transitions[b] = new Fx.Transition(function(c) {
        return Math.pow(c, a + 2)
    })
});
Fx.Tween = new Class({
    Extends: Fx.CSS,
    initialize: function(b, a) {
        this.element = this.subject = document.id(b);
        this.parent(a)
    },
    set: function(b, a) {
        if (arguments.length == 1) {
            a = b;
            b = this.property || this.options.property
        }
        this.render(this.element, b, a, this.options.unit);
        return this
    },
    start: function(c, e, d) {
        if (!this.check(c, e, d)) {
            return this
        }
        var b = Array.flatten(arguments);
        this.property = this.options.property || b.shift();
        var a = this.prepare(this.element, this.property, b);
        return this.parent(a.from, a.to)
    }
});
Element.Properties.tween = {
    set: function(a) {
        this.get("tween").cancel().setOptions(a);
        return this
    },
    get: function() {
        var a = this.retrieve("tween");
        if (!a) {
            a = new Fx.Tween(this, {
                link: "cancel"
            });
            this.store("tween", a)
        }
        return a
    }
};
Element.implement({
    tween: function(a, c, b) {
        this.get("tween").start(a, c, b);
        return this
    },
    fade: function() {
        var d = this.get("tween"),
            f, c = ["opacity"].append(arguments),
            a;
        if (c[1] == null) {
            c[1] = "toggle"
        }
        switch (c[1]) {
            case "in":
                f = "start";
                c[1] = 1;
                break;
            case "out":
                f = "start";
                c[1] = 0;
                break;
            case "show":
                f = "set";
                c[1] = 1;
                break;
            case "hide":
                f = "set";
                c[1] = 0;
                break;
            case "toggle":
                var b = this.retrieve("fade:flag", this.getStyle("opacity") == 1);
                f = "start";
                c[1] = b ? 0 : 1;
                this.store("fade:flag", !b);
                a = true;
                break;
            default:
                f = "start"
        }
        if (!a) {
            this.eliminate("fade:flag")
        }
        d[f].apply(d, c);
        var e = c[c.length - 1];
        if (f == "set") {
            this.setStyle("visibility", e == 0 ? "hidden" : "visible")
        } else {
            if (e != 0) {
                if (d.$chain.length) {
                    d.chain(function() {
                        this.element.setStyle("visibility", "visible");
                        this.callChain()
                    })
                } else {
                    this.setStyle("visibility", "visible")
                }
            } else {
                d.chain(function() {
                    if (this.element.getStyle("opacity")) {
                        return
                    }
                    this.element.setStyle("visibility", "hidden");
                    this.callChain()
                })
            }
        }
        return this
    },
    highlight: function(c, a) {
        if (!a) {
            a = this.retrieve("highlight:original", this.getStyle("background-color"));
            a = (a == "transparent") ? "#fff" : a
        }
        var b = this.get("tween");
        b.start("background-color", c || "#ffff88", a).chain(function() {
            this.setStyle("background-color", this.retrieve("highlight:original"));
            b.callChain()
        }.bind(this));
        return this
    }
});
(function() {
    var d = function() {},
        a = ("onprogress" in new Browser.Request);
    var c = this.Request = new Class({
        Implements: [Chain, Events, Options, Class.Thenable],
        options: {
            url: "",
            data: "",
            headers: {
                "X-Requested-With": "XMLHttpRequest",
                Accept: "text/javascript, text/html, application/xml, text/xml, */*"
            },
            async: true,
            format: false,
            method: "post",
            link: "ignore",
            isSuccess: null,
            emulation: true,
            urlEncoded: true,
            encoding: "utf-8",
            evalScripts: false,
            evalResponse: false,
            timeout: 0,
            noCache: false
        },
        initialize: function(e) {
            this.xhr = new Browser.Request();
            this.setOptions(e);
            this.headers = this.options.headers
        },
        onStateChange: function() {
            var e = this.xhr;
            if (e.readyState != 4 || !this.running) {
                return
            }
            this.running = false;
            this.status = 0;
            Function.attempt(function() {
                var f = e.status;
                this.status = (f == 1223) ? 204 : f
            }.bind(this));
            e.onreadystatechange = d;
            if (a) {
                e.onprogress = e.onloadstart = d
            }
            if (this.timer) {
                clearTimeout(this.timer);
                delete this.timer
            }
            this.response = {
                text: this.xhr.responseText || "",
                xml: this.xhr.responseXML
            };
            if (this.options.isSuccess.call(this, this.status)) {
                this.success(this.response.text, this.response.xml)
            } else {
                this.failure()
            }
        },
        isSuccess: function() {
            var e = this.status;
            return (e >= 200 && e < 300)
        },
        isRunning: function() {
            return !!this.running
        },
        processScripts: function(e) {
            if (this.options.evalResponse || (/(ecma|java)script/).test(this.getHeader("Content-type"))) {
                return Browser.exec(e)
            }
            return e.stripScripts(this.options.evalScripts)
        },
        success: function(f, e) {
            this.onSuccess(this.processScripts(f), e);
            this.resolve({
                text: f,
                xml: e
            })
        },
        onSuccess: function() {
            this.fireEvent("complete", arguments).fireEvent("success", arguments).callChain()
        },
        failure: function() {
            this.onFailure();
            this.reject({
                reason: "failure",
                xhr: this.xhr
            })
        },
        onFailure: function() {
            this.fireEvent("complete").fireEvent("failure", this.xhr)
        },
        loadstart: function(e) {
            this.fireEvent("loadstart", [e, this.xhr])
        },
        progress: function(e) {
            this.fireEvent("progress", [e, this.xhr])
        },
        timeout: function() {
            this.fireEvent("timeout", this.xhr);
            this.reject({
                reason: "timeout",
                xhr: this.xhr
            })
        },
        setHeader: function(e, f) {
            this.headers[e] = f;
            return this
        },
        getHeader: function(e) {
            return Function.attempt(function() {
                return this.xhr.getResponseHeader(e)
            }.bind(this))
        },
        check: function() {
            if (!this.running) {
                return true
            }
            switch (this.options.link) {
                case "cancel":
                    this.cancel();
                    return true;
                case "chain":
                    this.chain(this.caller.pass(arguments, this));
                    return false
            }
            return false
        },
        send: function(p) {
            if (!this.check(p)) {
                return this
            }
            this.options.isSuccess = this.options.isSuccess || this.isSuccess;
            this.running = true;
            var m = typeOf(p);
            if (m == "string" || m == "element") {
                p = {
                    data: p
                }
            }
            var h = this.options;
            p = Object.append({
                data: h.data,
                url: h.url,
                method: h.method
            }, p);
            var j = p.data,
                f = String(p.url),
                e = p.method.toLowerCase();
            switch (typeOf(j)) {
                case "element":
                    j = document.id(j).toQueryString();
                    break;
                case "object":
                case "hash":
                    j = Object.toQueryString(j)
            }
            if (this.options.format) {
                var n = "format=" + this.options.format;
                j = (j) ? n + "&" + j : n
            }
            if (this.options.emulation && !["get", "post"].contains(e)) {
                var k = "_method=" + e;
                j = (j) ? k + "&" + j : k;
                e = "post"
            }
            if (this.options.urlEncoded && ["post", "put"].contains(e)) {
                var g = (this.options.encoding) ? "; charset=" + this.options.encoding : "";
                this.headers["Content-type"] = "application/x-www-form-urlencoded" + g
            }
            if (!f) {
                f = document.location.pathname
            }
            var i = f.lastIndexOf("/");
            if (i > -1 && (i = f.indexOf("#")) > -1) {
                f = f.substr(0, i)
            }
            if (this.options.noCache) {
                f += (f.indexOf("?") > -1 ? "&" : "?") + String.uniqueID()
            }
            if (j && (e == "get" || e == "delete")) {
                f += (f.indexOf("?") > -1 ? "&" : "?") + j;
                j = null
            }
            var o = this.xhr;
            if (a) {
                o.onloadstart = this.loadstart.bind(this);
                o.onprogress = this.progress.bind(this)
            }
            o.open(e.toUpperCase(), f, this.options.async, this.options.user, this.options.password);
            if ((this.options.user || this.options.withCredentials) && "withCredentials" in o) {
                o.withCredentials = true
            }
            o.onreadystatechange = this.onStateChange.bind(this);
            Object.each(this.headers, function(r, q) {
                try {
                    o.setRequestHeader(q, r)
                } catch (s) {
                    this.fireEvent("exception", [q, r]);
                    this.reject({
                        reason: "exception",
                        xhr: o,
                        exception: s
                    })
                }
            }, this);
            if (this.getThenableState() !== "pending") {
                this.resetThenable({
                    reason: "send"
                })
            }
            this.fireEvent("request");
            o.send(j);
            if (!this.options.async) {
                this.onStateChange()
            } else {
                if (this.options.timeout) {
                    this.timer = this.timeout.delay(this.options.timeout, this)
                }
            }
            return this
        },
        cancel: function() {
            if (!this.running) {
                return this
            }
            this.running = false;
            var e = this.xhr;
            e.abort();
            if (this.timer) {
                clearTimeout(this.timer);
                delete this.timer
            }
            e.onreadystatechange = d;
            if (a) {
                e.onprogress = e.onloadstart = d
            }
            this.xhr = new Browser.Request();
            this.fireEvent("cancel");
            this.reject({
                reason: "cancel",
                xhr: e
            });
            return this
        }
    });
    var b = {};
    ["get", "post", "put", "delete", "patch", "head", "GET", "POST", "PUT", "DELETE", "PATCH", "HEAD"].each(function(e) {
        b[e] = function(g) {
            var f = {
                method: e
            };
            if (g != null) {
                f.data = g
            }
            return this.send(f)
        }
    });
    c.implement(b);
    Element.Properties.send = {
        set: function(e) {
            var f = this.get("send").cancel();
            f.setOptions(e);
            return this
        },
        get: function() {
            var e = this.retrieve("send");
            if (!e) {
                e = new c({
                    data: this,
                    link: "cancel",
                    method: this.get("method") || "post",
                    url: this.get("action")
                });
                this.store("send", e)
            }
            return e
        }
    };
    Element.implement({
        send: function(e) {
            var f = this.get("send");
            f.send({
                data: this,
                url: e || f.options.url
            });
            return this
        }
    })
})();
Request.HTML = new Class({
    Extends: Request,
    options: {
        update: false,
        append: false,
        evalScripts: true,
        filter: false,
        headers: {
            Accept: "text/html, application/xml, text/xml, */*"
        }
    },
    success: function(f) {
        var e = this.options,
            c = this.response;
        c.html = f.stripScripts(function(h) {
            c.javascript = h
        });
        var d = c.html.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
        if (d) {
            c.html = d[1]
        }
        var b = new Element("div").set("html", c.html);
        c.tree = b.childNodes;
        c.elements = b.getElements(e.filter || "*");
        if (e.filter) {
            c.tree = c.elements
        }
        if (e.update) {
            var g = document.id(e.update).empty();
            if (e.filter) {
                g.adopt(c.elements)
            } else {
                g.set("html", c.html)
            }
        } else {
            if (e.append) {
                var a = document.id(e.append);
                if (e.filter) {
                    c.elements.reverse().inject(a)
                } else {
                    a.adopt(b.getChildren())
                }
            }
        }
        if (e.evalScripts) {
            Browser.exec(c.javascript)
        }
        this.onSuccess(c.tree, c.elements, c.html, c.javascript);
        this.resolve({
            tree: c.tree,
            elements: c.elements,
            html: c.html,
            javascript: c.javascript
        })
    }
});
Element.Properties.load = {
    set: function(a) {
        var b = this.get("load").cancel();
        b.setOptions(a);
        return this
    },
    get: function() {
        var a = this.retrieve("load");
        if (!a) {
            a = new Request.HTML({
                data: this,
                link: "cancel",
                update: this,
                method: "get"
            });
            this.store("load", a)
        }
        return a
    }
};
Element.implement({
    load: function() {
        this.get("load").send(Array.link(arguments, {
            data: Type.isObject,
            url: Type.isString
        }));
        return this
    }
});
if (typeof JSON == "undefined") {
    this.JSON = {}
}(function() {
    var special = {
        "\b": "\\b",
        "\t": "\\t",
        "\n": "\\n",
        "\f": "\\f",
        "\r": "\\r",
        '"': '\\"',
        "\\": "\\\\"
    };
    var escape = function(chr) {
        return special[chr] || "\\u" + ("0000" + chr.charCodeAt(0).toString(16)).slice(-4)
    };
    JSON.validate = function(string) {
        string = string.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, "@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, "]").replace(/(?:^|:|,)(?:\s*\[)+/g, "");
        return (/^[\],:{}\s]*$/).test(string)
    };
    JSON.encode = JSON.stringify ? function(obj) {
        return JSON.stringify(obj)
    } : function(obj) {
        if (obj && obj.toJSON) {
            obj = obj.toJSON()
        }
        switch (typeOf(obj)) {
            case "string":
                return '"' + obj.replace(/[\x00-\x1f\\"]/g, escape) + '"';
            case "array":
                return "[" + obj.map(JSON.encode).clean() + "]";
            case "object":
            case "hash":
                var string = [];
                Object.each(obj, function(value, key) {
                    var json = JSON.encode(value);
                    if (json) {
                        string.push(JSON.encode(key) + ":" + json)
                    }
                });
                return "{" + string + "}";
            case "number":
            case "boolean":
                return "" + obj;
            case "null":
                return "null"
        }
        return null
    };
    JSON.secure = true;
    JSON.secure = false;
    JSON.decode = function(string, secure) {
        if (!string || typeOf(string) != "string") {
            return null
        }
        if (secure == null) {
            secure = JSON.secure
        }
        if (secure) {
            if (JSON.parse) {
                return JSON.parse(string)
            }
            if (!JSON.validate(string)) {
                throw new Error("JSON could not decode the input; security is enabled and the value is not secure.")
            }
        }
        return eval("(" + string + ")")
    }
})();
Request.JSON = new Class({
    Extends: Request,
    options: {
        secure: true
    },
    initialize: function(a) {
        this.parent(a);
        Object.append(this.headers, {
            Accept: "application/json",
            "X-Request": "JSON"
        })
    },
    success: function(c) {
        var b;
        try {
            b = this.response.json = JSON.decode(c, this.options.secure)
        } catch (a) {
            this.fireEvent("error", [c, a]);
            return
        }
        if (b == null) {
            this.failure()
        } else {
            this.onSuccess(b, c);
            this.resolve({
                json: b,
                text: c
            })
        }
    }
});
var Cookie = new Class({
    Implements: Options,
    options: {
        path: "/",
        domain: false,
        duration: false,
        secure: false,
        document: document,
        encode: true,
        httpOnly: false
    },
    initialize: function(b, a) {
        this.key = b;
        this.setOptions(a)
    },
    write: function(b) {
        if (this.options.encode) {
            b = encodeURIComponent(b)
        }
        if (this.options.domain) {
            b += "; domain=" + this.options.domain
        }
        if (this.options.path) {
            b += "; path=" + this.options.path
        }
        if (this.options.duration) {
            var a = new Date();
            a.setTime(a.getTime() + this.options.duration * 24 * 60 * 60 * 1000);
            b += "; expires=" + a.toGMTString()
        }
        if (this.options.secure) {
            b += "; secure"
        }
        if (this.options.httpOnly) {
            b += "; HttpOnly"
        }
        this.options.document.cookie = this.key + "=" + b;
        return this
    },
    read: function() {
        var a = this.options.document.cookie.match("(?:^|;)\\s*" + this.key.escapeRegExp() + "=([^;]*)");
        return (a) ? decodeURIComponent(a[1]) : null
    },
    dispose: function() {
        new Cookie(this.key, Object.merge({}, this.options, {
            duration: -1
        })).write("");
        return this
    }
});
Cookie.write = function(b, c, a) {
    return new Cookie(b, a).write(c)
};
Cookie.read = function(a) {
    return new Cookie(a).read()
};
Cookie.dispose = function(b, a) {
    return new Cookie(b, a).dispose()
};
(function(i, k) {
    var m, f, e = [],
        c, b, d = k.createElement("div");
    var g = function() {
        clearTimeout(b);
        if (!m) {
            Browser.loaded = m = true;
            k.removeListener("DOMContentLoaded", g).removeListener("readystatechange", a);
            k.fireEvent("domready");
            i.fireEvent("domready")
        }
        k = i = d = null
    };
    var a = function() {
        for (var n = e.length; n--;) {
            if (e[n]()) {
                g();
                return true
            }
        }
        return false
    };
    var j = function() {
        clearTimeout(b);
        if (!a()) {
            b = setTimeout(j, 10)
        }
    };
    k.addListener("DOMContentLoaded", g);
    var h = function() {
        try {
            d.doScroll();
            return true
        } catch (n) {}
        return false
    };
    if (d.doScroll && !h()) {
        e.push(h);
        c = true
    }
    if (k.readyState) {
        e.push(function() {
            var n = k.readyState;
            return (n == "loaded" || n == "complete")
        })
    }
    if ("onreadystatechange" in k) {
        k.addListener("readystatechange", a)
    } else {
        c = true
    }
    if (c) {
        j()
    }
    Element.Events.domready = {
        onAdd: function(n) {
            if (m) {
                n.call(this)
            }
        }
    };
    Element.Events.load = {
        base: "load",
        onAdd: function(n) {
            if (f && this == i) {
                n.call(this)
            }
        },
        condition: function() {
            if (this == i) {
                g();
                delete Element.Events.load
            }
            return true
        }
    };
    i.addEvent("load", function() {
        f = true
    })
})(window, document);
MooTools.More = {
    version: "1.6.0",
    build: "45b71db70f879781a7e0b0d3fb3bb1307c2521eb"
};
(function() {
    var a = {
        wait: function(b) {
            return this.chain(function() {
                this.callChain.delay(b == null ? 500 : b, this);
                return this
            }.bind(this))
        }
    };
    Chain.implement(a);
    if (this.Fx) {
        Fx.implement(a)
    }
    if (this.Element && Element.implement && this.Fx) {
        Element.implement({
            chains: function(b) {
                Array.convert(b || ["tween", "morph", "reveal"]).each(function(c) {
                    c = this.get(c);
                    if (!c) {
                        return
                    }
                    c.setOptions({
                        link: "chain"
                    })
                }, this);
                return this
            },
            pauseFx: function(c, b) {
                this.chains(b).get(b || "tween").wait(c);
                return this
            }
        })
    }
})();
Class.Mutators.Binds = function(a) {
    if (!this.prototype.initialize) {
        this.implement("initialize", function() {})
    }
    return Array.convert(a).concat(this.prototype.Binds || [])
};
Class.Mutators.initialize = function(a) {
    return function() {
        Array.convert(this.Binds).each(function(b) {
            var c = this[b];
            if (c) {
                this[b] = c.bind(this)
            }
        }, this);
        return a.apply(this, arguments)
    }
};
Class.refactor = function(b, a) {
    Object.each(a, function(e, d) {
        var c = b.prototype[d];
        c = (c && c.$origin) || c || function() {};
        b.implement(d, (typeof e == "function") ? function() {
            var f = this.previous;
            this.previous = c;
            var g = e.apply(this, arguments);
            this.previous = f;
            return g
        } : e)
    });
    return b
};
(function() {
    Events.Pseudos = function(h, e, f) {
        var d = "_monitorEvents:";
        var c = function(i) {
            return {
                store: i.store ? function(j, k) {
                    i.store(d + j, k)
                } : function(j, k) {
                    (i._monitorEvents || (i._monitorEvents = {}))[j] = k
                },
                retrieve: i.retrieve ? function(j, k) {
                    return i.retrieve(d + j, k)
                } : function(j, k) {
                    if (!i._monitorEvents) {
                        return k
                    }
                    return i._monitorEvents[j] || k
                }
            }
        };
        var g = function(k) {
            if (k.indexOf(":") == -1 || !h) {
                return null
            }
            var j = Slick.parse(k).expressions[0][0],
                p = j.pseudos,
                i = p.length,
                o = [];
            while (i--) {
                var n = p[i].key,
                    m = h[n];
                if (m != null) {
                    o.push({
                        event: j.tag,
                        value: p[i].value,
                        pseudo: n,
                        original: k,
                        listener: m
                    })
                }
            }
            return o.length ? o : null
        };
        return {
            addEvent: function(m, p, j) {
                var n = g(m);
                if (!n) {
                    return e.call(this, m, p, j)
                }
                var k = c(this),
                    r = k.retrieve(m, []),
                    i = n[0].event,
                    l = Array.slice(arguments, 2),
                    o = p,
                    q = this;
                n.each(function(s) {
                    var t = s.listener,
                        u = o;
                    if (t == false) {
                        i += ":" + s.pseudo + "(" + s.value + ")"
                    } else {
                        o = function() {
                            t.call(q, s, u, arguments, o)
                        }
                    }
                });
                r.include({
                    type: i,
                    event: p,
                    monitor: o
                });
                k.store(m, r);
                if (m != i) {
                    e.apply(this, [m, p].concat(l))
                }
                return e.apply(this, [i, o].concat(l))
            },
            removeEvent: function(m, l) {
                var k = g(m);
                if (!k) {
                    return f.call(this, m, l)
                }
                var n = c(this),
                    j = n.retrieve(m);
                if (!j) {
                    return this
                }
                var i = Array.slice(arguments, 2);
                f.apply(this, [m, l].concat(i));
                j.each(function(o, p) {
                    if (!l || o.event == l) {
                        f.apply(this, [o.type, o.monitor].concat(i))
                    }
                    delete j[p]
                }, this);
                n.store(m, j);
                return this
            }
        }
    };
    var b = {
        once: function(e, f, d, c) {
            f.apply(this, d);
            this.removeEvent(e.event, c).removeEvent(e.original, f)
        },
        throttle: function(d, e, c) {
            if (!e._throttled) {
                e.apply(this, c);
                e._throttled = setTimeout(function() {
                    e._throttled = false
                }, d.value || 250)
            }
        },
        pause: function(d, e, c) {
            clearTimeout(e._pause);
            e._pause = e.delay(d.value || 250, this, c)
        }
    };
    Events.definePseudo = function(c, d) {
        b[c] = d;
        return this
    };
    Events.lookupPseudo = function(c) {
        return b[c]
    };
    var a = Events.prototype;
    Events.implement(Events.Pseudos(b, a.addEvent, a.removeEvent));
    ["Request", "Fx"].each(function(c) {
        if (this[c]) {
            this[c].implement(Events.prototype)
        }
    })
})();
(function() {
    var a = this.Drag = new Class({
        Implements: [Events, Options],
        options: {
            snap: 6,
            unit: "px",
            grid: false,
            style: true,
            limit: false,
            handle: false,
            invert: false,
            unDraggableTags: ["button", "input", "a", "textarea", "select", "option"],
            preventDefault: false,
            stopPropagation: false,
            compensateScroll: false,
            modifiers: {
                x: "left",
                y: "top"
            }
        },
        initialize: function() {
            var c = Array.link(arguments, {
                options: Type.isObject,
                element: function(d) {
                    return d != null
                }
            });
            this.element = document.id(c.element);
            this.document = this.element.getDocument();
            this.setOptions(c.options || {});
            var b = typeOf(this.options.handle);
            this.handles = ((b == "array" || b == "collection") ? $$(this.options.handle) : document.id(this.options.handle)) || this.element;
            this.mouse = {
                now: {},
                pos: {}
            };
            this.value = {
                start: {},
                now: {}
            };
            this.offsetParent = (function(e) {
                var f = e.getOffsetParent();
                var d = !f || (/^(?:body|html)$/i).test(f.tagName);
                return d ? window : document.id(f)
            })(this.element);
            this.selection = "selectstart" in document ? "selectstart" : "mousedown";
            this.compensateScroll = {
                start: {},
                diff: {},
                last: {}
            };
            if ("ondragstart" in document && !("FileReader" in window) && !a.ondragstartFixed) {
                document.ondragstart = Function.convert(false);
                a.ondragstartFixed = true
            }
            this.bound = {
                start: this.start.bind(this),
                check: this.check.bind(this),
                drag: this.drag.bind(this),
                stop: this.stop.bind(this),
                cancel: this.cancel.bind(this),
                eventStop: Function.convert(false),
                scrollListener: this.scrollListener.bind(this)
            };
            this.attach()
        },
        attach: function() {
            this.handles.addEvent("mousedown", this.bound.start);
            this.handles.addEvent("touchstart", this.bound.start);
            if (this.options.compensateScroll) {
                this.offsetParent.addEvent("scroll", this.bound.scrollListener)
            }
            return this
        },
        detach: function() {
            this.handles.removeEvent("mousedown", this.bound.start);
            this.handles.removeEvent("touchstart", this.bound.start);
            if (this.options.compensateScroll) {
                this.offsetParent.removeEvent("scroll", this.bound.scrollListener)
            }
            return this
        },
        scrollListener: function() {
            if (!this.mouse.start) {
                return
            }
            var b = this.offsetParent.getScroll();
            if (this.element.getStyle("position") == "absolute") {
                var c = this.sumValues(b, this.compensateScroll.last, -1);
                this.mouse.now = this.sumValues(this.mouse.now, c, 1)
            } else {
                this.compensateScroll.diff = this.sumValues(b, this.compensateScroll.start, -1)
            }
            if (this.offsetParent != window) {
                this.compensateScroll.diff = this.sumValues(this.compensateScroll.start, b, -1)
            }
            this.compensateScroll.last = b;
            this.render(this.options)
        },
        sumValues: function(e, d, g) {
            var c = {},
                b = this.options;
            for (var f in b.modifiers) {
                if (!b.modifiers[f]) {
                    continue
                }
                c[f] = e[f] + d[f] * g
            }
            return c
        },
        start: function(b) {
            if (this.options.unDraggableTags.contains(b.target.get("tag"))) {
                return
            }
            var l = this.options;
            if (b.rightClick) {
                return
            }
            if (l.preventDefault) {
                b.preventDefault()
            }
            if (l.stopPropagation) {
                b.stopPropagation()
            }
            this.compensateScroll.start = this.compensateScroll.last = this.offsetParent.getScroll();
            this.compensateScroll.diff = {
                x: 0,
                y: 0
            };
            this.mouse.start = b.page;
            this.fireEvent("beforeStart", this.element);
            var e = l.limit;
            this.limit = {
                x: [],
                y: []
            };
            var g, j, c = this.offsetParent == window ? null : this.offsetParent;
            for (g in l.modifiers) {
                if (!l.modifiers[g]) {
                    continue
                }
                var d = this.element.getStyle(l.modifiers[g]);
                if (d && !d.match(/px$/)) {
                    if (!j) {
                        j = this.element.getCoordinates(c)
                    }
                    d = j[l.modifiers[g]]
                }
                if (l.style) {
                    this.value.now[g] = (d || 0).toInt()
                } else {
                    this.value.now[g] = this.element[l.modifiers[g]]
                }
                if (l.invert) {
                    this.value.now[g] *= -1
                }
                this.mouse.pos[g] = b.page[g] - this.value.now[g];
                if (e && e[g]) {
                    var f = 2;
                    while (f--) {
                        var h = e[g][f];
                        if (h || h === 0) {
                            this.limit[g][f] = (typeof h == "function") ? h() : h
                        }
                    }
                }
            }
            if (typeOf(this.options.grid) == "number") {
                this.options.grid = {
                    x: this.options.grid,
                    y: this.options.grid
                }
            }
            var k = {
                mousemove: this.bound.check,
                mouseup: this.bound.cancel,
                touchmove: this.bound.check,
                touchend: this.bound.cancel
            };
            k[this.selection] = this.bound.eventStop;
            this.document.addEvents(k)
        },
        check: function(b) {
            if (this.options.preventDefault) {
                b.preventDefault()
            }
            var c = Math.round(Math.sqrt(Math.pow(b.page.x - this.mouse.start.x, 2) + Math.pow(b.page.y - this.mouse.start.y, 2)));
            if (c > this.options.snap) {
                this.cancel();
                this.document.addEvents({
                    mousemove: this.bound.drag,
                    mouseup: this.bound.stop,
                    touchmove: this.bound.drag,
                    touchend: this.bound.stop
                });
                this.fireEvent("start", [this.element, b]).fireEvent("snap", this.element)
            }
        },
        drag: function(c) {
            var b = this.options;
            if (b.preventDefault) {
                c.preventDefault()
            }
            this.mouse.now = this.sumValues(c.page, this.compensateScroll.diff, -1);
            this.render(b);
            this.fireEvent("drag", [this.element, c])
        },
        render: function(b) {
            for (var c in b.modifiers) {
                if (!b.modifiers[c]) {
                    continue
                }
                this.value.now[c] = this.mouse.now[c] - this.mouse.pos[c];
                if (b.invert) {
                    this.value.now[c] *= -1
                }
                if (b.limit && this.limit[c]) {
                    if ((this.limit[c][1] || this.limit[c][1] === 0) && (this.value.now[c] > this.limit[c][1])) {
                        this.value.now[c] = this.limit[c][1]
                    } else {
                        if ((this.limit[c][0] || this.limit[c][0] === 0) && (this.value.now[c] < this.limit[c][0])) {
                            this.value.now[c] = this.limit[c][0]
                        }
                    }
                }
                if (b.grid[c]) {
                    this.value.now[c] -= ((this.value.now[c] - (this.limit[c][0] || 0)) % b.grid[c])
                }
                if (b.style) {
                    this.element.setStyle(b.modifiers[c], this.value.now[c] + b.unit)
                } else {
                    this.element[b.modifiers[c]] = this.value.now[c]
                }
            }
        },
        cancel: function(b) {
            this.document.removeEvents({
                mousemove: this.bound.check,
                mouseup: this.bound.cancel,
                touchmove: this.bound.check,
                touchend: this.bound.cancel
            });
            if (b) {
                this.document.removeEvent(this.selection, this.bound.eventStop);
                this.fireEvent("cancel", this.element)
            }
        },
        stop: function(c) {
            var b = {
                mousemove: this.bound.drag,
                mouseup: this.bound.stop,
                touchmove: this.bound.drag,
                touchend: this.bound.stop
            };
            b[this.selection] = this.bound.eventStop;
            this.document.removeEvents(b);
            this.mouse.start = null;
            if (c) {
                this.fireEvent("complete", [this.element, c])
            }
        }
    })
})();
Element.implement({
    makeResizable: function(a) {
        var b = new Drag(this, Object.merge({
            modifiers: {
                x: "width",
                y: "height"
            }
        }, a));
        this.store("resizer", b);
        return b.addEvent("drag", function() {
            this.fireEvent("resize", b)
        }.bind(this))
    }
});
Drag.Move = new Class({
    Extends: Drag,
    options: {
        droppables: [],
        container: false,
        precalculate: false,
        includeMargins: true,
        checkDroppables: true
    },
    initialize: function(b, a) {
        this.parent(b, a);
        b = this.element;
        this.droppables = $$(this.options.droppables);
        this.setContainer(this.options.container);
        if (this.options.style) {
            if (this.options.modifiers.x == "left" && this.options.modifiers.y == "top") {
                var c = b.getOffsetParent(),
                    d = b.getStyles("left", "top");
                if (c && (d.left == "auto" || d.top == "auto")) {
                    b.setPosition(b.getPosition(c))
                }
            }
            if (b.getStyle("position") == "static") {
                b.setStyle("position", "absolute")
            }
        }
        this.addEvent("start", this.checkDroppables, true);
        this.overed = null
    },
    setContainer: function(a) {
        this.container = document.id(a);
        if (this.container && typeOf(this.container) != "element") {
            this.container = document.id(this.container.getDocument().body)
        }
    },
    start: function(a) {
        if (this.container) {
            this.options.limit = this.calculateLimit()
        }
        if (this.options.precalculate) {
            this.positions = this.droppables.map(function(b) {
                return b.getCoordinates()
            })
        }
        this.parent(a)
    },
    calculateLimit: function() {
        var k = this.element,
            f = this.container,
            e = document.id(k.getOffsetParent()) || document.body,
            i = f.getCoordinates(e),
            d = {},
            c = {},
            l = {},
            h = {},
            n = {},
            b = e.getScroll();
        ["top", "right", "bottom", "left"].each(function(r) {
            d[r] = k.getStyle("margin-" + r).toInt();
            c[r] = k.getStyle("border-" + r).toInt();
            l[r] = f.getStyle("margin-" + r).toInt();
            h[r] = f.getStyle("border-" + r).toInt();
            n[r] = e.getStyle("padding-" + r).toInt()
        }, this);
        var g = k.offsetWidth + d.left + d.right,
            q = k.offsetHeight + d.top + d.bottom,
            j = 0 + b.x,
            m = 0 + b.y,
            p = i.right - h.right - g + b.x,
            a = i.bottom - h.bottom - q + b.y;
        if (this.options.includeMargins) {
            j += d.left;
            m += d.top
        } else {
            p += d.right;
            a += d.bottom
        }
        if (k.getStyle("position") == "relative") {
            var o = k.getCoordinates(e);
            o.left -= k.getStyle("left").toInt();
            o.top -= k.getStyle("top").toInt();
            j -= o.left;
            m -= o.top;
            if (f.getStyle("position") != "relative") {
                j += h.left;
                m += h.top
            }
            p += d.left - o.left;
            a += d.top - o.top;
            if (f != e) {
                j += l.left + n.left;
                if (!n.left && j < 0) {
                    j = 0
                }
                m += e == document.body ? 0 : l.top + n.top;
                if (!n.top && m < 0) {
                    m = 0
                }
            }
        } else {
            j -= d.left;
            m -= d.top;
            if (f != e) {
                j += i.left + h.left;
                m += i.top + h.top
            }
        }
        return {
            x: [j, p],
            y: [m, a]
        }
    },
    getDroppableCoordinates: function(c) {
        var b = c.getCoordinates();
        if (c.getStyle("position") == "fixed") {
            var a = window.getScroll();
            b.left += a.x;
            b.right += a.x;
            b.top += a.y;
            b.bottom += a.y
        }
        return b
    },
    checkDroppables: function() {
        var a = this.droppables.filter(function(d, c) {
            d = this.positions ? this.positions[c] : this.getDroppableCoordinates(d);
            var b = this.mouse.now;
            return (b.x > d.left && b.x < d.right && b.y < d.bottom && b.y > d.top)
        }, this).getLast();
        if (this.overed != a) {
            if (this.overed) {
                this.fireEvent("leave", [this.element, this.overed])
            }
            if (a) {
                this.fireEvent("enter", [this.element, a])
            }
            this.overed = a
        }
    },
    drag: function(a) {
        this.parent(a);
        if (this.options.checkDroppables && this.droppables.length) {
            this.checkDroppables()
        }
    },
    stop: function(a) {
        this.checkDroppables();
        this.fireEvent("drop", [this.element, this.overed, a]);
        this.overed = null;
        return this.parent(a)
    }
});
Element.implement({
    makeDraggable: function(a) {
        var b = new Drag.Move(this, a);
        this.store("dragger", b);
        return b
    }
});
(function() {
    var b = function(e, d) {
        var f = [];
        Object.each(d, function(g) {
            Object.each(g, function(h) {
                e.each(function(i) {
                    f.push(i + "-" + h + (i == "border" ? "-width" : ""))
                })
            })
        });
        return f
    };
    var c = function(f, e) {
        var d = 0;
        Object.each(e, function(h, g) {
            if (g.test(f)) {
                d = d + h.toInt()
            }
        });
        return d
    };
    var a = function(d) {
        return !!(!d || d.offsetHeight || d.offsetWidth)
    };
    Element.implement({
        measure: function(h) {
            if (a(this)) {
                return h.call(this)
            }
            var g = this.getParent(),
                e = [];
            while (!a(g) && g != document.body) {
                e.push(g.expose());
                g = g.getParent()
            }
            var f = this.expose(),
                d = h.call(this);
            f();
            e.each(function(i) {
                i()
            });
            return d
        },
        expose: function() {
            if (this.getStyle("display") != "none") {
                return function() {}
            }
            var d = this.style.cssText;
            this.setStyles({
                display: "block",
                position: "absolute",
                visibility: "hidden"
            });
            return function() {
                this.style.cssText = d
            }.bind(this)
        },
        getDimensions: function(d) {
            d = Object.merge({
                computeSize: false
            }, d);
            var i = {
                x: 0,
                y: 0
            };
            var h = function(j, e) {
                return (e.computeSize) ? j.getComputedSize(e) : j.getSize()
            };
            var f = this.getParent("body");
            if (f && this.getStyle("display") == "none") {
                i = this.measure(function() {
                    return h(this, d)
                })
            } else {
                if (f) {
                    try {
                        i = h(this, d)
                    } catch (g) {}
                }
            }
            return Object.append(i, (i.x || i.x === 0) ? {
                width: i.x,
                height: i.y
            } : {
                x: i.width,
                y: i.height
            })
        },
        getComputedSize: function(d) {
            d = Object.merge({
                styles: ["padding", "border"],
                planes: {
                    height: ["top", "bottom"],
                    width: ["left", "right"]
                },
                mode: "both"
            }, d);
            var g = {},
                e = {
                    width: 0,
                    height: 0
                },
                f;
            if (d.mode == "vertical") {
                delete e.width;
                delete d.planes.width
            } else {
                if (d.mode == "horizontal") {
                    delete e.height;
                    delete d.planes.height
                }
            }
            b(d.styles, d.planes).each(function(h) {
                g[h] = this.getStyle(h).toInt()
            }, this);
            Object.each(d.planes, function(i, h) {
                var k = h.capitalize(),
                    j = this.getStyle(h);
                if (j == "auto" && !f) {
                    f = this.getDimensions()
                }
                j = g[h] = (j == "auto") ? f[h] : j.toInt();
                e["total" + k] = j;
                i.each(function(m) {
                    var l = c(m, g);
                    e["computed" + m.capitalize()] = l;
                    e["total" + k] += l
                })
            }, this);
            return Object.append(e, g)
        }
    })
})();
(function() {
    var a = this.Slider = new Class({
        Implements: [Events, Options],
        Binds: ["clickedElement", "draggedKnob", "scrolledElement"],
        options: {
            onTick: function(b) {
                this.setKnobPosition(b)
            },
            initialStep: 0,
            snap: false,
            offset: 0,
            range: false,
            wheel: false,
            steps: 100,
            mode: "horizontal"
        },
        initialize: function(g, b, f) {
            this.setOptions(f);
            f = this.options;
            this.element = document.id(g);
            b = this.knob = document.id(b);
            this.previousChange = this.previousEnd = this.step = f.initialStep ? f.initialStep : f.range ? f.range[0] : 0;
            var c = {},
                e = {
                    x: false,
                    y: false
                };
            switch (f.mode) {
                case "vertical":
                    this.axis = "y";
                    this.property = "top";
                    this.offset = "offsetHeight";
                    break;
                case "horizontal":
                    this.axis = "x";
                    this.property = "left";
                    this.offset = "offsetWidth"
            }
            this.setSliderDimensions();
            this.setRange(f.range, null, true);
            if (b.getStyle("position") == "static") {
                b.setStyle("position", "relative")
            }
            b.setStyle(this.property, -f.offset);
            e[this.axis] = this.property;
            c[this.axis] = [-f.offset, this.full - f.offset];
            var d = {
                snap: 0,
                limit: c,
                modifiers: e,
                onDrag: this.draggedKnob,
                onStart: this.draggedKnob,
                onBeforeStart: (function() {
                    this.isDragging = true
                }).bind(this),
                onCancel: function() {
                    this.isDragging = false
                }.bind(this),
                onComplete: function() {
                    this.isDragging = false;
                    this.draggedKnob();
                    this.end()
                }.bind(this)
            };
            if (f.snap) {
                this.setSnap(d)
            }
            this.drag = new Drag(b, d);
            if (f.initialStep != null) {
                this.set(f.initialStep, true)
            }
            this.attach()
        },
        attach: function() {
            this.element.addEvent("mousedown", this.clickedElement);
            if (this.options.wheel) {
                this.element.addEvent("mousewheel", this.scrolledElement)
            }
            this.drag.attach();
            return this
        },
        detach: function() {
            this.element.removeEvent("mousedown", this.clickedElement).removeEvent("mousewheel", this.scrolledElement);
            this.drag.detach();
            return this
        },
        autosize: function() {
            this.setSliderDimensions().setKnobPosition(this.toPosition(this.step));
            this.drag.options.limit[this.axis] = [-this.options.offset, this.full - this.options.offset];
            if (this.options.snap) {
                this.setSnap()
            }
            return this
        },
        setSnap: function(b) {
            if (!b) {
                b = this.drag.options
            }
            b.grid = Math.ceil(this.stepWidth);
            b.limit[this.axis][1] = this.element[this.offset];
            return this
        },
        setKnobPosition: function(b) {
            if (this.options.snap) {
                b = this.toPosition(this.step)
            }
            this.knob.setStyle(this.property, b);
            return this
        },
        setSliderDimensions: function() {
            this.full = this.element.measure(function() {
                this.half = this.knob[this.offset] / 2;
                return this.element[this.offset] - this.knob[this.offset] + (this.options.offset * 2)
            }.bind(this));
            return this
        },
        set: function(b, c) {
            if (!((this.range > 0) ^ (b < this.min))) {
                b = this.min
            }
            if (!((this.range > 0) ^ (b > this.max))) {
                b = this.max
            }
            this.step = (b).round(this.modulus.decimalLength);
            if (c) {
                this.checkStep().setKnobPosition(this.toPosition(this.step))
            } else {
                this.checkStep().fireEvent("tick", this.toPosition(this.step)).fireEvent("move").end()
            }
            return this
        },
        setRange: function(c, e, d) {
            this.min = Array.pick([c[0], 0]);
            this.max = Array.pick([c[1], this.options.steps]);
            this.range = this.max - this.min;
            this.steps = this.options.steps || this.full;
            var b = this.stepSize = Math.abs(this.range) / this.steps;
            this.stepWidth = this.stepSize * this.full / Math.abs(this.range);
            this.setModulus();
            if (c) {
                this.set(Array.pick([e, this.step]).limit(this.min, this.max), d)
            }
            return this
        },
        setModulus: function() {
            var b = ((this.stepSize + "").split(".")[1] || []).length,
                c = 1 + "";
            while (b--) {
                c += "0"
            }
            this.modulus = {
                multiplier: (c).toInt(10),
                decimalLength: c.length - 1
            }
        },
        clickedElement: function(d) {
            if (this.isDragging || d.target == this.knob) {
                return
            }
            var c = this.range < 0 ? -1 : 1,
                b = d.page[this.axis] - this.element.getPosition()[this.axis] - this.half;
            b = b.limit(-this.options.offset, this.full - this.options.offset);
            this.step = (this.min + c * this.toStep(b)).round(this.modulus.decimalLength);
            this.checkStep().fireEvent("tick", b).fireEvent("move").end()
        },
        scrolledElement: function(b) {
            var c = (this.options.mode == "horizontal") ? (b.wheel < 0) : (b.wheel > 0);
            this.set(this.step + (c ? -1 : 1) * this.stepSize);
            b.stop()
        },
        draggedKnob: function() {
            var c = this.range < 0 ? -1 : 1,
                b = this.drag.value.now[this.axis];
            b = b.limit(-this.options.offset, this.full - this.options.offset);
            this.step = (this.min + c * this.toStep(b)).round(this.modulus.decimalLength);
            this.checkStep();
            this.fireEvent("move")
        },
        checkStep: function() {
            var b = this.step;
            if (this.previousChange != b) {
                this.previousChange = b;
                this.fireEvent("change", b)
            }
            return this
        },
        end: function() {
            var b = this.step;
            if (this.previousEnd !== b) {
                this.previousEnd = b;
                this.fireEvent("complete", b + "")
            }
            return this
        },
        toStep: function(b) {
            var c = (b + this.options.offset) * this.stepSize / this.full * this.steps;
            return this.options.steps ? (c - (c * this.modulus.multiplier) % (this.stepSize * this.modulus.multiplier) / this.modulus.multiplier).round(this.modulus.decimalLength) : c
        },
        toPosition: function(b) {
            return (this.full * Math.abs(this.min - b)) / (this.steps * this.stepSize) - this.options.offset || 0
        }
    })
})();
(function() {
    var a = this.Sortables = new Class({
        Implements: [Events, Options],
        options: {
            opacity: 1,
            clone: false,
            revert: false,
            handle: false,
            dragOptions: {},
            unDraggableTags: ["button", "input", "a", "textarea", "select", "option"]
        },
        initialize: function(b, c) {
            this.setOptions(c);
            this.elements = [];
            this.lists = [];
            this.idle = true;
            this.addLists($$(document.id(b) || b));
            if (!this.options.clone) {
                this.options.revert = false
            }
            if (this.options.revert) {
                this.effect = new Fx.Morph(null, Object.merge({
                    duration: 250,
                    link: "cancel"
                }, this.options.revert))
            }
        },
        attach: function() {
            this.addLists(this.lists);
            return this
        },
        detach: function() {
            this.lists = this.removeLists(this.lists);
            return this
        },
        addItems: function() {
            Array.flatten(arguments).each(function(b) {
                this.elements.push(b);
                var c = b.retrieve("sortables:start", function(d) {
                    this.start.call(this, d, b)
                }.bind(this));
                (this.options.handle ? b.getElement(this.options.handle) || b : b).addEvent("mousedown", c)
            }, this);
            return this
        },
        addLists: function() {
            Array.flatten(arguments).each(function(b) {
                this.lists.include(b);
                this.addItems(b.getChildren())
            }, this);
            return this
        },
        removeItems: function() {
            return $$(Array.flatten(arguments).map(function(b) {
                this.elements.erase(b);
                var c = b.retrieve("sortables:start");
                (this.options.handle ? b.getElement(this.options.handle) || b : b).removeEvent("mousedown", c);
                return b
            }, this))
        },
        removeLists: function() {
            return $$(Array.flatten(arguments).map(function(b) {
                this.lists.erase(b);
                this.removeItems(b.getChildren());
                return b
            }, this))
        },
        getDroppableCoordinates: function(d) {
            var e = d.getOffsetParent();
            var c = d.getPosition(e);
            var b = {
                w: window.getScroll(),
                offsetParent: e.getScroll()
            };
            c.x += b.offsetParent.x;
            c.y += b.offsetParent.y;
            if (e.getStyle("position") == "fixed") {
                c.x -= b.w.x;
                c.y -= b.w.y
            }
            return c
        },
        getClone: function(c, b) {
            if (!this.options.clone) {
                return new Element(b.tagName).inject(document.body)
            }
            if (typeOf(this.options.clone) == "function") {
                return this.options.clone.call(this, c, b, this.list)
            }
            var d = b.clone(true).setStyles({
                margin: 0,
                position: "absolute",
                visibility: "hidden",
                width: b.getStyle("width")
            }).addEvent("mousedown", function(e) {
                b.fireEvent("mousedown", e)
            });
            if (d.get("html").test("radio")) {
                d.getElements("input[type=radio]").each(function(e, f) {
                    e.set("name", "clone_" + f);
                    if (e.get("checked")) {
                        b.getElements("input[type=radio]")[f].set("checked", true)
                    }
                })
            }
            return d.inject(this.list).setPosition(this.getDroppableCoordinates(this.element))
        },
        getDroppables: function() {
            var b = this.list.getChildren().erase(this.clone).erase(this.element);
            if (!this.options.constrain) {
                b.append(this.lists).erase(this.list)
            }
            return b
        },
        insert: function(d, c) {
            var b = "inside";
            if (this.lists.contains(c)) {
                this.list = c;
                this.drag.droppables = this.getDroppables()
            } else {
                b = this.element.getAllPrevious().contains(c) ? "before" : "after"
            }
            this.element.inject(c, b);
            this.fireEvent("sort", [this.element, this.clone])
        },
        start: function(c, b) {
            if (!this.idle || c.rightClick || (!this.options.handle && this.options.unDraggableTags.contains(c.target.get("tag")))) {
                return
            }
            this.idle = false;
            this.element = b;
            this.opacity = b.getStyle("opacity");
            this.list = b.getParent();
            this.clone = this.getClone(c, b);
            this.drag = new Drag.Move(this.clone, Object.merge({
                droppables: this.getDroppables()
            }, this.options.dragOptions)).addEvents({
                onSnap: function() {
                    c.stop();
                    this.clone.setStyle("visibility", "visible");
                    this.element.setStyle("opacity", this.options.opacity || 0);
                    this.fireEvent("start", [this.element, this.clone])
                }.bind(this),
                onEnter: this.insert.bind(this),
                onCancel: this.end.bind(this),
                onComplete: this.end.bind(this)
            });
            this.clone.inject(this.element, "before");
            this.drag.start(c)
        },
        end: function() {
            this.drag.detach();
            this.element.setStyle("opacity", this.opacity);
            var b = this;
            if (this.effect) {
                var d = this.element.getStyles("width", "height"),
                    f = this.clone,
                    e = f.computePosition(this.getDroppableCoordinates(f));
                var c = function() {
                    this.removeEvent("cancel", c);
                    f.destroy();
                    b.reset()
                };
                this.effect.element = f;
                this.effect.start({
                    top: e.top,
                    left: e.left,
                    width: d.width,
                    height: d.height,
                    opacity: 0.25
                }).addEvent("cancel", c).chain(c)
            } else {
                this.clone.destroy();
                b.reset()
            }
        },
        reset: function() {
            this.idle = true;
            this.fireEvent("complete", this.element)
        },
        serialize: function() {
            var d = Array.link(arguments, {
                modifier: Type.isFunction,
                index: function(e) {
                    return e != null
                }
            });
            var c = this.lists.map(function(e) {
                return e.getChildren().map(d.modifier || function(f) {
                    return f.get("id")
                }, this)
            }, this);
            var b = d.index;
            if (this.lists.length == 1) {
                b = 0
            }
            return (b || b === 0) && b >= 0 && b < this.lists.length ? c[b] : c
        }
    })
})();
(function() {
    var d = {
            relay: false
        },
        c = ["once", "throttle", "pause"],
        b = c.length;
    while (b--) {
        d[c[b]] = Events.lookupPseudo(c[b])
    }
    DOMEvent.definePseudo = function(e, f) {
        d[e] = f;
        return this
    };
    var a = Element.prototype;
    [Element, Window, Document].invoke("implement", Events.Pseudos(d, a.addEvent, a.removeEvent))
})();
(function() {
    var a = "$moo:keys-pressed",
        b = "$moo:keys-keyup";
    DOMEvent.definePseudo("keys", function(d, e, c) {
        var g = c[0],
            f = [],
            i = this.retrieve(a, []),
            h = d.value;
        if (h != "+") {
            f.append(h.replace("++", function() {
                f.push("+");
                return ""
            }).split("+"))
        } else {
            f = ["+"]
        }
        i.include(g.key);
        if (f.every(function(k) {
                return i.contains(k)
            })) {
            e.apply(this, c)
        }
        this.store(a, i);
        if (!this.retrieve(b)) {
            var j = function(k) {
                (function() {
                    i = this.retrieve(a, []).erase(k.key);
                    this.store(a, i)
                }).delay(0, this)
            };
            this.store(b, j).addEvent("keyup", j)
        }
    });
    DOMEvent.defineKeys({
        "16": "shift",
        "17": "control",
        "18": "alt",
        "20": "capslock",
        "33": "pageup",
        "34": "pagedown",
        "35": "end",
        "36": "home",
        "144": "numlock",
        "145": "scrolllock",
        "186": ";",
        "187": "=",
        "188": ",",
        "190": ".",
        "191": "/",
        "192": "`",
        "219": "[",
        "220": "\\",
        "221": "]",
        "222": "'",
        "107": "+",
        "109": "-",
        "189": "-"
    })
})();
(function() {
    var e = {
            a: /[àáâãäåăą]/g,
            A: /[ÀÁÂÃÄÅĂĄ]/g,
            c: /[ćčç]/g,
            C: /[ĆČÇ]/g,
            d: /[ďđ]/g,
            D: /[ĎÐ]/g,
            e: /[èéêëěę]/g,
            E: /[ÈÉÊËĚĘ]/g,
            g: /[ğ]/g,
            G: /[Ğ]/g,
            i: /[ìíîï]/g,
            I: /[ÌÍÎÏ]/g,
            l: /[ĺľł]/g,
            L: /[ĹĽŁ]/g,
            n: /[ñňń]/g,
            N: /[ÑŇŃ]/g,
            o: /[òóôõöøő]/g,
            O: /[ÒÓÔÕÖØ]/g,
            r: /[řŕ]/g,
            R: /[ŘŔ]/g,
            s: /[ššş]/g,
            S: /[ŠŞŚ]/g,
            t: /[ťţ]/g,
            T: /[ŤŢ]/g,
            u: /[ùúûůüµ]/g,
            U: /[ÙÚÛŮÜ]/g,
            y: /[ÿý]/g,
            Y: /[ŸÝ]/g,
            z: /[žźż]/g,
            Z: /[ŽŹŻ]/g,
            th: /[þ]/g,
            TH: /[Þ]/g,
            dh: /[ð]/g,
            DH: /[Ð]/g,
            ss: /[ß]/g,
            oe: /[œ]/g,
            OE: /[Œ]/g,
            ae: /[æ]/g,
            AE: /[Æ]/g
        },
        d = {
            " ": /[\xa0\u2002\u2003\u2009]/g,
            "*": /[\xb7]/g,
            "'": /[\u2018\u2019]/g,
            '"': /[\u201c\u201d]/g,
            "...": /[\u2026]/g,
            "-": /[\u2013]/g,
            "&raquo;": /[\uFFFD]/g
        },
        c = {
            ms: 1,
            s: 1000,
            m: 60000,
            h: 3600000
        },
        b = /(\d*.?\d+)([msh]+)/;
    var a = function(h, j) {
        var g = h,
            i;
        for (i in j) {
            g = g.replace(j[i], i)
        }
        return g
    };
    var f = function(g, h) {
        g = g || (h ? "" : "\\w+");
        var i = h ? "<" + g + "(?!\\w)[^>]*>([\\s\\S]*?)</" + g + "(?!\\w)>" : "</?" + g + "/?>|<" + g + "[\\s|/][^>]*>";
        return new RegExp(i, "gi")
    };
    String.implement({
        standardize: function() {
            return a(this, e)
        },
        repeat: function(g) {
            return new Array(g + 1).join(this)
        },
        pad: function(g, j, i) {
            if (this.length >= g) {
                return this
            }
            var h = (j == null ? " " : "" + j).repeat(g - this.length).substr(0, g - this.length);
            if (!i || i == "right") {
                return this + h
            }
            if (i == "left") {
                return h + this
            }
            return h.substr(0, (h.length / 2).floor()) + this + h.substr(0, (h.length / 2).ceil())
        },
        getTags: function(g, h) {
            return this.match(f(g, h)) || []
        },
        stripTags: function(g, h) {
            return this.replace(f(g, h), "")
        },
        tidy: function() {
            return a(this, d)
        },
        truncate: function(g, h, k) {
            var j = this;
            if (h == null && arguments.length == 1) {
                h = "…"
            }
            if (j.length > g) {
                j = j.substring(0, g);
                if (k) {
                    var i = j.lastIndexOf(k);
                    if (i != -1) {
                        j = j.substr(0, i)
                    }
                }
                if (h) {
                    j += h
                }
            }
            return j
        },
        ms: function() {
            var g = b.exec(this);
            if (g == null) {
                return Number(this)
            }
            return Number(g[1]) * c[g[2]]
        }
    })
})();
Element.implement({
    tidy: function() {
        this.set("value", this.get("value").tidy())
    },
    getTextInRange: function(b, a) {
        return this.get("value").substring(b, a)
    },
    getSelectedText: function() {
        if (this.setSelectionRange) {
            return this.getTextInRange(this.getSelectionStart(), this.getSelectionEnd())
        }
        return document.selection.createRange().text
    },
    getSelectedRange: function() {
        if (this.selectionStart != null) {
            return {
                start: this.selectionStart,
                end: this.selectionEnd
            }
        }
        var e = {
            start: 0,
            end: 0
        };
        var a = this.getDocument().selection.createRange();
        if (!a || a.parentElement() != this) {
            return e
        }
        var c = a.duplicate();
        if (this.type == "text") {
            e.start = 0 - c.moveStart("character", -100000);
            e.end = e.start + a.text.length
        } else {
            var b = this.get("value");
            var d = b.length;
            c.moveToElementText(this);
            c.setEndPoint("StartToEnd", a);
            if (c.text.length) {
                d -= b.match(/[\n\r]*$/)[0].length
            }
            e.end = d - c.text.length;
            c.setEndPoint("StartToStart", a);
            e.start = d - c.text.length
        }
        return e
    },
    getSelectionStart: function() {
        return this.getSelectedRange().start
    },
    getSelectionEnd: function() {
        return this.getSelectedRange().end
    },
    setCaretPosition: function(a) {
        if (a == "end") {
            a = this.get("value").length
        }
        this.selectRange(a, a);
        return this
    },
    getCaretPosition: function() {
        return this.getSelectedRange().start
    },
    selectRange: function(e, a) {
        if (this.setSelectionRange) {
            this.focus();
            this.setSelectionRange(e, a)
        } else {
            var c = this.get("value");
            var d = c.substr(e, a - e).replace(/\r/g, "").length;
            e = c.substr(0, e).replace(/\r/g, "").length;
            var b = this.createTextRange();
            b.collapse(true);
            b.moveEnd("character", e + d);
            b.moveStart("character", e);
            b.select()
        }
        return this
    },
    insertAtCursor: function(b, a) {
        var d = this.getSelectedRange();
        var c = this.get("value");
        this.set("value", c.substring(0, d.start) + b + c.substring(d.end, c.length));
        if (a !== false) {
            this.selectRange(d.start, d.start + b.length)
        } else {
            this.setCaretPosition(d.start + b.length)
        }
        return this
    },
    insertAroundCursor: function(b, a) {
        b = Object.append({
            before: "",
            defaultMiddle: "",
            after: ""
        }, b);
        var c = this.getSelectedText() || b.defaultMiddle;
        var g = this.getSelectedRange();
        var f = this.get("value");
        if (g.start == g.end) {
            this.set("value", f.substring(0, g.start) + b.before + c + b.after + f.substring(g.end, f.length));
            this.selectRange(g.start + b.before.length, g.end + b.before.length + c.length)
        } else {
            var d = f.substring(g.start, g.end);
            this.set("value", f.substring(0, g.start) + b.before + d + b.after + f.substring(g.end, f.length));
            var e = g.start + b.before.length;
            if (a !== false) {
                this.selectRange(e, e + d.length)
            } else {
                this.setCaretPosition(e + f.length)
            }
        }
        return this
    }
});
(function() {
    var a = false,
        b = false;
    var c = function() {
        var d = new Element("div").setStyles({
            position: "fixed",
            top: 0,
            right: 0
        }).inject(document.body);
        a = (d.offsetTop === 0);
        d.dispose();
        b = true
    };
    Element.implement({
        pin: function(h, f) {
            if (!b) {
                c()
            }
            if (this.getStyle("display") == "none") {
                return this
            }
            var j, k = window.getScroll(),
                l, e;
            if (h !== false) {
                j = this.getPosition();
                if (!this.retrieve("pin:_pinned")) {
                    var g = {
                        top: j.y - k.y,
                        left: j.x - k.x,
                        margin: "0px",
                        padding: "0px"
                    };
                    if (a && !f) {
                        this.setStyle("position", "fixed").setStyles(g)
                    } else {
                        l = this.getOffsetParent();
                        var i = this.getPosition(l),
                            m = this.getStyles("left", "top");
                        if (l && m.left == "auto" || m.top == "auto") {
                            this.setPosition(i)
                        }
                        if (this.getStyle("position") == "static") {
                            this.setStyle("position", "absolute")
                        }
                        i = {
                            x: m.left.toInt() - k.x,
                            y: m.top.toInt() - k.y
                        };
                        e = function() {
                            if (!this.retrieve("pin:_pinned")) {
                                return
                            }
                            var n = window.getScroll();
                            this.setStyles({
                                left: i.x + n.x,
                                top: i.y + n.y
                            })
                        }.bind(this);
                        this.store("pin:_scrollFixer", e);
                        window.addEvent("scroll", e)
                    }
                    this.store("pin:_pinned", true)
                }
            } else {
                if (!this.retrieve("pin:_pinned")) {
                    return this
                }
                l = this.getParent();
                var d = (l.getComputedStyle("position") != "static" ? l : l.getOffsetParent());
                j = this.getPosition();
                this.store("pin:_pinned", false);
                e = this.retrieve("pin:_scrollFixer");
                if (!e) {
                    this.setStyles({
                        position: "absolute",
                        top: j.y + k.y,
                        left: j.x + k.x
                    })
                } else {
                    this.store("pin:_scrollFixer", null);
                    window.removeEvent("scroll", e)
                }
                this.removeClass("isPinned")
            }
            return this
        },
        unpin: function() {
            return this.pin(false)
        },
        togglePin: function() {
            return this.pin(!this.retrieve("pin:_pinned"))
        }
    })
})();
(function(b) {
    var a = Element.Position = {
        options: {
            relativeTo: document.body,
            position: {
                x: "center",
                y: "center"
            },
            offset: {
                x: 0,
                y: 0
            }
        },
        getOptions: function(d, c) {
            c = Object.merge({}, a.options, c);
            a.setPositionOption(c);
            a.setEdgeOption(c);
            a.setOffsetOption(d, c);
            a.setDimensionsOption(d, c);
            return c
        },
        setPositionOption: function(c) {
            c.position = a.getCoordinateFromValue(c.position)
        },
        setEdgeOption: function(d) {
            var c = a.getCoordinateFromValue(d.edge);
            d.edge = c ? c : (d.position.x == "center" && d.position.y == "center") ? {
                x: "center",
                y: "center"
            } : {
                x: "left",
                y: "top"
            }
        },
        setOffsetOption: function(f, d) {
            var c = {
                x: 0,
                y: 0
            };
            var e = {
                x: 0,
                y: 0
            };
            var g = f.measure(function() {
                return document.id(this.getOffsetParent())
            });
            if (!g || g == f.getDocument().body) {
                return
            }
            e = g.getScroll();
            c = g.measure(function() {
                var i = this.getPosition();
                if (this.getStyle("position") == "fixed") {
                    var h = window.getScroll();
                    i.x += h.x;
                    i.y += h.y
                }
                return i
            });
            d.offset = {
                parentPositioned: g != document.id(d.relativeTo),
                x: d.offset.x - c.x + e.x,
                y: d.offset.y - c.y + e.y
            }
        },
        setDimensionsOption: function(d, c) {
            c.dimensions = d.getDimensions({
                computeSize: true,
                styles: ["padding", "border", "margin"]
            })
        },
        getPosition: function(e, d) {
            var c = {};
            d = a.getOptions(e, d);
            var f = document.id(d.relativeTo) || document.body;
            a.setPositionCoordinates(d, c, f);
            if (d.edge) {
                a.toEdge(c, d)
            }
            var g = d.offset;
            c.left = ((c.x >= 0 || g.parentPositioned || d.allowNegative) ? c.x : 0).toInt();
            c.top = ((c.y >= 0 || g.parentPositioned || d.allowNegative) ? c.y : 0).toInt();
            a.toMinMax(c, d);
            if (d.relFixedPosition || f.getStyle("position") == "fixed") {
                a.toRelFixedPosition(f, c)
            }
            if (d.ignoreScroll) {
                a.toIgnoreScroll(f, c)
            }
            if (d.ignoreMargins) {
                a.toIgnoreMargins(c, d)
            }
            c.left = Math.ceil(c.left);
            c.top = Math.ceil(c.top);
            delete c.x;
            delete c.y;
            return c
        },
        setPositionCoordinates: function(k, g, d) {
            var f = k.offset.y,
                h = k.offset.x,
                e = (d == document.body) ? window.getScroll() : d.getPosition(),
                j = e.y,
                c = e.x,
                i = window.getSize();
            switch (k.position.x) {
                case "left":
                    g.x = c + h;
                    break;
                case "right":
                    g.x = c + h + d.offsetWidth;
                    break;
                default:
                    g.x = c + ((d == document.body ? i.x : d.offsetWidth) / 2) + h;
                    break
            }
            switch (k.position.y) {
                case "top":
                    g.y = j + f;
                    break;
                case "bottom":
                    g.y = j + f + d.offsetHeight;
                    break;
                default:
                    g.y = j + ((d == document.body ? i.y : d.offsetHeight) / 2) + f;
                    break
            }
        },
        toMinMax: function(c, d) {
            var f = {
                    left: "x",
                    top: "y"
                },
                e;
            ["minimum", "maximum"].each(function(g) {
                ["left", "top"].each(function(h) {
                    e = d[g] ? d[g][f[h]] : null;
                    if (e != null && ((g == "minimum") ? c[h] < e : c[h] > e)) {
                        c[h] = e
                    }
                })
            })
        },
        toRelFixedPosition: function(e, c) {
            var d = window.getScroll();
            c.top += d.y;
            c.left += d.x
        },
        toIgnoreScroll: function(e, d) {
            var c = e.getScroll();
            d.top -= c.y;
            d.left -= c.x
        },
        toIgnoreMargins: function(c, d) {
            c.left += d.edge.x == "right" ? d.dimensions["margin-right"] : (d.edge.x != "center" ? -d.dimensions["margin-left"] : -d.dimensions["margin-left"] + ((d.dimensions["margin-right"] + d.dimensions["margin-left"]) / 2));
            c.top += d.edge.y == "bottom" ? d.dimensions["margin-bottom"] : (d.edge.y != "center" ? -d.dimensions["margin-top"] : -d.dimensions["margin-top"] + ((d.dimensions["margin-bottom"] + d.dimensions["margin-top"]) / 2))
        },
        toEdge: function(c, d) {
            var e = {},
                g = d.dimensions,
                f = d.edge;
            switch (f.x) {
                case "left":
                    e.x = 0;
                    break;
                case "right":
                    e.x = -g.x - g.computedRight - g.computedLeft;
                    break;
                default:
                    e.x = -(Math.round(g.totalWidth / 2));
                    break
            }
            switch (f.y) {
                case "top":
                    e.y = 0;
                    break;
                case "bottom":
                    e.y = -g.y - g.computedTop - g.computedBottom;
                    break;
                default:
                    e.y = -(Math.round(g.totalHeight / 2));
                    break
            }
            c.x += e.x;
            c.y += e.y
        },
        getCoordinateFromValue: function(c) {
            if (typeOf(c) != "string") {
                return c
            }
            c = c.toLowerCase();
            return {
                x: c.test("left") ? "left" : (c.test("right") ? "right" : "center"),
                y: c.test(/upper|top/) ? "top" : (c.test("bottom") ? "bottom" : "center")
            }
        }
    };
    Element.implement({
        position: function(d) {
            if (d && (d.x != null || d.y != null)) {
                return (b ? b.apply(this, arguments) : this)
            }
            var c = this.setStyle("position", "absolute").calculatePosition(d);
            return (d && d.returnPos) ? c : this.setStyles(c)
        },
        calculatePosition: function(c) {
            return a.getPosition(this, c)
        }
    })
})(Element.prototype.position);
Element.implement({
    isDisplayed: function() {
        return this.getStyle("display") != "none"
    },
    isVisible: function() {
        var a = this.offsetWidth,
            b = this.offsetHeight;
        return (a == 0 && b == 0) ? false : (a > 0 && b > 0) ? true : this.style.display != "none"
    },
    toggle: function() {
        return this[this.isDisplayed() ? "hide" : "show"]()
    },
    hide: function() {
        var b;
        try {
            b = this.getStyle("display")
        } catch (a) {}
        if (b == "none") {
            return this
        }
        return this.store("element:_originalDisplay", b || "").setStyle("display", "none")
    },
    show: function(a) {
        if (!a && this.isDisplayed()) {
            return this
        }
        a = a || this.retrieve("element:_originalDisplay") || "block";
        return this.setStyle("display", (a == "none") ? "block" : a)
    },
    swapClass: function(a, b) {
        return this.removeClass(a).addClass(b)
    }
});
Document.implement({
    clearSelection: function() {
        if (window.getSelection) {
            var a = window.getSelection();
            if (a && a.removeAllRanges) {
                a.removeAllRanges()
            }
        } else {
            if (document.selection && document.selection.empty) {
                try {
                    document.selection.empty()
                } catch (b) {}
            }
        }
    }
});
Class.Occlude = new Class({
    occlude: function(c, b) {
        b = document.id(b || this.element);
        var a = b.retrieve(c || this.property);
        if (a && !this.occluded) {
            return (this.occluded = a)
        }
        this.occluded = false;
        b.store(c || this.property, this);
        return this.occluded
    }
});
(function() {
    var b = false;
    b = Browser.ie6 || (Browser.firefox && Browser.version < 3 && Browser.Platform.mac);
    var a = this.IframeShim = new Class({
        Implements: [Options, Events, Class.Occlude],
        options: {
            className: "iframeShim",
            src: 'javascript:false;document.write("");',
            display: false,
            zIndex: null,
            margin: 0,
            offset: {
                x: 0,
                y: 0
            },
            browsers: b
        },
        property: "IframeShim",
        initialize: function(d, c) {
            this.element = document.id(d);
            if (this.occlude()) {
                return this.occluded
            }
            this.setOptions(c);
            this.makeShim();
            return this
        },
        makeShim: function() {
            if (this.options.browsers) {
                var e = this.element.getStyle("zIndex").toInt();
                if (!e) {
                    e = 1;
                    var d = this.element.getStyle("position");
                    if (d == "static" || !d) {
                        this.element.setStyle("position", "relative")
                    }
                    this.element.setStyle("zIndex", e)
                }
                e = ((this.options.zIndex != null || this.options.zIndex === 0) && e > this.options.zIndex) ? this.options.zIndex : e - 1;
                if (e < 0) {
                    e = 1
                }
                this.shim = new Element("iframe", {
                    src: this.options.src,
                    scrolling: "no",
                    frameborder: 0,
                    styles: {
                        zIndex: e,
                        position: "absolute",
                        border: "none",
                        filter: "progid:DXImageTransform.Microsoft.Alpha(style=0,opacity=0)"
                    },
                    "class": this.options.className
                }).store("IframeShim", this);
                var c = (function() {
                    this.shim.inject(this.element, "after");
                    this[this.options.display ? "show" : "hide"]();
                    this.fireEvent("inject")
                }).bind(this);
                if (!a.ready) {
                    window.addEvent("load", c)
                } else {
                    c()
                }
            } else {
                this.position = this.hide = this.show = this.dispose = Function.convert(this)
            }
        },
        position: function() {
            if (!a.ready || !this.shim) {
                return this
            }
            var c = this.element.measure(function() {
                return this.getSize()
            });
            if (this.options.margin != undefined) {
                c.x = c.x - (this.options.margin * 2);
                c.y = c.y - (this.options.margin * 2);
                this.options.offset.x += this.options.margin;
                this.options.offset.y += this.options.margin
            }
            this.shim.set({
                width: c.x,
                height: c.y
            }).position({
                relativeTo: this.element,
                offset: this.options.offset
            });
            return this
        },
        hide: function() {
            if (this.shim) {
                this.shim.setStyle("display", "none")
            }
            return this
        },
        show: function() {
            if (this.shim) {
                this.shim.setStyle("display", "block")
            }
            return this.position()
        },
        dispose: function() {
            if (this.shim) {
                this.shim.dispose()
            }
            return this
        },
        destroy: function() {
            if (this.shim) {
                this.shim.destroy()
            }
            return this
        }
    })
})();
window.addEvent("load", function() {
    IframeShim.ready = true
});
(function() {
    var a = function(b) {
        return decodeURIComponent(b.replace(/\+/g, " "))
    };
    String.implement({
        parseQueryString: function(e, b) {
            if (e == null) {
                e = true
            }
            if (b == null) {
                b = true
            }
            var d = this.split(/[&;]/),
                c = {};
            if (!d.length) {
                return c
            }
            d.each(function(j) {
                var f = j.indexOf("=") + 1,
                    h = f ? j.substr(f) : "",
                    g = f ? j.substr(0, f - 1).match(/([^\]\[]+|(\B)(?=\]))/g) : [j],
                    i = c;
                if (!g) {
                    return
                }
                if (b) {
                    h = a(h)
                }
                g.each(function(l, k) {
                    if (e) {
                        l = a(l)
                    }
                    var m = i[l];
                    if (k < g.length - 1) {
                        i = i[l] = m || {}
                    } else {
                        if (typeOf(m) == "array") {
                            m.push(h)
                        } else {
                            i[l] = m != null ? [m, h] : h
                        }
                    }
                })
            });
            return c
        },
        cleanQueryString: function(b) {
            return this.split("&").filter(function(f) {
                var c = f.indexOf("="),
                    d = c < 0 ? "" : f.substr(0, c),
                    e = f.substr(c + 1);
                return b ? b.call(null, d, e) : (e || e === 0)
            }).join("&")
        }
    })
})();
(function() {
    var a = function(d) {
        var b = d.options.hideInputs;
        if (window.OverText) {
            var c = [null];
            OverText.each(function(e) {
                c.include("." + e.options.labelClass)
            });
            if (c) {
                b += c.join(", ")
            }
        }
        return (b) ? d.element.getElements(b) : null
    };
    Fx.Reveal = new Class({
        Extends: Fx.Morph,
        options: {
            link: "cancel",
            styles: ["padding", "border", "margin"],
            transitionOpacity: "opacity" in document.documentElement,
            mode: "vertical",
            display: function() {
                return this.element.get("tag") != "tr" ? "block" : "table-row"
            },
            opacity: 1,
            hideInputs: !("opacity" in document.documentElement) ? "select, input, textarea, object, embed" : null
        },
        dissolve: function() {
            if (!this.hiding && !this.showing) {
                if (this.element.getStyle("display") != "none") {
                    this.hiding = true;
                    this.showing = false;
                    this.hidden = true;
                    this.cssText = this.element.style.cssText;
                    var d = this.element.getComputedSize({
                        styles: this.options.styles,
                        mode: this.options.mode
                    });
                    if (this.options.transitionOpacity) {
                        d.opacity = this.options.opacity
                    }
                    var c = {};
                    Object.each(d, function(f, e) {
                        c[e] = [f, 0]
                    });
                    this.element.setStyles({
                        display: Function.convert(this.options.display).call(this),
                        overflow: "hidden"
                    });
                    var b = a(this);
                    if (b) {
                        b.setStyle("visibility", "hidden")
                    }
                    this.$chain.unshift(function() {
                        if (this.hidden) {
                            this.hiding = false;
                            this.element.style.cssText = this.cssText;
                            this.element.setStyle("display", "none");
                            if (b) {
                                b.setStyle("visibility", "visible")
                            }
                        }
                        this.fireEvent("hide", this.element);
                        this.callChain()
                    }.bind(this));
                    this.start(c)
                } else {
                    this.callChain.delay(10, this);
                    this.fireEvent("complete", this.element);
                    this.fireEvent("hide", this.element)
                }
            } else {
                if (this.options.link == "chain") {
                    this.chain(this.dissolve.bind(this))
                } else {
                    if (this.options.link == "cancel" && !this.hiding) {
                        this.cancel();
                        this.dissolve()
                    }
                }
            }
            return this
        },
        reveal: function() {
            if (!this.showing && !this.hiding) {
                if (this.element.getStyle("display") == "none") {
                    this.hiding = false;
                    this.showing = true;
                    this.hidden = false;
                    this.cssText = this.element.style.cssText;
                    var d;
                    this.element.measure(function() {
                        d = this.element.getComputedSize({
                            styles: this.options.styles,
                            mode: this.options.mode
                        })
                    }.bind(this));
                    if (this.options.heightOverride != null) {
                        d.height = this.options.heightOverride.toInt()
                    }
                    if (this.options.widthOverride != null) {
                        d.width = this.options.widthOverride.toInt()
                    }
                    if (this.options.transitionOpacity) {
                        this.element.setStyle("opacity", 0);
                        d.opacity = this.options.opacity
                    }
                    var c = {
                        height: 0,
                        display: Function.convert(this.options.display).call(this)
                    };
                    Object.each(d, function(f, e) {
                        c[e] = 0
                    });
                    c.overflow = "hidden";
                    this.element.setStyles(c);
                    var b = a(this);
                    if (b) {
                        b.setStyle("visibility", "hidden")
                    }
                    this.$chain.unshift(function() {
                        this.element.style.cssText = this.cssText;
                        this.element.setStyle("display", Function.convert(this.options.display).call(this));
                        if (!this.hidden) {
                            this.showing = false
                        }
                        if (b) {
                            b.setStyle("visibility", "visible")
                        }
                        this.callChain();
                        this.fireEvent("show", this.element)
                    }.bind(this));
                    this.start(d)
                } else {
                    this.callChain();
                    this.fireEvent("complete", this.element);
                    this.fireEvent("show", this.element)
                }
            } else {
                if (this.options.link == "chain") {
                    this.chain(this.reveal.bind(this))
                } else {
                    if (this.options.link == "cancel" && !this.showing) {
                        this.cancel();
                        this.reveal()
                    }
                }
            }
            return this
        },
        toggle: function() {
            if (this.element.getStyle("display") == "none") {
                this.reveal()
            } else {
                this.dissolve()
            }
            return this
        },
        cancel: function() {
            this.parent.apply(this, arguments);
            if (this.cssText != null) {
                this.element.style.cssText = this.cssText
            }
            this.hiding = false;
            this.showing = false;
            return this
        }
    });
    Element.Properties.reveal = {
        set: function(b) {
            this.get("reveal").cancel().setOptions(b);
            return this
        },
        get: function() {
            var b = this.retrieve("reveal");
            if (!b) {
                b = new Fx.Reveal(this);
                this.store("reveal", b)
            }
            return b
        }
    };
    Element.Properties.dissolve = Element.Properties.reveal;
    Element.implement({
        reveal: function(b) {
            this.get("reveal").setOptions(b).reveal();
            return this
        },
        dissolve: function(b) {
            this.get("reveal").setOptions(b).dissolve();
            return this
        },
        nix: function(b) {
            var c = Array.link(arguments, {
                destroy: Type.isBoolean,
                options: Type.isObject
            });
            this.get("reveal").setOptions(b).dissolve().chain(function() {
                this[c.destroy ? "destroy" : "dispose"]()
            }.bind(this));
            return this
        },
        wink: function() {
            var c = Array.link(arguments, {
                duration: Type.isNumber,
                options: Type.isObject
            });
            var b = this.get("reveal").setOptions(c.options);
            b.reveal().chain(function() {
                (function() {
                    b.dissolve()
                }).delay(c.duration || 2000)
            })
        }
    })
})();
(function() {
    var b = function(c) {
        return c != null
    };
    var a = Object.prototype.hasOwnProperty;
    Object.extend({
        getFromPath: function(e, f) {
            if (typeof f == "string") {
                f = f.split(".")
            }
            for (var d = 0, c = f.length; d < c; d++) {
                if (a.call(e, f[d])) {
                    e = e[f[d]]
                } else {
                    return null
                }
            }
            return e
        },
        cleanValues: function(c, e) {
            e = e || b;
            for (var d in c) {
                if (!e(c[d])) {
                    delete c[d]
                }
            }
            return c
        },
        erase: function(c, d) {
            if (a.call(c, d)) {
                delete c[d]
            }
            return c
        },
        run: function(d) {
            var c = Array.slice(arguments, 1);
            for (var e in d) {
                if (d[e].apply) {
                    d[e].apply(d, c)
                }
            }
            return d
        }
    })
})();
(function() {
    var b = null,
        a = {},
        d = {};
    var c = function(f) {
        if (instanceOf(f, e.Set)) {
            return f
        } else {
            return a[f]
        }
    };
    var e = this.Locale = {
        define: function(f, j, h, i) {
            var g;
            if (instanceOf(f, e.Set)) {
                g = f.name;
                if (g) {
                    a[g] = f
                }
            } else {
                g = f;
                if (!a[g]) {
                    a[g] = new e.Set(g)
                }
                f = a[g]
            }
            if (j) {
                f.define(j, h, i)
            }
            if (!b) {
                b = f
            }
            return f
        },
        use: function(f) {
            f = c(f);
            if (f) {
                b = f;
                this.fireEvent("change", f)
            }
            return this
        },
        getCurrent: function() {
            return b
        },
        get: function(g, f) {
            return (b) ? b.get(g, f) : ""
        },
        inherit: function(f, g, h) {
            f = c(f);
            if (f) {
                f.inherit(g, h)
            }
            return this
        },
        list: function() {
            return Object.keys(a)
        }
    };
    Object.append(e, new Events);
    e.Set = new Class({
        sets: {},
        inherits: {
            locales: [],
            sets: {}
        },
        initialize: function(f) {
            this.name = f || ""
        },
        define: function(i, g, h) {
            var f = this.sets[i];
            if (!f) {
                f = {}
            }
            if (g) {
                if (typeOf(g) == "object") {
                    f = Object.merge(f, g)
                } else {
                    f[g] = h
                }
            }
            this.sets[i] = f;
            return this
        },
        get: function(r, j, q) {
            var p = Object.getFromPath(this.sets, r);
            if (p != null) {
                var m = typeOf(p);
                if (m == "function") {
                    p = p.apply(null, Array.convert(j))
                } else {
                    if (m == "object") {
                        p = Object.clone(p)
                    }
                }
                return p
            }
            var h = r.indexOf("."),
                o = h < 0 ? r : r.substr(0, h),
                k = (this.inherits.sets[o] || []).combine(this.inherits.locales).include("en-US");
            if (!q) {
                q = []
            }
            for (var g = 0, f = k.length; g < f; g++) {
                if (q.contains(k[g])) {
                    continue
                }
                q.include(k[g]);
                var n = a[k[g]];
                if (!n) {
                    continue
                }
                p = n.get(r, j, q);
                if (p != null) {
                    return p
                }
            }
            return ""
        },
        inherit: function(g, h) {
            g = Array.convert(g);
            if (h && !this.inherits.sets[h]) {
                this.inherits.sets[h] = []
            }
            var f = g.length;
            while (f--) {
                (h ? this.inherits.sets[h] : this.inherits.locales).unshift(g[f])
            }
            return this
        }
    })
})();
Locale.define("en-US", "Date", {
    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    months_abbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    days_abbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    dateOrder: ["month", "date", "year"],
    shortDate: "%m/%d/%Y",
    shortTime: "%I:%M%p",
    AM: "AM",
    PM: "PM",
    firstDayOfWeek: 0,
    ordinal: function(a) {
        return (a > 3 && a < 21) ? "th" : ["th", "st", "nd", "rd", "th"][Math.min(a % 10, 4)]
    },
    lessThanMinuteAgo: "less than a minute ago",
    minuteAgo: "about a minute ago",
    minutesAgo: "{delta} minutes ago",
    hourAgo: "about an hour ago",
    hoursAgo: "about {delta} hours ago",
    dayAgo: "1 day ago",
    daysAgo: "{delta} days ago",
    weekAgo: "1 week ago",
    weeksAgo: "{delta} weeks ago",
    monthAgo: "1 month ago",
    monthsAgo: "{delta} months ago",
    yearAgo: "1 year ago",
    yearsAgo: "{delta} years ago",
    lessThanMinuteUntil: "less than a minute from now",
    minuteUntil: "about a minute from now",
    minutesUntil: "{delta} minutes from now",
    hourUntil: "about an hour from now",
    hoursUntil: "about {delta} hours from now",
    dayUntil: "1 day from now",
    daysUntil: "{delta} days from now",
    weekUntil: "1 week from now",
    weeksUntil: "{delta} weeks from now",
    monthUntil: "1 month from now",
    monthsUntil: "{delta} months from now",
    yearUntil: "1 year from now",
    yearsUntil: "{delta} years from now"
});
(function() {
    var a = this.Date;
    var f = a.Methods = {
        ms: "Milliseconds",
        year: "FullYear",
        min: "Minutes",
        mo: "Month",
        sec: "Seconds",
        hr: "Hours"
    };
    ["Date", "Day", "FullYear", "Hours", "Milliseconds", "Minutes", "Month", "Seconds", "Time", "TimezoneOffset", "Week", "Timezone", "GMTOffset", "DayOfYear", "LastMonth", "LastDayOfMonth", "UTCDate", "UTCDay", "UTCFullYear", "AMPM", "Ordinal", "UTCHours", "UTCMilliseconds", "UTCMinutes", "UTCMonth", "UTCSeconds", "UTCMilliseconds"].each(function(s) {
        a.Methods[s.toLowerCase()] = s
    });
    var p = function(u, t, s) {
        if (t == 1) {
            return u
        }
        return u < Math.pow(10, t - 1) ? (s || "0") + p(u, t - 1, s) : u
    };
    a.implement({
        set: function(u, s) {
            u = u.toLowerCase();
            var t = f[u] && "set" + f[u];
            if (t && this[t]) {
                this[t](s)
            }
            return this
        }.overloadSetter(),
        get: function(t) {
            t = t.toLowerCase();
            var s = f[t] && "get" + f[t];
            if (s && this[s]) {
                return this[s]()
            }
            return null
        }.overloadGetter(),
        clone: function() {
            return new a(this.get("time"))
        },
        increment: function(s, u) {
            s = s || "day";
            u = u != null ? u : 1;
            switch (s) {
                case "year":
                    return this.increment("month", u * 12);
                case "month":
                    var t = this.get("date");
                    this.set("date", 1).set("mo", this.get("mo") + u);
                    return this.set("date", t.min(this.get("lastdayofmonth")));
                case "week":
                    return this.increment("day", u * 7);
                case "day":
                    return this.set("date", this.get("date") + u)
            }
            if (!a.units[s]) {
                throw new Error(s + " is not a supported interval")
            }
            return this.set("time", this.get("time") + u * a.units[s]())
        },
        decrement: function(s, t) {
            return this.increment(s, -1 * (t != null ? t : 1))
        },
        isLeapYear: function() {
            return a.isLeapYear(this.get("year"))
        },
        clearTime: function() {
            return this.set({
                hr: 0,
                min: 0,
                sec: 0,
                ms: 0
            })
        },
        diff: function(t, s) {
            if (typeOf(t) == "string") {
                t = a.parse(t)
            }
            return ((t - this) / a.units[s || "day"](3, 3)).round()
        },
        getLastDayOfMonth: function() {
            return a.daysInMonth(this.get("mo"), this.get("year"))
        },
        getDayOfYear: function() {
            return (a.UTC(this.get("year"), this.get("mo"), this.get("date") + 1) - a.UTC(this.get("year"), 0, 1)) / a.units.day()
        },
        setDay: function(t, s) {
            if (s == null) {
                s = a.getMsg("firstDayOfWeek");
                if (s === "") {
                    s = 1
                }
            }
            t = (7 + a.parseDay(t, true) - s) % 7;
            var u = (7 + this.get("day") - s) % 7;
            return this.increment("day", t - u)
        },
        getWeek: function(v) {
            if (v == null) {
                v = a.getMsg("firstDayOfWeek");
                if (v === "") {
                    v = 1
                }
            }
            var x = this,
                u = (7 + x.get("day") - v) % 7,
                t = 0,
                w;
            if (v == 1) {
                var y = x.get("month"),
                    s = x.get("date") - u;
                if (y == 11 && s > 28) {
                    return 1
                }
                if (y == 0 && s < -2) {
                    x = new a(x).decrement("day", u);
                    u = 0
                }
                w = new a(x.get("year"), 0, 1).get("day") || 7;
                if (w > 4) {
                    t = -7
                }
            } else {
                w = new a(x.get("year"), 0, 1).get("day")
            }
            t += x.get("dayofyear");
            t += 6 - u;
            t += (7 + w - v) % 7;
            return (t / 7)
        },
        getOrdinal: function(s) {
            return a.getMsg("ordinal", s || this.get("date"))
        },
        getTimezone: function() {
            return this.toString().replace(/^.*? ([A-Z]{3}).[0-9]{4}.*$/, "$1").replace(/^.*?\(([A-Z])[a-z]+ ([A-Z])[a-z]+ ([A-Z])[a-z]+\)$/, "$1$2$3")
        },
        getGMTOffset: function() {
            var s = this.get("timezoneOffset");
            return ((s > 0) ? "-" : "+") + p((s.abs() / 60).floor(), 2) + p(s % 60, 2)
        },
        setAMPM: function(s) {
            s = s.toUpperCase();
            var t = this.get("hr");
            if (t > 11 && s == "AM") {
                return this.decrement("hour", 12)
            } else {
                if (t < 12 && s == "PM") {
                    return this.increment("hour", 12)
                }
            }
            return this
        },
        getAMPM: function() {
            return (this.get("hr") < 12) ? "AM" : "PM"
        },
        parse: function(s) {
            this.set("time", a.parse(s));
            return this
        },
        isValid: function(s) {
            if (!s) {
                s = this
            }
            return typeOf(s) == "date" && !isNaN(s.valueOf())
        },
        format: function(s) {
            if (!this.isValid()) {
                return "invalid date"
            }
            if (!s) {
                s = "%x %X"
            }
            if (typeof s == "string") {
                s = g[s.toLowerCase()] || s
            }
            if (typeof s == "function") {
                return s(this)
            }
            var t = this;
            return s.replace(/%([a-z%])/gi, function(v, u) {
                switch (u) {
                    case "a":
                        return a.getMsg("days_abbr")[t.get("day")];
                    case "A":
                        return a.getMsg("days")[t.get("day")];
                    case "b":
                        return a.getMsg("months_abbr")[t.get("month")];
                    case "B":
                        return a.getMsg("months")[t.get("month")];
                    case "c":
                        return t.format("%a %b %d %H:%M:%S %Y");
                    case "d":
                        return p(t.get("date"), 2);
                    case "e":
                        return p(t.get("date"), 2, " ");
                    case "H":
                        return p(t.get("hr"), 2);
                    case "I":
                        return p((t.get("hr") % 12) || 12, 2);
                    case "j":
                        return p(t.get("dayofyear"), 3);
                    case "k":
                        return p(t.get("hr"), 2, " ");
                    case "l":
                        return p((t.get("hr") % 12) || 12, 2, " ");
                    case "L":
                        return p(t.get("ms"), 3);
                    case "m":
                        return p((t.get("mo") + 1), 2);
                    case "M":
                        return p(t.get("min"), 2);
                    case "o":
                        return t.get("ordinal");
                    case "p":
                        return a.getMsg(t.get("ampm"));
                    case "s":
                        return Math.round(t / 1000);
                    case "S":
                        return p(t.get("seconds"), 2);
                    case "T":
                        return t.format("%H:%M:%S");
                    case "U":
                        return p(t.get("week"), 2);
                    case "w":
                        return t.get("day");
                    case "x":
                        return t.format(a.getMsg("shortDate"));
                    case "X":
                        return t.format(a.getMsg("shortTime"));
                    case "y":
                        return t.get("year").toString().substr(2);
                    case "Y":
                        return t.get("year");
                    case "z":
                        return t.get("GMTOffset");
                    case "Z":
                        return t.get("Timezone")
                }
                return u
            })
        },
        toISOString: function() {
            return this.format("iso8601")
        }
    }).alias({
        toJSON: "toISOString",
        compare: "diff",
        strftime: "format"
    });
    var k = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        h = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    var g = {
        db: "%Y-%m-%d %H:%M:%S",
        compact: "%Y%m%dT%H%M%S",
        "short": "%d %b %H:%M",
        "long": "%B %d, %Y %H:%M",
        rfc822: function(s) {
            return k[s.get("day")] + s.format(", %d ") + h[s.get("month")] + s.format(" %Y %H:%M:%S %Z")
        },
        rfc2822: function(s) {
            return k[s.get("day")] + s.format(", %d ") + h[s.get("month")] + s.format(" %Y %H:%M:%S %z")
        },
        iso8601: function(s) {
            return (s.getUTCFullYear() + "-" + p(s.getUTCMonth() + 1, 2) + "-" + p(s.getUTCDate(), 2) + "T" + p(s.getUTCHours(), 2) + ":" + p(s.getUTCMinutes(), 2) + ":" + p(s.getUTCSeconds(), 2) + "." + p(s.getUTCMilliseconds(), 3) + "Z")
        }
    };
    var c = [],
        n = a.parse;
    var r = function(v, x, u) {
        var t = -1,
            w = a.getMsg(v + "s");
        switch (typeOf(x)) {
            case "object":
                t = w[x.get(v)];
                break;
            case "number":
                t = w[x];
                if (!t) {
                    throw new Error("Invalid " + v + " index: " + x)
                }
                break;
            case "string":
                var s = w.filter(function(y) {
                    return this.test(y)
                }, new RegExp("^" + x, "i"));
                if (!s.length) {
                    throw new Error("Invalid " + v + " string")
                }
                if (s.length > 1) {
                    throw new Error("Ambiguous " + v)
                }
                t = s[0]
        }
        return (u) ? w.indexOf(t) : t
    };
    var i = 1900,
        o = 70;
    a.extend({
        getMsg: function(t, s) {
            return Locale.get("Date." + t, s)
        },
        units: {
            ms: Function.convert(1),
            second: Function.convert(1000),
            minute: Function.convert(60000),
            hour: Function.convert(3600000),
            day: Function.convert(86400000),
            week: Function.convert(608400000),
            month: function(t, s) {
                var u = new a;
                return a.daysInMonth(t != null ? t : u.get("mo"), s != null ? s : u.get("year")) * 86400000
            },
            year: function(s) {
                s = s || new a().get("year");
                return a.isLeapYear(s) ? 31622400000 : 31536000000
            }
        },
        daysInMonth: function(t, s) {
            return [31, a.isLeapYear(s) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][t]
        },
        isLeapYear: function(s) {
            return ((s % 4 === 0) && (s % 100 !== 0)) || (s % 400 === 0)
        },
        parse: function(v) {
            var u = typeOf(v);
            if (u == "number") {
                return new a(v)
            }
            if (u != "string") {
                return v
            }
            v = v.clean();
            if (!v.length) {
                return null
            }
            var s;
            c.some(function(w) {
                var t = w.re.exec(v);
                return (t) ? (s = w.handler(t)) : false
            });
            if (!(s && s.isValid())) {
                s = new a(n(v));
                if (!(s && s.isValid())) {
                    s = new a(v.toInt())
                }
            }
            return s
        },
        parseDay: function(s, t) {
            return r("day", s, t)
        },
        parseMonth: function(t, s) {
            return r("month", t, s)
        },
        parseUTC: function(t) {
            var s = new a(t);
            var u = a.UTC(s.get("year"), s.get("mo"), s.get("date"), s.get("hr"), s.get("min"), s.get("sec"), s.get("ms"));
            return new a(u)
        },
        orderIndex: function(s) {
            return a.getMsg("dateOrder").indexOf(s) + 1
        },
        defineFormat: function(s, t) {
            g[s] = t;
            return this
        },
        defineParser: function(s) {
            c.push((s.re && s.handler) ? s : l(s));
            return this
        },
        defineParsers: function() {
            Array.flatten(arguments).each(a.defineParser);
            return this
        },
        define2DigitYearStart: function(s) {
            o = s % 100;
            i = s - o;
            return this
        }
    }).extend({
        defineFormats: a.defineFormat.overloadSetter()
    });
    var d = function(s) {
        return new RegExp("(?:" + a.getMsg(s).map(function(t) {
            return t.substr(0, 3)
        }).join("|") + ")[a-z]*")
    };
    var m = function(s) {
        switch (s) {
            case "T":
                return "%H:%M:%S";
            case "x":
                return ((a.orderIndex("month") == 1) ? "%m[-./]%d" : "%d[-./]%m") + "([-./]%y)?";
            case "X":
                return "%H([.:]%M)?([.:]%S([.:]%s)?)? ?%p? ?%z?"
        }
        return null
    };
    var j = {
        d: /[0-2]?[0-9]|3[01]/,
        H: /[01]?[0-9]|2[0-3]/,
        I: /0?[1-9]|1[0-2]/,
        M: /[0-5]?\d/,
        s: /\d+/,
        o: /[a-z]*/,
        p: /[ap]\.?m\.?/,
        y: /\d{2}|\d{4}/,
        Y: /\d{4}/,
        z: /Z|[+-]\d{2}(?::?\d{2})?/
    };
    j.m = j.I;
    j.S = j.M;
    var e;
    var b = function(s) {
        e = s;
        j.a = j.A = d("days");
        j.b = j.B = d("months");
        c.each(function(u, t) {
            if (u.format) {
                c[t] = l(u.format)
            }
        })
    };
    var l = function(u) {
        if (!e) {
            return {
                format: u
            }
        }
        var s = [];
        var t = (u.source || u).replace(/%([a-z])/gi, function(w, v) {
            return m(v) || w
        }).replace(/\((?!\?)/g, "(?:").replace(/ (?!\?|\*)/g, ",? ").replace(/%([a-z%])/gi, function(w, v) {
            var x = j[v];
            if (!x) {
                return v
            }
            s.push(v);
            return "(" + x.source + ")"
        }).replace(/\[a-z\]/gi, "[a-z\\u00c0-\\uffff;&]");
        return {
            format: u,
            re: new RegExp("^" + t + "$", "i"),
            handler: function(y) {
                y = y.slice(1).associate(s);
                var v = new a().clearTime(),
                    x = y.y || y.Y;
                if (x != null) {
                    q.call(v, "y", x)
                }
                if ("d" in y) {
                    q.call(v, "d", 1)
                }
                if ("m" in y || y.b || y.B) {
                    q.call(v, "m", 1)
                }
                for (var w in y) {
                    q.call(v, w, y[w])
                }
                return v
            }
        }
    };
    var q = function(s, t) {
        if (!t) {
            return this
        }
        switch (s) {
            case "a":
            case "A":
                return this.set("day", a.parseDay(t, true));
            case "b":
            case "B":
                return this.set("mo", a.parseMonth(t, true));
            case "d":
                return this.set("date", t);
            case "H":
            case "I":
                return this.set("hr", t);
            case "m":
                return this.set("mo", t - 1);
            case "M":
                return this.set("min", t);
            case "p":
                return this.set("ampm", t.replace(/\./g, ""));
            case "S":
                return this.set("sec", t);
            case "s":
                return this.set("ms", ("0." + t) * 1000);
            case "w":
                return this.set("day", t);
            case "Y":
                return this.set("year", t);
            case "y":
                t = +t;
                if (t < 100) {
                    t += i + (t < o ? 100 : 0)
                }
                return this.set("year", t);
            case "z":
                if (t == "Z") {
                    t = "+00"
                }
                var u = t.match(/([+-])(\d{2}):?(\d{2})?/);
                u = (u[1] + "1") * (u[2] * 60 + (+u[3] || 0)) + this.getTimezoneOffset();
                return this.set("time", this - u * 60000)
        }
        return this
    };
    a.defineParsers("%Y([-./]%m([-./]%d((T| )%X)?)?)?", "%Y%m%d(T%H(%M%S?)?)?", "%x( %X)?", "%d%o( %b( %Y)?)?( %X)?", "%b( %d%o)?( %Y)?( %X)?", "%Y %b( %d%o( %X)?)?", "%o %b %d %X %z %Y", "%T", "%H:%M( ?%p)?");
    Locale.addEvent("change", function(s) {
        if (Locale.get("Date")) {
            b(s)
        }
    }).fireEvent("change", Locale.getCurrent())
})();
Fx.Elements = new Class({
    Extends: Fx.CSS,
    initialize: function(b, a) {
        this.elements = this.subject = $$(b);
        this.parent(a)
    },
    compute: function(g, h, j) {
        var c = {};
        for (var d in g) {
            var a = g[d],
                e = h[d],
                f = c[d] = {};
            for (var b in a) {
                f[b] = this.parent(a[b], e[b], j)
            }
        }
        return c
    },
    set: function(b) {
        for (var c in b) {
            if (!this.elements[c]) {
                continue
            }
            var a = b[c];
            for (var d in a) {
                this.render(this.elements[c], d, a[d], this.options.unit)
            }
        }
        return this
    },
    start: function(c) {
        if (!this.check(c)) {
            return this
        }
        var h = {},
            j = {};
        for (var d in c) {
            if (!this.elements[d]) {
                continue
            }
            var f = c[d],
                a = h[d] = {},
                g = j[d] = {};
            for (var b in f) {
                var e = this.prepare(this.elements[d], b, f[b]);
                a[b] = e.from;
                g[b] = e.to
            }
        }
        return this.parent(h, j)
    }
});
Fx.Accordion = new Class({
    Extends: Fx.Elements,
    options: {
        fixedHeight: false,
        fixedWidth: false,
        display: 0,
        show: false,
        height: true,
        width: false,
        opacity: true,
        alwaysHide: false,
        trigger: "click",
        initialDisplayFx: true,
        resetHeight: true,
        keepOpen: false
    },
    initialize: function() {
        var g = function(h) {
            return h != null
        };
        var f = Array.link(arguments, {
            container: Type.isElement,
            options: Type.isObject,
            togglers: g,
            elements: g
        });
        this.parent(f.elements, f.options);
        var b = this.options,
            e = this.togglers = $$(f.togglers);
        this.previous = -1;
        this.internalChain = new Chain();
        if (b.alwaysHide) {
            this.options.link = "chain"
        }
        if (b.show || this.options.show === 0) {
            b.display = false;
            this.previous = b.show
        }
        if (b.start) {
            b.display = false;
            b.show = false
        }
        var d = this.effects = {};
        if (b.opacity) {
            d.opacity = "fullOpacity"
        }
        if (b.width) {
            d.width = b.fixedWidth ? "fullWidth" : "offsetWidth"
        }
        if (b.height) {
            d.height = b.fixedHeight ? "fullHeight" : "scrollHeight"
        }
        for (var c = 0, a = e.length; c < a; c++) {
            this.addSection(e[c], this.elements[c])
        }
        this.elements.each(function(j, h) {
            if (b.show === h) {
                this.fireEvent("active", [e[h], j])
            } else {
                for (var k in d) {
                    j.setStyle(k, 0)
                }
            }
        }, this);
        if (b.display || b.display === 0 || b.initialDisplayFx === false) {
            this.display(b.display, b.initialDisplayFx)
        }
        if (b.fixedHeight !== false) {
            b.resetHeight = false
        }
        this.addEvent("complete", this.internalChain.callChain.bind(this.internalChain))
    },
    addSection: function(g, d) {
        g = document.id(g);
        d = document.id(d);
        this.togglers.include(g);
        this.elements.include(d);
        var f = this.togglers,
            c = this.options,
            h = f.contains(g),
            a = f.indexOf(g),
            b = this.display.pass(a, this);
        g.store("accordion:display", b).addEvent(c.trigger, b);
        if (c.height) {
            d.setStyles({
                "padding-top": 0,
                "border-top": "none",
                "padding-bottom": 0,
                "border-bottom": "none"
            })
        }
        if (c.width) {
            d.setStyles({
                "padding-left": 0,
                "border-left": "none",
                "padding-right": 0,
                "border-right": "none"
            })
        }
        d.fullOpacity = 1;
        if (c.fixedWidth) {
            d.fullWidth = c.fixedWidth
        }
        if (c.fixedHeight) {
            d.fullHeight = c.fixedHeight
        }
        d.setStyle("overflow", "hidden");
        if (!h) {
            for (var e in this.effects) {
                d.setStyle(e, 0)
            }
        }
        return this
    },
    removeSection: function(f, b) {
        var e = this.togglers,
            a = e.indexOf(f),
            c = this.elements[a];
        var d = function() {
            e.erase(f);
            this.elements.erase(c);
            this.detach(f)
        }.bind(this);
        if (this.now == a || b != null) {
            this.display(b != null ? b : (a - 1 >= 0 ? a - 1 : 0)).chain(d)
        } else {
            d()
        }
        return this
    },
    detach: function(b) {
        var a = function(c) {
            c.removeEvent(this.options.trigger, c.retrieve("accordion:display"))
        }.bind(this);
        if (!b) {
            this.togglers.each(a)
        } else {
            a(b)
        }
        return this
    },
    display: function(h, c) {
        if (!this.check(h, c)) {
            return this
        }
        var f = {},
            a = this.elements,
            j = this.options,
            b = this.effects,
            g = j.keepOpen,
            i = j.alwaysHide;
        if (c == null) {
            c = true
        }
        if (typeOf(h) == "element") {
            h = a.indexOf(h)
        }
        if (h == this.current && !i && !g) {
            return this
        }
        if (j.resetHeight) {
            var e = a[this.current];
            if (e && !this.selfHidden) {
                for (var d in b) {
                    e.setStyle(d, e[b[d]])
                }
            }
        }
        if (this.timer && j.link == "chain") {
            return this
        }
        if (this.current != null) {
            this.previous = this.current
        }
        this.current = h;
        this.selfHidden = false;
        a.each(function(n, m) {
            f[m] = {};
            var l, k;
            if (!g || m == h) {
                if (m == h) {
                    k = (n.offsetHeight > 0 && j.height) || (n.offsetWidth > 0 && j.width)
                }
                if (m != h) {
                    l = true
                } else {
                    if ((i || g) && k) {
                        l = true;
                        this.selfHidden = true
                    }
                }
                this.fireEvent(l ? "background" : "active", [this.togglers[m], n]);
                for (var o in b) {
                    f[m][o] = l ? 0 : n[b[o]]
                }
                if (!c && !l && j.resetHeight) {
                    f[m].height = "auto"
                }
            }
        }, this);
        this.internalChain.clearChain();
        this.internalChain.chain(function() {
            if (j.resetHeight && !this.selfHidden) {
                var k = a[h];
                if (k) {
                    k.setStyle("height", "auto")
                }
            }
        }.bind(this));
        return c ? this.start(f) : this.set(f).internalChain.callChain()
    }
});
Fx.Move = new Class({
    Extends: Fx.Morph,
    options: {
        relativeTo: document.body,
        position: "center",
        edge: false,
        offset: {
            x: 0,
            y: 0
        }
    },
    start: function(a) {
        var b = this.element,
            c = b.getStyles("top", "left");
        if (c.top == "auto" || c.left == "auto") {
            b.setPosition(b.getPosition(b.getOffsetParent()))
        }
        return this.parent(b.position(Object.merge({}, this.options, a, {
            returnPos: true
        })))
    }
});
Element.Properties.move = {
    set: function(a) {
        this.get("move").cancel().setOptions(a);
        return this
    },
    get: function() {
        var a = this.retrieve("move");
        if (!a) {
            a = new Fx.Move(this, {
                link: "cancel"
            });
            this.store("move", a)
        }
        return a
    }
};
Element.implement({
    move: function(a) {
        this.get("move").start(a);
        return this
    }
});
(function() {
    Fx.Scroll = new Class({
        Extends: Fx,
        options: {
            offset: {
                x: 0,
                y: 0
            },
            wheelStops: true
        },
        initialize: function(c, b) {
            this.element = this.subject = document.id(c);
            this.parent(b);
            if (typeOf(this.element) != "element") {
                this.element = document.id(this.element.getDocument().body)
            }
            if (this.options.wheelStops) {
                var d = this.element,
                    e = this.cancel.pass(false, this);
                this.addEvent("start", function() {
                    d.addEvent("mousewheel", e)
                }, true);
                this.addEvent("complete", function() {
                    d.removeEvent("mousewheel", e)
                }, true)
            }
        },
        set: function() {
            var b = Array.flatten(arguments);
            this.element.scrollTo(b[0], b[1]);
            return this
        },
        compute: function(d, c, b) {
            return [0, 1].map(function(e) {
                return Fx.compute(d[e], c[e], b)
            })
        },
        start: function(c, d) {
            if (!this.check(c, d)) {
                return this
            }
            var b = this.element.getScroll();
            return this.parent([b.x, b.y], [c, d])
        },
        calculateScroll: function(g, f) {
            var d = this.element,
                b = d.getScrollSize(),
                h = d.getScroll(),
                j = d.getSize(),
                c = this.options.offset,
                i = {
                    x: g,
                    y: f
                };
            for (var e in i) {
                if (!i[e] && i[e] !== 0) {
                    i[e] = h[e]
                }
                if (typeOf(i[e]) != "number") {
                    i[e] = b[e] - j[e]
                }
                i[e] += c[e]
            }
            return [i.x, i.y]
        },
        toTop: function() {
            return this.start.apply(this, this.calculateScroll(false, 0))
        },
        toLeft: function() {
            return this.start.apply(this, this.calculateScroll(0, false))
        },
        toRight: function() {
            return this.start.apply(this, this.calculateScroll("right", false))
        },
        toBottom: function() {
            return this.start.apply(this, this.calculateScroll(false, "bottom"))
        },
        toElement: function(d, e) {
            e = e ? Array.convert(e) : ["x", "y"];
            var c = a(this.element) ? {
                x: 0,
                y: 0
            } : this.element.getScroll();
            var b = Object.map(document.id(d).getPosition(this.element), function(g, f) {
                return e.contains(f) ? g + c[f] : false
            });
            return this.start.apply(this, this.calculateScroll(b.x, b.y))
        },
        toElementEdge: function(d, g, e) {
            g = g ? Array.convert(g) : ["x", "y"];
            d = document.id(d);
            var i = {},
                f = d.getPosition(this.element),
                j = d.getSize(),
                h = this.element.getScroll(),
                b = this.element.getSize(),
                c = {
                    x: f.x + j.x,
                    y: f.y + j.y
                };
            ["x", "y"].each(function(k) {
                if (g.contains(k)) {
                    if (c[k] > h[k] + b[k]) {
                        i[k] = c[k] - b[k]
                    }
                    if (f[k] < h[k]) {
                        i[k] = f[k]
                    }
                }
                if (i[k] == null) {
                    i[k] = h[k]
                }
                if (e && e[k]) {
                    i[k] = i[k] + e[k]
                }
            }, this);
            if (i.x != h.x || i.y != h.y) {
                this.start(i.x, i.y)
            }
            return this
        },
        toElementCenter: function(e, f, h) {
            f = f ? Array.convert(f) : ["x", "y"];
            e = document.id(e);
            var i = {},
                c = e.getPosition(this.element),
                d = e.getSize(),
                b = this.element.getScroll(),
                g = this.element.getSize();
            ["x", "y"].each(function(j) {
                if (f.contains(j)) {
                    i[j] = c[j] - (g[j] - d[j]) / 2
                }
                if (i[j] == null) {
                    i[j] = b[j]
                }
                if (h && h[j]) {
                    i[j] = i[j] + h[j]
                }
            }, this);
            if (i.x != b.x || i.y != b.y) {
                this.start(i.x, i.y)
            }
            return this
        }
    });

    function a(b) {
        return (/^(?:body|html)$/i).test(b.tagName)
    }
})();
Fx.Slide = new Class({
    Extends: Fx,
    options: {
        mode: "vertical",
        wrapper: false,
        hideOverflow: true,
        resetHeight: false
    },
    initialize: function(b, a) {
        b = this.element = this.subject = document.id(b);
        this.parent(a);
        a = this.options;
        var d = b.retrieve("wrapper"),
            c = b.getStyles("margin", "position", "overflow");
        if (a.hideOverflow) {
            c = Object.append(c, {
                overflow: "hidden"
            })
        }
        if (a.wrapper) {
            d = document.id(a.wrapper).setStyles(c)
        }
        if (!d) {
            d = new Element("div", {
                styles: c
            }).wraps(b)
        }
        b.store("wrapper", d).setStyle("margin", 0);
        if (b.getStyle("overflow") == "visible") {
            b.setStyle("overflow", "hidden")
        }
        this.now = [];
        this.open = true;
        this.wrapper = d;
        this.addEvent("complete", function() {
            this.open = (d["offset" + this.layout.capitalize()] != 0);
            if (this.open && this.options.resetHeight) {
                d.setStyle("height", "")
            }
        }, true)
    },
    vertical: function() {
        this.margin = "margin-top";
        this.layout = "height";
        this.offset = this.element.offsetHeight
    },
    horizontal: function() {
        this.margin = "margin-left";
        this.layout = "width";
        this.offset = this.element.offsetWidth
    },
    set: function(a) {
        this.element.setStyle(this.margin, a[0]);
        this.wrapper.setStyle(this.layout, a[1]);
        return this
    },
    compute: function(c, b, a) {
        return [0, 1].map(function(d) {
            return Fx.compute(c[d], b[d], a)
        })
    },
    start: function(b, e) {
        if (!this.check(b, e)) {
            return this
        }
        this[e || this.options.mode]();
        var d = this.element.getStyle(this.margin).toInt(),
            c = this.wrapper.getStyle(this.layout).toInt(),
            a = [
                [d, c],
                [0, this.offset]
            ],
            g = [
                [d, c],
                [-this.offset, 0]
            ],
            f;
        switch (b) {
            case "in":
                f = a;
                break;
            case "out":
                f = g;
                break;
            case "toggle":
                f = (c == 0) ? a : g
        }
        return this.parent(f[0], f[1])
    },
    slideIn: function(a) {
        return this.start("in", a)
    },
    slideOut: function(a) {
        return this.start("out", a)
    },
    hide: function(a) {
        this[a || this.options.mode]();
        this.open = false;
        return this.set([-this.offset, 0])
    },
    show: function(a) {
        this[a || this.options.mode]();
        this.open = true;
        return this.set([0, this.offset])
    },
    toggle: function(a) {
        return this.start("toggle", a)
    }
});
Element.Properties.slide = {
    set: function(a) {
        this.get("slide").cancel().setOptions(a);
        return this
    },
    get: function() {
        var a = this.retrieve("slide");
        if (!a) {
            a = new Fx.Slide(this, {
                link: "cancel"
            });
            this.store("slide", a)
        }
        return a
    }
};
Element.implement({
    slide: function(d, e) {
        d = d || "toggle";
        var b = this.get("slide"),
            a;
        switch (d) {
            case "hide":
                b.hide(e);
                break;
            case "show":
                b.show(e);
                break;
            case "toggle":
                var c = this.retrieve("slide:flag", b.open);
                b[c ? "slideOut" : "slideIn"](e);
                this.store("slide:flag", !c);
                a = true;
                break;
            default:
                b.start(d, e)
        }
        if (!a) {
            this.eliminate("slide:flag")
        }
        return this
    }
});
Fx.SmoothScroll = new Class({
    Extends: Fx.Scroll,
    options: {
        axes: ["x", "y"]
    },
    initialize: function(c, d) {
        d = d || document;
        this.doc = d.getDocument();
        this.parent(this.doc, c);
        var e = d.getWindow(),
            a = e.location.href.match(/^[^#]*/)[0] + "#",
            b = $$(this.options.links || this.doc.links);
        b.each(function(g) {
            if (g.href.indexOf(a) != 0) {
                return
            }
            var f = g.href.substr(a.length);
            if (f) {
                this.useLink(g, f)
            }
        }, this);
        this.addEvent("complete", function() {
            e.location.hash = this.anchor;
            this.element.scrollTo(this.to[0], this.to[1])
        }, true)
    },
    useLink: function(b, a) {
        b.addEvent("click", function(d) {
            var c = document.id(a) || this.doc.getElement("a[name=" + a + "]");
            if (!c) {
                return
            }
            d.preventDefault();
            this.toElement(c, this.options.axes).chain(function() {
                this.fireEvent("scrolledTo", [b, c])
            }.bind(this));
            this.anchor = a
        }.bind(this));
        return this
    }
});
Locale.define("en-US", "Number", {
    decimal: ".",
    group: ",",
    currency: {
        prefix: "$ "
    }
});
Request.JSONP = new Class({
    Implements: [Chain, Events, Options],
    options: {
        onRequest: function(a) {
            if (this.options.log && window.console && console.log) {
                console.log("JSONP retrieving script with url:" + a)
            }
        },
        onError: function(a) {
            if (this.options.log && window.console && console.warn) {
                console.warn("JSONP " + a + " will fail in Internet Explorer, which enforces a 2083 bytes length limit on URIs")
            }
        },
        url: "",
        callbackKey: "callback",
        injectScript: document.head,
        data: "",
        link: "ignore",
        timeout: 0,
        log: false
    },
    initialize: function(a) {
        this.setOptions(a)
    },
    send: function(c) {
        if (!Request.prototype.check.call(this, c)) {
            return this
        }
        this.running = true;
        var e = typeOf(c);
        if (e == "string" || e == "element") {
            c = {
                data: c
            }
        }
        c = Object.merge(this.options, c || {});
        var f = c.data;
        switch (typeOf(f)) {
            case "element":
                f = document.id(f).toQueryString();
                break;
            case "object":
            case "hash":
                f = Object.toQueryString(f)
        }
        var b = this.index = Request.JSONP.counter++,
            d = "request_" + b;
        var g = c.url + (c.url.test("\\?") ? "&" : "?") + (c.callbackKey) + "=Request.JSONP.request_map.request_" + b + (f ? "&" + f : "");
        if (g.length > 2083) {
            this.fireEvent("error", g)
        }
        Request.JSONP.request_map[d] = function() {
            delete Request.JSONP.request_map[d];
            this.success(arguments, b)
        }.bind(this);
        var a = this.getScript(g).inject(c.injectScript);
        this.fireEvent("request", [g, a]);
        if (c.timeout) {
            this.timeout.delay(c.timeout, this)
        }
        return this
    },
    getScript: function(a) {
        if (!this.script) {
            this.script = new Element("script", {
                type: "text/javascript",
                async: true,
                src: a
            })
        }
        return this.script
    },
    success: function(a) {
        if (!this.running) {
            return
        }
        this.clear().fireEvent("complete", a).fireEvent("success", a).callChain()
    },
    cancel: function() {
        if (this.running) {
            this.clear().fireEvent("cancel")
        }
        return this
    },
    isRunning: function() {
        return !!this.running
    },
    clear: function() {
        this.running = false;
        if (this.script) {
            this.script.destroy();
            this.script = null
        }
        return this
    },
    timeout: function() {
        if (this.running) {
            this.running = false;
            this.fireEvent("timeout", [this.script.get("src"), this.script]).fireEvent("failure").cancel()
        }
        return this
    }
});
Request.JSONP.counter = 0;
Request.JSONP.request_map = {};
Request.implement({
    options: {
        initialDelay: 5000,
        delay: 5000,
        limit: 60000
    },
    startTimer: function(b) {
        var a = function() {
            if (!this.running) {
                this.send({
                    data: b
                })
            }
        };
        this.lastDelay = this.options.initialDelay;
        this.timer = a.delay(this.lastDelay, this);
        this.completeCheck = function(c) {
            clearTimeout(this.timer);
            this.lastDelay = (c) ? this.options.delay : (this.lastDelay + this.options.delay).min(this.options.limit);
            this.timer = a.delay(this.lastDelay, this)
        };
        return this.addEvent("complete", this.completeCheck)
    },
    stopTimer: function() {
        clearTimeout(this.timer);
        return this.removeEvent("complete", this.completeCheck)
    }
});
(function(a) {
    Array.implement({
        min: function() {
            return Math.min.apply(null, this)
        },
        max: function() {
            return Math.max.apply(null, this)
        },
        average: function() {
            return this.length ? this.sum() / this.length : 0
        },
        sum: function() {
            var b = 0,
                c = this.length;
            if (c) {
                while (c--) {
                    if (this[c] != null) {
                        b += parseFloat(this[c])
                    }
                }
            }
            return b
        },
        unique: function() {
            return [].combine(this)
        },
        shuffle: function() {
            for (var c = this.length; c && --c;) {
                var b = this[c],
                    d = Math.floor(Math.random() * (c + 1));
                this[c] = this[d];
                this[d] = b
            }
            return this
        },
        reduce: function(d, e) {
            for (var c = 0, b = this.length; c < b; c++) {
                if (c in this) {
                    e = e === a ? this[c] : d.call(null, e, this[c], c, this)
                }
            }
            return e
        },
        reduceRight: function(c, d) {
            var b = this.length;
            while (b--) {
                if (b in this) {
                    d = d === a ? this[b] : c.call(null, d, this[b], b, this)
                }
            }
            return d
        },
        pluck: function(b) {
            return this.map(function(c) {
                return c[b]
            })
        }
    })
})();
Date.implement({
    timeDiffInWords: function(a) {
        return Date.distanceOfTimeInWords(this, a || new Date)
    },
    timeDiff: function(f, c) {
        if (f == null) {
            f = new Date
        }
        var h = ((f - this) / 1000).floor().abs();
        var e = [],
            a = [60, 60, 24, 365, 0],
            d = ["s", "m", "h", "d", "y"],
            g, b;
        for (var i = 0; i < a.length; i++) {
            if (i && !h) {
                break
            }
            g = h;
            if ((b = a[i])) {
                g = (h % b);
                h = (h / b).floor()
            }
            e.unshift(g + (d[i] || ""))
        }
        return e.join(c || ":")
    }
}).extend({
    distanceOfTimeInWords: function(b, a) {
        return Date.getTimePhrase(((a - b) / 1000).toInt())
    },
    getTimePhrase: function(f) {
        var d = (f < 0) ? "Until" : "Ago";
        if (f < 0) {
            f *= -1
        }
        var b = {
            minute: 60,
            hour: 60,
            day: 24,
            week: 7,
            month: 52 / 12,
            year: 12,
            eon: Infinity
        };
        var e = "lessThanMinute";
        for (var c in b) {
            var a = b[c];
            if (f < 1.5 * a) {
                if (f > 0.75 * a) {
                    e = c
                }
                break
            }
            f /= a;
            e = c + "s"
        }
        f = f.round();
        return Date.getMsg(e + d, f).substitute({
            delta: f
        })
    }
}).defineParsers({
    re: /^(?:tod|tom|yes)/i,
    handler: function(a) {
        var b = new Date().clearTime();
        switch (a[0]) {
            case "tom":
                return b.increment();
            case "yes":
                return b.decrement();
            default:
                return b
        }
    }
}, {
    re: /^(next|last) ([a-z]+)$/i,
    handler: function(e) {
        var f = new Date().clearTime();
        var b = f.getDay();
        var c = Date.parseDay(e[2], true);
        var a = c - b;
        if (c <= b) {
            a += 7
        }
        if (e[1] == "last") {
            a -= 7
        }
        return f.set("date", f.getDate() + a)
    }
}).alias("timeAgoInWords", "timeDiffInWords");
(function() {
    if (this.Hash) {
        return
    }
    var a = this.Hash = new Type("Hash", function(b) {
        if (typeOf(b) == "hash") {
            b = Object.clone(b.getClean())
        }
        for (var c in b) {
            this[c] = b[c]
        }
        return this
    });
    this.$H = function(b) {
        return new a(b)
    };
    a.implement({
        forEach: function(b, c) {
            Object.forEach(this, b, c)
        },
        getClean: function() {
            var c = {};
            for (var b in this) {
                if (this.hasOwnProperty(b)) {
                    c[b] = this[b]
                }
            }
            return c
        },
        getLength: function() {
            var c = 0;
            for (var b in this) {
                if (this.hasOwnProperty(b)) {
                    c++
                }
            }
            return c
        }
    });
    a.alias("each", "forEach");
    a.implement({
        has: Object.prototype.hasOwnProperty,
        keyOf: function(b) {
            return Object.keyOf(this, b)
        },
        hasValue: function(b) {
            return Object.contains(this, b)
        },
        extend: function(b) {
            a.each(b || {}, function(d, c) {
                a.set(this, c, d)
            }, this);
            return this
        },
        combine: function(b) {
            a.each(b || {}, function(d, c) {
                a.include(this, c, d)
            }, this);
            return this
        },
        erase: function(b) {
            if (this.hasOwnProperty(b)) {
                delete this[b]
            }
            return this
        },
        get: function(b) {
            return (this.hasOwnProperty(b)) ? this[b] : null
        },
        set: function(b, c) {
            if (!this[b] || this.hasOwnProperty(b)) {
                this[b] = c
            }
            return this
        },
        empty: function() {
            a.each(this, function(c, b) {
                delete this[b]
            }, this);
            return this
        },
        include: function(b, c) {
            if (this[b] == undefined) {
                this[b] = c
            }
            return this
        },
        map: function(b, c) {
            return new a(Object.map(this, b, c))
        },
        filter: function(b, c) {
            return new a(Object.filter(this, b, c))
        },
        every: function(b, c) {
            return Object.every(this, b, c)
        },
        some: function(b, c) {
            return Object.some(this, b, c)
        },
        getKeys: function() {
            return Object.keys(this)
        },
        getValues: function() {
            return Object.values(this)
        },
        toQueryString: function(b) {
            return Object.toQueryString(this, b)
        }
    });
    a.alias({
        indexOf: "keyOf",
        contains: "hasValue"
    })
})();
Hash.implement({
    getFromPath: function(a) {
        return Object.getFromPath(this, a)
    },
    cleanValues: function(a) {
        return new Hash(Object.cleanValues(this, a))
    },
    run: function() {
        Object.run(arguments)
    }
});
Number.implement({
    format: function(q) {
        var n = this;
        q = q ? Object.clone(q) : {};
        var a = function(i) {
            if (q[i] != null) {
                return q[i]
            }
            return Locale.get("Number." + i)
        };
        var f = n < 0,
            h = a("decimal"),
            k = a("precision"),
            o = a("group"),
            c = a("decimals");
        if (f) {
            var e = a("negative") || {};
            if (e.prefix == null && e.suffix == null) {
                e.prefix = "-"
            }["prefix", "suffix"].each(function(i) {
                if (e[i]) {
                    q[i] = a(i) + e[i]
                }
            });
            n = -n
        }
        var l = a("prefix"),
            p = a("suffix");
        if (c !== "" && c >= 0 && c <= 20) {
            n = n.toFixed(c)
        }
        if (k >= 1 && k <= 21) {
            n = (+n).toPrecision(k)
        }
        n += "";
        var m;
        if (a("scientific") === false && n.indexOf("e") > -1) {
            var j = n.split("e"),
                b = +j[1];
            n = j[0].replace(".", "");
            if (b < 0) {
                b = -b - 1;
                m = j[0].indexOf(".");
                if (m > -1) {
                    b -= m - 1
                }
                while (b--) {
                    n = "0" + n
                }
                n = "0." + n
            } else {
                m = j[0].lastIndexOf(".");
                if (m > -1) {
                    b -= j[0].length - m - 1
                }
                while (b--) {
                    n += "0"
                }
            }
        }
        if (h != ".") {
            n = n.replace(".", h)
        }
        if (o) {
            m = n.lastIndexOf(h);
            m = (m > -1) ? m : n.length;
            var d = n.substring(m),
                g = m;
            while (g--) {
                if ((m - g - 1) % 3 == 0 && g != (m - 1)) {
                    d = o + d
                }
                d = n.charAt(g) + d
            }
            n = d
        }
        if (l) {
            n = l + n
        }
        if (p) {
            n += p
        }
        return n
    },
    formatCurrency: function(b) {
        var a = Locale.get("Number.currency") || {};
        if (a.scientific == null) {
            a.scientific = false
        }
        a.decimals = b != null ? b : (a.decimals == null ? 2 : a.decimals);
        return this.format(a)
    },
    formatPercentage: function(b) {
        var a = Locale.get("Number.percentage") || {};
        if (a.suffix == null) {
            a.suffix = "%"
        }
        a.decimals = b != null ? b : (a.decimals == null ? 2 : a.decimals);
        return this.format(a)
    }
});
(function() {
    var b = function() {
        return this.get("value")
    };
    var a = this.URI = new Class({
        Implements: Options,
        options: {},
        regex: /^(?:(\w+):)?(?:\/\/(?:(?:([^:@\/]*):?([^:@\/]*))?@)?(\[[A-Fa-f0-9:]+\]|[^:\/?#]*)(?::(\d*))?)?(\.\.?$|(?:[^?#\/]*\/)*)([^?#]*)(?:\?([^#]*))?(?:#(.*))?/,
        parts: ["scheme", "user", "password", "host", "port", "directory", "file", "query", "fragment"],
        schemes: {
            http: 80,
            https: 443,
            ftp: 21,
            rtsp: 554,
            mms: 1755,
            file: 0
        },
        initialize: function(d, c) {
            this.setOptions(c);
            var e = this.options.base || a.base;
            if (!d) {
                d = e
            }
            if (d && d.parsed) {
                this.parsed = Object.clone(d.parsed)
            } else {
                this.set("value", d.href || d.toString(), e ? new a(e) : false)
            }
        },
        parse: function(e, d) {
            var c = e.match(this.regex);
            if (!c) {
                return false
            }
            c.shift();
            return this.merge(c.associate(this.parts), d)
        },
        merge: function(d, c) {
            if ((!d || !d.scheme) && (!c || !c.scheme)) {
                return false
            }
            if (c) {
                this.parts.every(function(e) {
                    if (d[e]) {
                        return false
                    }
                    d[e] = c[e] || "";
                    return true
                })
            }
            d.port = d.port || this.schemes[d.scheme.toLowerCase()];
            d.directory = d.directory ? this.parseDirectory(d.directory, c ? c.directory : "") : "/";
            return d
        },
        parseDirectory: function(d, e) {
            d = (d.substr(0, 1) == "/" ? "" : (e || "/")) + d;
            if (!d.test(a.regs.directoryDot)) {
                return d
            }
            var c = [];
            d.replace(a.regs.endSlash, "").split("/").each(function(f) {
                if (f == ".." && c.length > 0) {
                    c.pop()
                } else {
                    if (f != ".") {
                        c.push(f)
                    }
                }
            });
            return c.join("/") + "/"
        },
        combine: function(c) {
            return c.value || c.scheme + "://" + (c.user ? c.user + (c.password ? ":" + c.password : "") + "@" : "") + (c.host || "") + (c.port && c.port != this.schemes[c.scheme] ? ":" + c.port : "") + (c.directory || "/") + (c.file || "") + (c.query ? "?" + c.query : "") + (c.fragment ? "#" + c.fragment : "")
        },
        set: function(d, f, e) {
            if (d == "value") {
                var c = f.match(a.regs.scheme);
                if (c) {
                    c = c[1]
                }
                if (c && this.schemes[c.toLowerCase()] == null) {
                    this.parsed = {
                        scheme: c,
                        value: f
                    }
                } else {
                    this.parsed = this.parse(f, (e || this).parsed) || (c ? {
                        scheme: c,
                        value: f
                    } : {
                        value: f
                    })
                }
            } else {
                if (d == "data") {
                    this.setData(f)
                } else {
                    this.parsed[d] = f
                }
            }
            return this
        },
        get: function(c, d) {
            switch (c) {
                case "value":
                    return this.combine(this.parsed, d ? d.parsed : false);
                case "data":
                    return this.getData()
            }
            return this.parsed[c] || ""
        },
        go: function() {
            document.location.href = this.toString()
        },
        toURI: function() {
            return this
        },
        getData: function(e, d) {
            var c = this.get(d || "query");
            if (!(c || c === 0)) {
                return e ? null : {}
            }
            var f = c.parseQueryString();
            return e ? f[e] : f
        },
        setData: function(c, f, d) {
            if (typeof c == "string") {
                var e = this.getData();
                e[arguments[0]] = arguments[1];
                c = e
            } else {
                if (f) {
                    c = Object.merge(this.getData(null, d), c)
                }
            }
            return this.set(d || "query", Object.toQueryString(c))
        },
        clearData: function(c) {
            return this.set(c || "query", "")
        },
        toString: b,
        valueOf: b
    });
    a.regs = {
        endSlash: /\/$/,
        scheme: /^(\w+):/,
        directoryDot: /\.\/|\.$/
    };
    a.base = new a(Array.convert(document.getElements("base[href]", true)).getLast(), {
        base: document.location
    });
    String.implement({
        toURI: function(c) {
            return new a(this, c)
        }
    })
})();
URI = Class.refactor(URI, {
    combine: function(f, e) {
        if (!e || f.scheme != e.scheme || f.host != e.host || f.port != e.port) {
            return this.previous.apply(this, arguments)
        }
        var a = f.file + (f.query ? "?" + f.query : "") + (f.fragment ? "#" + f.fragment : "");
        if (!e.directory) {
            return (f.directory || (f.file ? "" : "./")) + a
        }
        var d = e.directory.split("/"),
            c = f.directory.split("/"),
            g = "",
            h;
        var b = 0;
        for (h = 0; h < d.length && h < c.length && d[h] == c[h]; h++) {}
        for (b = 0; b < d.length - h - 1; b++) {
            g += "../"
        }
        for (b = h; b < c.length - 1; b++) {
            g += c[b] + "/"
        }
        return (g || (f.file ? "" : "./")) + a
    },
    toAbsolute: function(a) {
        a = new URI(a);
        if (a) {
            a.set("directory", "").set("file", "")
        }
        return this.toRelative(a)
    },
    toRelative: function(a) {
        return this.get("value", new URI(a))
    }
});
(function() {
    var a = this.Asset = {
        javascript: function(e, c) {
            if (!c) {
                c = {}
            }
            var b = new Element("script", {
                    src: e,
                    type: "text/javascript"
                }),
                f = c.document || document,
                d = c.onload || c.onLoad;
            delete c.onload;
            delete c.onLoad;
            delete c.document;
            if (d) {
                if (!b.addEventListener) {
                    b.addEvent("readystatechange", function() {
                        if (["loaded", "complete"].contains(this.readyState)) {
                            d.call(this)
                        }
                    })
                } else {
                    b.addEvent("load", d)
                }
            }
            return b.set(c).inject(f.head)
        },
        css: function(b, e) {
            if (!e) {
                e = {}
            }
            var j = e.onload || e.onLoad,
                i = e.document || document,
                g = e.timeout || 3000;
            ["onload", "onLoad", "document"].each(function(k) {
                delete e[k]
            });
            var h = new Element("link", {
                type: "text/css",
                rel: "stylesheet",
                media: "screen",
                href: b
            }).setProperties(e).inject(i.head);
            if (j) {
                var d = false,
                    f = 0;
                var c = function() {
                    var n = document.styleSheets;
                    for (var m = 0; m < n.length; m++) {
                        var l = n[m];
                        var k = l.ownerNode ? l.ownerNode : l.owningElement;
                        if (k && k == h) {
                            d = true;
                            return j.call(h)
                        }
                    }
                    f++;
                    if (!d && f < g / 50) {
                        return setTimeout(c, 50)
                    }
                };
                setTimeout(c, 0)
            }
            return h
        },
        image: function(d, c) {
            if (!c) {
                c = {}
            }
            var e = new Image(),
                b = document.id(e) || new Element("img");
            ["load", "abort", "error"].each(function(f) {
                var h = "on" + f,
                    g = "on" + f.capitalize(),
                    i = c[h] || c[g] || function() {};
                delete c[g];
                delete c[h];
                e[h] = function() {
                    if (!e) {
                        return
                    }
                    if (!b.parentNode) {
                        b.width = e.width;
                        b.height = e.height
                    }
                    e = e.onload = e.onabort = e.onerror = null;
                    i.delay(1, b, b);
                    b.fireEvent(f, b, 1)
                }
            });
            e.src = b.src = d;
            if (e && e.complete) {
                e.onload.delay(1)
            }
            return b.set(c)
        },
        images: function(d, c) {
            d = Array.convert(d);
            var e = function() {},
                b = 0;
            c = Object.merge({
                onComplete: e,
                onProgress: e,
                onError: e,
                properties: {}
            }, c);
            return new Elements(d.map(function(g, f) {
                return a.image(g, Object.append(c.properties, {
                    onload: function() {
                        b++;
                        c.onProgress.call(this, b, f, g);
                        if (b == d.length) {
                            c.onComplete()
                        }
                    },
                    onerror: function() {
                        b++;
                        c.onError.call(this, b, f, g);
                        if (b == d.length) {
                            c.onComplete()
                        }
                    }
                }))
            }))
        }
    }
})();
(function() {
    var a = this.Color = new Type("Color", function(c, d) {
        if (arguments.length >= 3) {
            d = "rgb";
            c = Array.slice(arguments, 0, 3)
        } else {
            if (typeof c == "string") {
                if (c.match(/rgb/)) {
                    c = c.rgbToHex().hexToRgb(true)
                } else {
                    if (c.match(/hsb/)) {
                        c = c.hsbToRgb()
                    } else {
                        c = c.hexToRgb(true)
                    }
                }
            }
        }
        d = d || "rgb";
        switch (d) {
            case "hsb":
                var b = c;
                c = c.hsbToRgb();
                c.hsb = b;
                break;
            case "hex":
                c = c.hexToRgb(true);
                break
        }
        c.rgb = c.slice(0, 3);
        c.hsb = c.hsb || c.rgbToHsb();
        c.hex = c.rgbToHex();
        return Object.append(c, this)
    });
    a.implement({
        mix: function() {
            var b = Array.slice(arguments);
            var d = (typeOf(b.getLast()) == "number") ? b.pop() : 50;
            var c = this.slice();
            b.each(function(e) {
                e = new a(e);
                for (var f = 0; f < 3; f++) {
                    c[f] = Math.round((c[f] / 100 * (100 - d)) + (e[f] / 100 * d))
                }
            });
            return new a(c, "rgb")
        },
        invert: function() {
            return new a(this.map(function(b) {
                return 255 - b
            }))
        },
        setHue: function(b) {
            return new a([b, this.hsb[1], this.hsb[2]], "hsb")
        },
        setSaturation: function(b) {
            return new a([this.hsb[0], b, this.hsb[2]], "hsb")
        },
        setBrightness: function(b) {
            return new a([this.hsb[0], this.hsb[1], b], "hsb")
        }
    });
    this.$RGB = function(e, d, c) {
        return new a([e, d, c], "rgb")
    };
    this.$HSB = function(e, d, c) {
        return new a([e, d, c], "hsb")
    };
    this.$HEX = function(b) {
        return new a(b, "hex")
    };
    Array.implement({
        rgbToHsb: function() {
            var c = this[0],
                d = this[1],
                k = this[2],
                h = 0,
                j = Math.max(c, d, k),
                f = Math.min(c, d, k),
                l = j - f,
                i = j / 255,
                g = (j != 0) ? l / j : 0;
            if (g != 0) {
                var e = (j - c) / l;
                var b = (j - d) / l;
                var m = (j - k) / l;
                if (c == j) {
                    h = m - b
                } else {
                    if (d == j) {
                        h = 2 + e - m
                    } else {
                        h = 4 + b - e
                    }
                }
                h /= 6;
                if (h < 0) {
                    h++
                }
            }
            return [Math.round(h * 360), Math.round(g * 100), Math.round(i * 100)]
        },
        hsbToRgb: function() {
            var d = Math.round(this[2] / 100 * 255);
            if (this[1] == 0) {
                return [d, d, d]
            } else {
                var b = this[0] % 360;
                var g = b % 60;
                var h = Math.round((this[2] * (100 - this[1])) / 10000 * 255);
                var e = Math.round((this[2] * (6000 - this[1] * g)) / 600000 * 255);
                var c = Math.round((this[2] * (6000 - this[1] * (60 - g))) / 600000 * 255);
                switch (Math.floor(b / 60)) {
                    case 0:
                        return [d, c, h];
                    case 1:
                        return [e, d, h];
                    case 2:
                        return [h, d, c];
                    case 3:
                        return [h, e, d];
                    case 4:
                        return [c, h, d];
                    case 5:
                        return [d, h, e]
                }
            }
            return false
        }
    });
    String.implement({
        rgbToHsb: function() {
            var b = this.match(/\d{1,3}/g);
            return (b) ? b.rgbToHsb() : null
        },
        hsbToRgb: function() {
            var b = this.match(/\d{1,3}/g);
            return (b) ? b.hsbToRgb() : null
        }
    })
})();
Hash.Cookie = new Class({
    Extends: Cookie,
    options: {
        autoSave: true
    },
    initialize: function(b, a) {
        this.parent(b, a);
        this.load()
    },
    save: function() {
        var a = JSON.encode(this.hash);
        if (!a || a.length > 4096) {
            return false
        }
        if (a == "{}") {
            this.dispose()
        } else {
            this.write(a)
        }
        return true
    },
    load: function() {
        this.hash = new Hash(JSON.decode(this.read(), true));
        return this
    }
});
Hash.each(Hash.prototype, function(b, a) {
    if (typeof b == "function") {
        Hash.Cookie.implement(a, function() {
            var c = b.apply(this.hash, arguments);
            if (this.options.autoSave) {
                this.save()
            }
            return c
        })
    }
});
Browser = Object.merge({
    getScrollBarWidth: function() {
        if (this._scrollBarWidth) {
            return this._scrollBarWidth;
        }
        var inner = new Element('p').setStyles({
            'width': '100%',
            'height': '200px'
        });
        var outer = new Element('div').setStyles({
            position: 'absolute',
            top: '-999px',
            left: '-999px',
            visibility: 'hidden',
            width: '200px',
            height: '150px',
            overflow: 'hidden'
        }).adopt(inner).inject(document.body);
        var w1 = inner.offsetWidth;
        outer.setStyle('overflow', 'scroll');
        var w2 = inner.offsetWidth;
        if (w1 == w2) w2 = outer.clientWidth;
        outer.destroy();
        this._scrollBarWidth = w1 - w2;
        return this._scrollBarWidth;
    },
    redraw: function() {
        new Element('div').inject(document.body).destroy();
    }
}, Browser);
Array.implement({
    inject: function(added, current, where) {
        var pos = this.indexOf(current) + (where == 'before' ? 0 : 1);
        for (var i = this.length - 1; i >= pos; i--) {
            this[i + 1] = this[i];
        }
        this[pos] = added;
        return this;
    }
});
Element.implement({
    getRelativeCoordinates: function(relative) {
        var offset = this.getOffsets(),
            size = this.getSize();
        var _position = {
            x: offset.x,
            y: offset.y
        };
        var relativePosition = (relative && (relative = document.id(relative))) ? relative.getOffsets() : {
            x: 0,
            y: 0
        };
        var position = {
            x: _position.x - relativePosition.x,
            y: _position.y - relativePosition.y
        };
        var obj = {
            left: position.x,
            top: position.y,
            width: size.x,
            height: size.y
        };
        obj.right = obj.left + obj.width;
        obj.bottom = obj.top + obj.height;
        return obj;
    }
});
Fx.ExtSlide = new Class({
    Extends: Fx.Slide,
    options: {
        direction: null,
        onStep: function(now) {}
    },
    step: function() {
        this.parent.apply(this, arguments);
        this.fireEvent('step', [this.now]);
    },
    vertical: function() {
        this.margin = 'margin-' + (this.options.direction || 'top');
        this.layout = 'height';
        this.offset = this.element.offsetHeight;
    },
    horizontal: function() {
        this.margin = 'margin-' + (this.options.direction || 'left');
        this.layout = 'width';
        this.offset = this.element.offsetWidth;
    }
});
Element.implement({
    toQueryString: function() {
        var queryString = [];
        var existing = {};
        this.getElements('input, select, textarea').each(function(el) {
            var type = el.type;
            if (!el.name || el.disabled || type == 'submit' || type == 'reset' || type == 'file' || type == 'image') return;
            var value = (el.get('tag') == 'select') ? el.getSelected().map(function(opt) {
                return document.id(opt).get('value');
            }) : ((type == 'radio' || type == 'checkbox') && !el.checked) ? null : el.get('value');
            Array.convert(value).each(function(val) {
                if (typeof val != 'undefined') {
                    if (el.name.slice(-2) === '[]') {
                        queryString.push(encodeURIComponent(el.name) + '=' + encodeURIComponent(val));
                    } else {
                        if (typeof(existing[el.name]) != 'undefined') {
                            queryString.erase(existing[el.name]);
                        }
                        queryString.push(encodeURIComponent(el.name) + '=' + encodeURIComponent(val));
                        existing[el.name] = encodeURIComponent(el.name) + '=' + encodeURIComponent(val);
                    }
                }
            });
        });
        return queryString.join('&');
    }
});

function __(domain, key, backend) {
    var pageLang = (typeof(website) != 'undefined' && website !== null && typeof(website.page) != 'undefined' ? Object.getFromPath(website, 'page.options.page.language_code') : false);
    var backendLang = (typeof(website) != 'undefined' && website !== null ? Object.getFromPath(website, 'options.admin_language_code') : false);
    if (backend && domain && typeof(website) != 'undefined' && website !== null && backendLang != false && typeof(_LC_MESSAGES) != 'undefined' && typeof(_LC_MESSAGES[backendLang]) != 'undefined' && typeof(_LC_MESSAGES[backendLang][domain]) != 'undefined' && typeof(_LC_MESSAGES[backendLang][domain][key]) != 'undefined' && _LC_MESSAGES[backendLang][domain][key]) {
        return _LC_MESSAGES[backendLang][domain][key];
    }
    if (!backend && domain && typeof(website) != 'undefined' && website !== null && pageLang != false && typeof(_LC_MESSAGES) != 'undefined' && typeof(_LC_MESSAGES[pageLang]) != 'undefined' && typeof(_LC_MESSAGES[pageLang][domain]) != 'undefined' && typeof(_LC_MESSAGES[pageLang][domain][key]) != 'undefined' && _LC_MESSAGES[pageLang][domain][key]) {
        return _LC_MESSAGES[pageLang][domain][key];
    }
    return key;
};

function htmlspecialchars(string, quote_style, charset, double_encode) {
    var optTemp = 0,
        i = 0,
        noquotes = false;
    if (typeof quote_style === 'undefined' || quote_style === null) {
        quote_style = 2;
    }
    string = string.toString();
    if (double_encode !== false) {
        string = string.replace(/&/g, '&amp;');
    }
    string = string.replace(/</g, '&lt;').replace(/>/g, '&gt;');
    var OPTS = {
        'ENT_NOQUOTES': 0,
        'ENT_HTML_QUOTE_SINGLE': 1,
        'ENT_HTML_QUOTE_DOUBLE': 2,
        'ENT_COMPAT': 2,
        'ENT_QUOTES': 3,
        'ENT_IGNORE': 4
    };
    if (quote_style === 0) {
        noquotes = true;
    }
    if (typeof quote_style !== 'number') {
        quote_style = [].concat(quote_style);
        for (i = 0; i < quote_style.length; i++) {
            if (OPTS[quote_style[i]] === 0) {
                noquotes = true;
            } else if (OPTS[quote_style[i]]) {
                optTemp = optTemp | OPTS[quote_style[i]];
            }
        }
        quote_style = optTemp;
    }
    if (quote_style & OPTS.ENT_HTML_QUOTE_SINGLE) {
        string = string.replace(/'/g, '&#039;');
    }
    if (!noquotes) {
        string = string.replace(/"/g, '&quot;');
    }
    return string;
}

function urlencode(str) {
    str = (str + '').toString();
    return encodeURIComponent(str).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/\*/g, '%2A').replace(/%20/g, '+').replace(/~/g, '%7E');
}

function rawurlencode(str) {
    str = (str + '').toString();
    return encodeURIComponent(str).replace(/!/g, '%21').replace(/'/g, '%27').replace(/\(/g, '%28').replace(/\)/g, '%29').replace(/\*/g, '%2A')
}

function base64_encode(data) {
    var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
        ac = 0,
        enc = '',
        tmp_arr = [];
    if (!data) {
        return data;
    }
    data = unescape(encodeURIComponent(data));
    do {
        o1 = data.charCodeAt(i++);
        o2 = data.charCodeAt(i++);
        o3 = data.charCodeAt(i++);
        bits = o1 << 16 | o2 << 8 | o3;
        h1 = bits >> 18 & 0x3f;
        h2 = bits >> 12 & 0x3f;
        h3 = bits >> 6 & 0x3f;
        h4 = bits & 0x3f;
        tmp_arr[ac++] = b64.charAt(h1) + b64.charAt(h2) + b64.charAt(h3) + b64.charAt(h4);
    } while (i < data.length);
    enc = tmp_arr.join('');
    var r = data.length % 3;
    return (r ? enc.slice(0, r - 3) : enc) + '==='.slice(r || 3);
}

function base64_decode(data) {
    var b64 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
    var o1, o2, o3, h1, h2, h3, h4, bits, i = 0,
        ac = 0,
        dec = '',
        tmp_arr = [];
    if (!data) {
        return data;
    }
    data += '';
    do {
        h1 = b64.indexOf(data.charAt(i++));
        h2 = b64.indexOf(data.charAt(i++));
        h3 = b64.indexOf(data.charAt(i++));
        h4 = b64.indexOf(data.charAt(i++));
        bits = h1 << 18 | h2 << 12 | h3 << 6 | h4;
        o1 = bits >> 16 & 0xff;
        o2 = bits >> 8 & 0xff;
        o3 = bits & 0xff;
        if (h3 == 64) {
            tmp_arr[ac++] = String.fromCharCode(o1);
        } else if (h4 == 64) {
            tmp_arr[ac++] = String.fromCharCode(o1, o2);
        } else {
            tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);
        }
    } while (i < data.length);
    dec = tmp_arr.join('');
    return decodeURIComponent(escape(dec.replace(/\0+$/, '')));
}
var website = null;
var admin = null;
window.addEvent('domready', function() {
    if (typeof(WEBSITE_CFG) != 'undefined') {
        website = new Website(WEBSITE_CFG);
        website.attach();
    } else {
        throw 'No website configuration found. Please refresh the page and try again.';
    }
    window.bDomReady = true;
});
window.addEvent('load', function() {
    window.bLoaded = true;
});
var classes = function(className) {
    var classNames = (className || '').clean().split(' '),
        uniques = {};
    return classNames.filter(function(className) {
        if (className !== '' && !uniques[className]) return uniques[className] = className;
    });
};
var hasClassList = !!document.createElement("div").classList;
Element.implement({
    hasClass: hasClassList ? function(a) {
        return (a != "" ? this.classList.contains(a) : false)
    } : function(a) {
        return classes(this.className).contains(a)
    }
});
(function() {
    Browser.Device = {
        name: "other"
    };
    if (Browser.Platform.ios) {
        var a = navigator.userAgent.toLowerCase().match(/(ip(ad|od|hone))/)[0];
        Browser.Device[a] = true;
        Browser.Device.name = a
    }
    if (this.devicePixelRatio == 2) {
        Browser.hasHighResolution = true
    }
    Browser.isMobile = !["mac", "linux", "win"].contains(Browser.Platform.name)
}).call(this);
var arrayFrom = Array.from;
Array.from = function(a) {
    if (null == a) {
        return [];
    }
    if (window.Set && a instanceof Set) {
        var t = [];
        a.forEach(function(v) {
            t.push(v);
        });
        return t;
    }
    if (window.Map && a instanceof Map) {
        var t = [];
        a.forEach(function(v, i) {
            t.push([i, v]);
        });
        return t;
    }
    if (window.Map && "function" == typeOf(a.toString) && a.toString() == '[object Map Iterator]') {
        var t = [];
        for (var v of a) {
            t.push(v);
        }
        return t;
    }
    if (Type.isEnumerable(a) && "string" != typeof a) {
        return "array" == typeOf(a) ? a : Array.prototype.slice.call(a);
    }
    if ("object" == typeOf(a)) {
        return arrayFrom(a);
    }
    return [a];
};
(function(original) {
    Element.implement({
        position: function(options) {
            if (options && (options.x != null || options.y != null)) {
                return (original ? original.apply(this, arguments) : this);
            }
            var currentPosition = this.getStyle('position');
            if (currentPosition != 'fixed') {
                this.setStyle('position', 'absolute');
            }
            var relFixedPosition = options.relFixedPosition;
            if (relFixedPosition) {
                options.relFixedPosition = false;
            }
            var position = this.calculatePosition(options);
            if (relFixedPosition) {
                options.relFixedPosition = relFixedPosition;
                if (currentPosition == 'fixed') {
                    var winScroll = window.getScroll();
                    position.top -= winScroll.y;
                    position.left -= winScroll.x;
                    if (!options.allowNegative) {
                        if (position.top < 0) {
                            position.top = 0;
                        }
                        if (position.left < 0) {
                            position.left = 0;
                        }
                    }
                } else {
                    var relativeTo = document.id(options.relativeTo) || document.body;
                    Element.Position.toRelFixedPosition(relativeTo, position);
                }
            }
            return (options && options.returnPos) ? position : this.setStyles(position);
        }
    });
})(Element.prototype.position);
var ASSET_CORE = 1;
var ASSET_TPL = 2;
var WEBSITE_TYPE_PERSONAL = 1;
var WEBSITE_TYPE_BUSINESS = 2;
var WEBSITE_TYPE_WEBSHOP = 3;
var Website = new Class({
    Implements: [Options, Events],
    options: {
        website_domain: null,
        website_display_domain: null,
        website_host: null,
        cookie_domain: null,
        core_assets_full_path: null,
        template_assets_full_path: null,
        files_host: null,
        flash_auth: null,
        user_id: null,
        admin: false,
        preview: false,
        website_type: false,
        page_settings: {
            page: {}
        }
    },
    page: null,
    cookieSettings: {
        domain: false,
        path: '/',
        duration: 30
    },
    _preloaded: [],
    initialize: function(options) {
        this.setOptions(options);
        this.userId = this.options.user_id;
        this.page = null;
        this.notifier = null;
        this.responsive = false;
        if (!this.bound) {
            this.bound = {};
        }
        if (this.options.cookie_domain === null) {
            this.options.cookie_domain = this.options.website_domain;
        }
        this.checkResponsiveDesign();
        this.createNotifier();
        this.setupHistory();
    },
    checkResponsiveDesign: function() {
        if ($(document.body).hasClass('tpl-responsive')) {
            var url = this.options.core_assets_full_path + 'js/plugins/respond.min.js';
            var relUrl = url.replace(/^http:\/\/(www.)?/i, '');
            var script = false;
            $$('script[src]').each(function(s) {
                if (script === false && s.get('src').indexOf(relUrl) > -1) {
                    script = s;
                }
            });
            if (script === false) {
                script = new Element('script', {
                    'src': url,
                    'type': 'text/javascript'
                });
                if (typeof script.onreadystatechange != 'undefined') {
                    script.addEvent('readystatechange', function() {
                        if (['loaded', 'complete'].contains(this.readyState)) {
                            script.set('data-loaded', 'true');
                        }
                    });
                } else {
                    script.addEvent('load', function() {
                        script.set('data-loaded', 'true');
                    });
                }
                script.inject(document.body);
            }
            this.responsive = true;
        }
    },
    createNotifier: function() {
        this.options.notifierOptions = {
            duration: 3000,
            position: 'upperCenter',
            fixed: true,
            width: 400,
            margin: {
                x: 0,
                y: 0
            },
            closeButton: true,
            classes: {
                body: 'tpl-roar-body'
            },
            updatePositionOnResize: true,
            onShow: function(item, length) {},
            onHide: function(item, length) {},
            onClose: function(item, length) {}
        };
        this.notifier = new Roar(this.options.notifierOptions);
        if (this.options.admin == true) {
            this.notifier.body.addClass('tpl-admin');
        } else if (this.options.preview == true) {
            this.notifier.body.addClass('tpl-preview');
        }
        var systemMsg = $(document.body).getElement('#SystemMessage .tpl-message');
        if (systemMsg) {
            var scrollableElement = (this.options.admin || this.options.preview ? $('PageWrapper') : window);
            var viewportElement = (this.options.admin || this.options.preview ? $('PageWrapper') : $(document.body));
            var scrollY = scrollableElement.getScroll().y;
            var viewportSize = viewportElement.getSize();
            var coords = null;
            if (this.options.admin || this.options.preview) {
                coords = systemMsg.getRelativeCoordinates($('PageWrapper'));
            } else {
                coords = systemMsg.getCoordinates();
            }
            if (coords.bottom > viewportSize.y + scrollY) {
                var notificationContent = systemMsg.getElement('.tpl-message-text').get('html');
                var notificationType = 'success';
                switch (true) {
                    case (systemMsg.hasClass('tpl-error')):
                    case (systemMsg.hasClass('tpl-warning')):
                        notificationType = 'warning';
                        break;
                }
                var options = Object.merge(Object.clone(this.options.notifierOptions), {
                    duration: 8000,
                    hideOnClick: false,
                    classes: {
                        item: 'tpl-roar tpl-roar-' + notificationType
                    }
                });
                this.notify('', notificationContent, options);
                systemMsg.getParent().hide();
                systemMsg.destroy();
            }
        }
    },
    setupHistory: function() {
        History.addEvent('change', function(url, state, method) {
            if (url.length > 0 && ['popstate', 'hashchange'].contains(method)) {
                this.page.options.page.here_url = url;
                switch (method) {
                    case 'popstate':
                        {
                            if (state && typeof(state.a) != 'undefined') {
                                switch (state.a) {
                                    case 'widget':
                                        {
                                            if (typeof(state.w) != 'undefined' && typeof(state.m) != 'undefined' && typeof(this.page.widgets[state.w]) != 'undefined' && typeof(this.page.widgets[state.w][state.m]) == 'function') {
                                                if (typeof(state.d) != 'undefined') {
                                                    this.page.widgets[state.w][state.m].apply(this.page.widgets[state.w], [state.d]);
                                                } else {
                                                    this.page.widgets[state.w][state.m].apply(this.page.widgets[state.w]);
                                                }
                                            }
                                            break;
                                        }
                                    case 'backstage':
                                        {
                                            if (typeof(state.m) != 'undefined' && this.backstage !== null && typeof(this.backstage[state.m]) == 'function') {
                                                $$('.ui-window-instance').reverse().each(function(win) {
                                                    var instance = win.retrieve('IWindow');
                                                    instance.canHide = true;
                                                    instance.hide(true);
                                                });
                                                var args = [];
                                                switch (state.m) {
                                                    case 'handleLoadPane':
                                                    case 'handleShowBackstage':
                                                        {
                                                            var data = new URI(url).getData();
                                                            if (data !== null && typeof(data.bspms) != 'undefined') {
                                                                args.push(JSON.decode(base64_decode(data.bspms)));
                                                            }
                                                            break;
                                                        }
                                                }
                                                this.backstage.locks = false;
                                                this.backstage[state.m].apply(this.backstage, args);
                                            }
                                            break;
                                        }
                                }
                            } else {
                                window.location = url;
                            }
                            break;
                        }
                    case 'hashchange':
                        {
                            var uri = new URI(url);
                            if (uri.getData('__hs')) {
                                state = uri.getData('__hs');
                                if (typeof(state.a) != 'undefined') {
                                    switch (state.a) {
                                        case 'widget':
                                            {
                                                if (typeof(state.w) != 'undefined' && typeof(state.m) != 'undefined' && typeof(this.page.widgets[state.w]) != 'undefined' && typeof(this.page.widgets[state.w][state.m]) == 'function') {
                                                    if (typeof(state.d) != 'undefined') {
                                                        this.page.widgets[state.w][state.m].apply(this.page.widgets[state.w], [state.d]);
                                                    } else {
                                                        this.page.widgets[state.w][state.m].apply(this.page.widgets[state.w]);
                                                    }
                                                }
                                                break;
                                            }
                                        case 'backstage':
                                            {
                                                if (typeof(state.m) != 'undefined' && this.backstage !== null && typeof(this.backstage[state.m]) == 'function') {
                                                    $$('.ui-window-instance').reverse().each(function(win) {
                                                        var instance = win.retrieve('IWindow');
                                                        instance.canHide = true;
                                                        instance.hide(true);
                                                    });
                                                    var args = [];
                                                    switch (state.m) {
                                                        case 'handleLoadPane':
                                                        case 'handleShowBackstage':
                                                            {
                                                                var data = uri.getData();
                                                                if (data !== null && typeof(data.bspms) != 'undefined') {
                                                                    args.push(JSON.decode(base64_decode(data.bspms)));
                                                                }
                                                                break;
                                                            }
                                                    }
                                                    this.backstage.locks = false;
                                                    this.backstage[state.m].apply(this.backstage, args);
                                                }
                                                break;
                                            }
                                    }
                                } else {
                                    window.location = url;
                                }
                            } else {
                                window.location = url;
                            }
                            break;
                        }
                }
            }
        }.bind(this));
    },
    attach: function() {
        if (this.page) {
            this.page.attach();
        } else {
            this.page = new WebsitePage(this, this.options.page_settings);
            this.page.attach();
        }
    },
    detach: function() {
        if (this.page) {
            this.page.detach();
        }
    },
    request: function(options) {
        var options = Object.merge({
            url: '',
            method: 'post',
            data: {},
            parentWin: null,
            onRequest: false,
            onRequestStart: false,
            onRequestEnd: false,
            onFailure: false,
            onComplete: false,
            onSuccess: false,
            onWarningWindowHide: false
        }, options);
        new Request.JSON({
            url: options.url,
            method: options.method,
            data: options.data,
            onRequest: function() {
                if (options.onRequestStart) {
                    options.onRequestStart.apply();
                }
                (options.onRequest ? options.onRequest.apply() : this.websiteRequest());
            }.bind(this),
            onFailure: function() {
                if (options.onRequestEnd) {
                    options.onRequestEnd.apply();
                }
                (options.onFailure ? options.onFailure.apply() : this.websiteRequestFailure({
                    onWarningWindowHide: options.onWarningWindowHide,
                    parentWin: options.parentWin
                }));
            }.bind(this),
            onError: function(text, error) {
                if (options.onRequestEnd) {
                    options.onRequestEnd.apply();
                }
                (options.onFailure ? options.onFailure.apply() : this.websiteRequestFailure({
                    onWarningWindowHide: options.onWarningWindowHide,
                    parentWin: options.parentWin
                }));
            }.bind(this),
            onSuccess: function(response) {
                if (options.onRequestEnd) {
                    options.onRequestEnd.apply();
                }
                (options.onSuccess ? options.onSuccess.apply(null, [response, options]) : this.websiteRequestSuccess(response, options));
            }.bind(this)
        }).send();
    },
    websiteRequest: function() {
        this.loadingBox(true);
    },
    websiteRequestFailure: function(options) {
        var options = Object.merge({
            parentWin: null,
            onWarningWindowHide: false
        }, options);
        this.loadingBox(false);
        new IWindow.Error(__('core', 'Error'), __('core', 'An error has occurred while communicating with the server. Please try again.'), {
            pin: true,
            parent: options.parentWin,
            onShow: function() {
                this.element.getElement('input[type=button]').focus();
            },
            onHide: function() {
                if (options.onWarningWindowHide) {
                    options.onWarningWindowHide.apply();
                }
            }
        });
    },
    websiteRequestSuccess: function(response, options) {
        this.loadingBox(false);
        if (this.hasAccess(response, {
                showWarningWindow: true,
                onWarningWindowHide: (options && typeof(options.onWarningWindowHide) != 'undefined' ? options.onWarningWindowHide : false),
                parentWin: (options && typeof(options.parentWin) != 'undefined' ? options.parentWin : null)
            }) == false) {
            return false;
        }
        if (this.isError(response, {
                showWarningWindow: true,
                onWarningWindowHide: (options && typeof(options.onWarningWindowHide) != 'undefined' ? options.onWarningWindowHide : false),
                parentWin: (options && typeof(options.parentWin) != 'undefined' ? options.parentWin : null)
            }) == true) {
            return false;
        }
        if (this.preprocessResponse(response) == false) {
            return false;
        }
        if (options && options.onComplete) {
            options.onComplete.apply();
        }
        return true;
    },
    hasAccess: function(response, options) {
        var parentWin = (options && typeof(options.parentWin) != 'undefined' ? options.parentWin : null);
        var options = Object.merge({
            frontendRequest: true,
            showWarningWindow: false,
            parentWin: null,
            windowOptions: {},
            onWarningWindowHide: false
        }, options);
        if (parentWin) {
            options.parentWin = parentWin;
        }
        var bHasAccess = (response && (typeof(response.access) == 'undefined' || response.access === true) ? true : false);
        var bIsLogged = (response && typeof(response.logged) != 'undefined' && response.logged == true ? true : false)
        if (bHasAccess == true) {
            return true;
        }
        if (options.showWarningWindow == true) {
            (function() {
                var winOpts = Object.merge({
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        if (options.onWarningWindowHide) {
                            options.onWarningWindowHide.apply();
                        }
                    }
                }, options.windowOptions);
                winOpts.parent = options.parentWin;
                var title = (options.frontendRequest == true ? __('core', 'Access denied') : __('admin_core', 'Access denied', true));
                var msg = (options.frontendRequest == true ? __('core', 'You don\'t have the required permissions to access this resource.') : __('admin_core', 'You don\'t have the required permissions to access this resource.', true));
                if (bIsLogged == false && options.frontendRequest == true) {
                    msg += '<br />' + __('core', 'Please login to your account and try again.');
                }
                var cls = (options.frontendRequest == true ? IWindow.Error : IWindowUI.Error);
                new cls(title, msg, winOpts);
            }).delay(10, this);
        }
        return false;
    },
    isError: function(response, options) {
        var parentWin = (options && typeof(options.parentWin) != 'undefined' ? options.parentWin : null);
        var options = Object.merge({
            frontendRequest: true,
            showWarningWindow: false,
            parentWin: null,
            windowOptions: {},
            onWarningWindowHide: false
        }, options);
        if (parentWin) {
            options.parentWin = parentWin;
        }
        var bIsError = (!response || (typeof(response.error) != 'undefined' && response.error === true) ? true : false);
        if (bIsError == false) {
            return false;
        }
        if (options.showWarningWindow == true) {
            (function() {
                var winOpts = Object.merge({
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        if (options.onWarningWindowHide) {
                            options.onWarningWindowHide.apply();
                        }
                    }
                }, options.windowOptions);
                winOpts.parent = options.parentWin;
                var title = (response && typeof(response.title) != 'undefined' && response.title.length > 0 ? response.title : (options.frontendRequest == true ? __('core', 'Error') : __('admin_core', 'Error', true)));
                var msg = (response && typeof(response.msg) != 'undefined' && response.msg.length > 0 ? response.msg : (options.frontendRequest == true ? __('core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later.") : __('admin_core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later.", true)));
                var cls = (options.frontendRequest == true ? IWindow.Error : IWindowUI.Error);
                new cls(title, msg, winOpts);
            }).delay(10, this);
        }
        return true;
    },
    preprocessResponse: function(response) {
        if (typeof(dataLayer) != 'undefined' && typeof(response.ga_data_layer) != 'undefined') {
            try {
                dataLayer.push({
                    ecommerce: null
                });
                dataLayer.push(response.ga_data_layer);
            } catch (e) {
                console.log(e);
            }
        }
        if (typeof(response.app_redirect) != 'undefined' && typeof(response.app_redirect_url) != 'undefined' && response.app_redirect == true && response.app_redirect_url.length > 0) {
            window.location = response.app_redirect_url;
            return false;
        }
        return true;
    },
    notify: function(title, message, options) {
        var options = Object.merge(Object.clone(this.options.notifierOptions), options);
        return this.notifier.alert(title, message, options);
    },
    notificationBox: function(content, options) {
        var options = Object.merge(Object.clone(this.options.notifierOptions), options);
        return this.notifier.box(content, options);
    },
    loadingBox: function(bShow, options) {
        var options = Object.merge({
            text: __('core', 'Loading...')
        }, options);
        var b = $('LoadingBox');
        if (!b) {
            var cls = 'tpl-loading-box';
            if (this.options.admin == true) {
                cls += ' tpl-admin';
            } else if (this.options.preview == true) {
                cls += ' tpl-preview';
            }
            b = new Element('div', {
                'id': 'LoadingBox',
                'class': cls
            }).adopt(new Element('div', {
                'text': options.text
            })).hide().inject($(document.body));
            b.fnCalls = 0;
        }
        if (bShow == true && b.isDisplayed() == true) {
            b.fnCalls++;
            return;
        }
        if (bShow == false && b.isDisplayed() == true && b.fnCalls > 1) {
            b.fnCalls--;
            return;
        }
        if (bShow == true) {
            b.setStyle('margin-left', 0);
            var bw = b.measure(function() {
                return this.getSize().x
            });
            if (bw > 0) {
                b.setStyle('margin-left', -Math.floor(bw / 2));
            }
            b.show();
            b.fnCalls++;
        } else {
            b.hide();
            b.fnCalls = 0;
        }
    },
    preload: function(objects, assetType) {
        if (!objects || !assetType) {
            return;
        }
        var path = false;
        switch (assetType) {
            case ASSET_CORE:
                path = this.options.core_assets_full_path + 'css';
                break;
            case ASSET_TPL:
                path = this.options.template_assets_full_path + 'css';
                break;
        }
        if (path === false) {
            return;
        }
        objects = objects.filter(function(o) {
            if (!this._preloaded.contains(o)) {
                return true;
            }
            return false;
        }, this);
        if (objects.length > 0) {
            var parts = [];
            while (objects.length > 0) {
                parts.push(objects.splice(0, 5));
            }
            var fn = (function() {
                var objects = parts.shift();
                var images = [];
                objects.each(function(o) {
                    images.push(path + o);
                }, this);
                new Asset.images(images, {
                    onComplete: function() {
                        this._preloaded = this._preloaded.concat(objects);
                        if (parts.length > 0) {
                            fn.delay(200);
                        }
                    }.bind(this)
                });
            }).bind(this);
            fn.apply();
        }
    },
    readCookie: function(name) {
        return Cookie.read(name);
    },
    writeCookie: function(name, value, options) {
        var options = Object.merge(Object.clone(this.cookieSettings), options);
        return Cookie.write(name, value, options);
    },
    deleteCookie: function(name) {
        Cookie.dispose(name);
    }
});
var PG_WYSIWYG = 1;
var PG_INTERNAL_LINK = 2;
var PG_EXTERNAL_LINK = 3;
var PG_FIRST_SUBPAGE_LINK = 4;
var PG_SYSTEM = 5;
var PG_ALL = 100;
var PG_TOP_MENU = 1;
var PG_SIDE_MENU = 2;
var PG_BOTTOM_MENU = 3;
var PG_SITE_MAP = 4;
var PG_EXCLUDE_PROTECTED = 1;
var PG_EXCLUDE_NEWS_DETAILS = 2;
var PG_EXCLUDE_PRODUCT_DETAILS = 3;
var PG_EXCLUDE_404 = 4;
var PG_EXCLUDE_WEBSHOP = 5;
var PG_EXCLUDE_ALL_UNREACHABLE = 100;
var WebsitePage = new Class({
    Implements: [Options, Events],
    options: {
        page: {
            id: null,
            language_id: null,
            language_code: null,
            language_locale: null,
            here_url: null
        },
        page_widgets: {}
    },
    widgets: {},
    addons: {},
    insertQueue: {},
    initialize: function(website, options) {
        this.setOptions(options);
        this.website = website;
        this.id = this.options.page.id;
        this.loadingQueue = {};
        this.reCaptchaQueue = [];
        if (!this.bound) {
            this.bound = {};
        }
        window['renderReCaptchaElements'] = this.renderReCaptchaElements.bind(this);
        this.bound = Object.merge(this.bound, {
            responsiveDesignResize: this.responsiveDesignResize.bind(this)
        });
    },
    attach: function() {
        this.attachWidgetsUI();
        this.attachAddonsUI();
        if (this.website.responsive == true) {
            window.addEvent('resize', this.bound.responsiveDesignResize);
        }
    },
    detach: function() {
        this.detachWidgetsUI();
        this.detachAddonsUI();
        if (this.website.responsive == true) {
            window.removeEvent('resize', this.bound.responsiveDesignResize);
        }
    },
    attachWidgetsUI: function() {
        if (Object.getLength(this.widgets) > 0) {
            Object.each(this.widgets, function(wgt) {
                wgt.attach();
            });
        } else {
            $$('.tpl-widget').each(function(wgt) {
                var w = this.registerWidget(wgt);
                if (w !== false && typeof(w.id) != 'undefined' && typeof(w.widget) != 'undefined') {
                    this.widgets[w.id] = w.widget;
                    this.widgets[w.id].attach();
                }
            }, this);
        }
    },
    detachWidgetsUI: function() {
        if (Object.getLength(this.widgets) > 0) {
            Object.each(this.widgets, function(wgt) {
                wgt.detach();
            });
        }
    },
    attachAddonsUI: function() {
        if (Object.getLength(this.addons) > 0) {
            Object.each(this.addons, function(addon) {
                addon.attach();
            });
        } else {
            $$('.tpl-addon').each(function(addon) {
                var a = this.registerAddon(addon);
                if (a !== false && typeof(a.id) != 'undefined' && typeof(a.addon) != 'undefined') {
                    this.addons[a.id] = a.addon;
                    this.addons[a.id].attach();
                }
            }, this);
        }
    },
    detachAddonsUI: function() {
        if (Object.getLength(this.addons) > 0) {
            Object.each(this.addons, function(addon) {
                addon.detach();
            });
        }
    },
    registerWidget: function(wgt, options) {
        var wId = wgt.get('id');
        if (wId) {
            var wData = wId.split('_');
            if (wData.length == 2 && typeof(window[wData[0]]) == 'function') {
                var options = Object.merge({
                    admin: this.website.options.admin,
                    preview: this.website.options.preview
                }, options);
                if (typeof(this.options.page_widgets[wId]) != 'undefined') {
                    options = Object.merge(options, Object.clone(this.options.page_widgets[wId]));
                }
                var widget = new window[wData[0]](wId, options);
                widget.set('website', this.website);
                widget.set('page', this);
                return {
                    id: wId,
                    widget: widget
                };
            }
        }
        return false;
    },
    registerAddon: function(addon, options) {
        var aId = addon.get('id');
        if (aId) {
            var aData = aId.split('_');
            if (aData.length == 2 && typeof(window[aData[0]]) == 'function') {
                var options = Object.merge({
                    admin: this.website.options.admin,
                    preview: this.website.options.preview
                }, options);
                var addonObj = new window[aData[0]](aId, options);
                addonObj.set('website', this.website);
                addonObj.set('page', this);
                return {
                    id: aId,
                    addon: addonObj
                };
            }
        }
        return false;
    },
    insertWidget: function(options, bAttach, bEvalScripts) {
        var options = Object.merge({
            target: null,
            where: null,
            page_widget: null,
            widget_content: '',
            css_assets: null,
            js_assets: null,
            onInit: false
        }, options);
        var widget = null;
        var onLoad = null;
        var wrapper = new Element('div').set('html', options.widget_content);
        var wgtEl = wrapper.getElement('.tpl-widget');
        if (wgtEl) {
            wgtElId = wgtEl.get('id');
            if (this.widgets[wgtElId]) {
                this.widgets[wgtElId].destroy();
                Object.erase(this.widgets, wgtElId);
            }
            wgtEl.inject(options.target, options.where);
            if (bEvalScripts) {
                wgtEl.get('html').stripScripts(true);
            }
            onLoad = (function() {
                var widget = this.registerWidget(wgtEl, options.page_widget);
                if (widget !== false && typeof(widget.id) != 'undefined' && typeof(widget.widget) != 'undefined') {
                    this.widgets[widget.id] = widget.widget;
                    this.options.page_widgets[wgtElId] = options.page_widget;
                    if (options.onInit) {
                        var bRes = options.onInit.apply(null, [widget.widget]);
                        if (bRes === false) {
                            bAttach = false;
                            options.css_assets = [];
                            options.js_assets = [];
                        }
                    }
                    if (bAttach) {
                        this.widgets[widget.id].attach();
                    }
                }
            }.bind(this));
        }
        wrapper.destroy();
        if (options.css_assets && options.css_assets.length > 0) {
            options.css_assets.each(function(asset) {
                if (typeof(asset.url) == 'undefined') {
                    return;
                }
                var bExists = false;
                $$('link[rel=stylesheet][href]').each(function(a) {
                    if (bExists == false && asset.url == a.get('href')) {
                        bExists = true;
                    }
                });
                if (bExists == false) {
                    var bInject = false;
                    var browserType = (typeof(asset.browser) != 'undefined' ? asset.browser : false);
                    var browserVersion = (typeof(asset.browser_version) != 'undefined' ? asset.browser : false);
                    if (browserType !== false) {
                        switch (browserType) {
                            case 'ie':
                                {
                                    if (Browser.ie) {
                                        if (browserVersion != false && Browser.version <= browserVersion) {
                                            bInject = true;
                                        } else if (browserVersion == false) {
                                            bInject = true;
                                        }
                                    }
                                    break;
                                }
                        }
                    } else {
                        bInject = true;
                    }
                    if (bInject == true) {
                        new Asset.css(asset.url);
                    }
                }
            });
        }
        if (options.js_assets && options.js_assets.length > 0) {
            var counter = 0;
            options.js_assets.each(function(asset) {
                if (typeof(asset.url) == 'undefined') {
                    return;
                }
                var bExists = false;
                var script = null;
                $$('script[src]').each(function(a) {
                    if (bExists == false && asset.url == a.get('src')) {
                        script = a;
                        bExists = true;
                    }
                });
                var load = function() {
                    counter++;
                    if (counter == options.js_assets.length && onLoad) {
                        onLoad.apply();
                    }
                };
                if (bExists == false) {
                    var u = asset.url;
                    if (this.loadingQueue[u]) {
                        this.loadingQueue[u].push(load);
                    } else {
                        this.loadingQueue[u] = [load];
                        new Request.JSON({
                            url: '/ajax_core_widgets_ui/check_asset/',
                            method: 'post',
                            data: {
                                data: {
                                    Request: {
                                        asset_url: u
                                    }
                                }
                            },
                            onFailure: function() {
                                if (this.loadingQueue[u].length > 0) {
                                    this.loadingQueue[u].each(function(fn) {
                                        fn.apply();
                                    });
                                    Object.erase(this.loadingQueue, u);
                                }
                            }.bind(this),
                            onError: function(text, error) {
                                if (this.loadingQueue[u].length > 0) {
                                    this.loadingQueue[u].each(function(fn) {
                                        fn.apply();
                                    });
                                    Object.erase(this.loadingQueue, u);
                                }
                            }.bind(this),
                            onSuccess: function(response) {
                                if (typeof(response.exists) != 'undefined' && response.exists == true) {
                                    script = new Element('script', {
                                        'src': u,
                                        'type': 'text/javascript'
                                    });
                                    if (script) {
                                        var self = this;
                                        if (typeof script.onreadystatechange != 'undefined') {
                                            script.addEvent('readystatechange', function() {
                                                if (['loaded', 'complete'].contains(this.readyState)) {
                                                    script.set('data-loaded', 'true');
                                                    if (self.loadingQueue[u].length > 0) {
                                                        self.loadingQueue[u].each(function(fn) {
                                                            fn.apply();
                                                        });
                                                        Object.erase(self.loadingQueue, u);
                                                    }
                                                }
                                            });
                                        } else {
                                            script.addEvent('load', function() {
                                                script.set('data-loaded', 'true');
                                                if (self.loadingQueue[u].length > 0) {
                                                    self.loadingQueue[u].each(function(fn) {
                                                        fn.apply();
                                                    });
                                                    Object.erase(self.loadingQueue, u);
                                                }
                                            });
                                        }
                                        script.inject(document.body);
                                    }
                                } else if (this.loadingQueue[u].length > 0) {
                                    this.loadingQueue[u].each(function(fn) {
                                        fn.apply();
                                    });
                                    Object.erase(this.loadingQueue, u);
                                }
                            }.bind(this)
                        }).send();
                    }
                } else {
                    if (script.get('data-loaded') == 'true') {
                        load.apply();
                    } else {
                        if (typeof script.onreadystatechange != 'undefined') {
                            script.addEvent('readystatechange', function() {
                                if (['loaded', 'complete'].contains(this.readyState)) {
                                    load.apply();
                                }
                            });
                        } else {
                            script.addEvent('load', function() {
                                load.apply();
                            });
                        }
                    }
                }
            }, this);
        } else if (onLoad) {
            onLoad.apply();
        }
        return widget;
    },
    queueWidgetInsert: function(elementId, widget, bAttach, bEvalScripts, options) {
        var options = Object.merge({
            onInit: false
        }, options);
        var fn = (function() {
            var target = null;
            var where = null;
            var thisWidget = $(elementId);
            var prevEl = (thisWidget ? thisWidget.getPrevious() : null);
            var nextEl = (thisWidget ? thisWidget.getNext() : null);
            if (prevEl) {
                target = prevEl;
                where = 'after';
            } else if (nextEl) {
                target = nextEl;
                where = 'before';
            } else if (thisWidget) {
                target = thisWidget.getParent();
                where = 'bottom';
            }
            if (target && where) {
                this.insertWidget({
                    target: target,
                    where: where,
                    page_widget: Object.getFromPath(widget, 'page_widget'),
                    widget_content: Object.getFromPath(widget, 'widget_content'),
                    css_assets: Object.getFromPath(widget, 'css_assets'),
                    js_assets: Object.getFromPath(widget, 'js_assets'),
                    onInit: function(w) {
                        if (options.onInit) {
                            options.onInit.apply(null, [w]);
                        }
                        if (this.insertQueue[elementId].length > 0) {
                            var qFn = this.insertQueue[elementId].shift();
                            qFn.apply(this);
                            return false;
                        }
                        return true;
                    }.bind(this)
                }, bAttach, bEvalScripts);
            } else if (this.insertQueue[elementId].length > 0) {
                var qFn = this.insertQueue[elementId].shift();
                qFn.apply(this);
            }
        });
        if (typeof(this.insertQueue[elementId]) == 'undefined') {
            this.insertQueue[elementId] = [];
        }
        this.insertQueue[elementId].push(fn);
        var elapsed = 0;
        var timer = (function() {
            var current = (typeof(this.widgets[elementId]) != 'undefined' ? this.widgets[elementId] : null);
            if (!current) {
                clearTimeout(timer);
                return;
            }
            if (current.isBusy() == false || elapsed > 10000) {
                if (this.insertQueue[elementId].length > 0) {
                    var qFn = this.insertQueue[elementId].shift();
                    qFn.apply(this);
                }
                clearTimeout(timer);
            }
            elapsed += 100;
        }).periodical(100, this);
    },
    getCartWidgetsToRefresh: function(exclude) {
        var widgetsToRefresh = [];
        Object.each(this.widgets, function(widget) {
            if (exclude && exclude.contains(widget.id)) {
                return;
            }
            switch (true) {
                case (Object.getFromPath(widget, 'options.short_name') == 'top_shopping_cart'):
                    {
                        widgetsToRefresh.push({
                            'widget_id': widget.id,
                            'element_id': widget.element.get('id'),
                            'widget_name': Object.getFromPath(widget, 'options.short_name'),
                            'render': 1,
                            'process': 0,
                            'static': 1
                        });
                        break;
                    }
                case (Object.getFromPath(widget, 'options.short_name') == 'shopping_cart'):
                case (Object.getFromPath(widget, 'options.short_name') == 'shopping_cart_details'):
                case (Object.getFromPath(widget, 'options.short_name') == 'order_summary'):
                case (Object.getFromPath(widget, 'options.short_name') == 'checkout_form'):
                    {
                        widgetsToRefresh.push({
                            'widget_id': widget.id,
                            'element_id': widget.element.get('id'),
                            'render': 1,
                            'process': 0
                        });
                        break;
                    }
            }
        }, this);
        return widgetsToRefresh;
    },
    refreshWidget: function(widget, options, bAttach, bEvalScripts) {
        var elementId = (widget && widget.element ? widget.element.get('id') : null);
        var data = {
            data: {
                Request: {
                    widget_id: 0,
                    page_id: this.id,
                    url: this.options.page.here_url,
                    render: 1
                }
            }
        };
        var options = Object.merge({
            url: '/ajax_core_widgets_ui/request/',
            onSuccess: function(response, options) {
                this.website.loadingBox(false);
                if (this.website.hasAccess(response, {
                        showWarningWindow: true
                    }) == false) {
                    return false;
                }
                if (this.website.isError(response, {
                        showWarningWindow: true
                    }) == true) {
                    return false;
                }
                if (this.website.preprocessResponse(response) == false) {
                    return false;
                }
                var o = {};
                if (options && typeof(options.onInit) != 'undefined' && options.onInit) {
                    o.onInit = options.onInit;
                }
                this.queueWidgetInsert(elementId, response, bAttach, bEvalScripts, o);
                return true;
            }.bind(this)
        }, options);
        if (typeof(options.data) != 'undefined') {
            options.data = Object.merge(data, (typeOf(options.data) == 'string' ? options.data.parseQueryString() : Object.clone(options.data)));
        } else {
            options.data = data;
        }
        this.website.request(options);
    },
    refreshWidgets: function(widgets, options, bSkipMessages) {
        if (widgets.length > 0) {
            var data = {
                data: {
                    Request: {
                        widget_id: widgets,
                        page_id: this.id,
                        url: this.options.page.here_url,
                        render: 1
                    }
                }
            };
            var options = Object.merge({
                url: '/ajax_core_widgets_ui/request/',
                onSuccess: function(response, options) {
                    this.website.loadingBox(false);
                    var mo = (bSkipMessages ? {} : {
                        showWarningWindow: true
                    });
                    if (this.website.hasAccess(response, mo) == false || this.website.isError(response, mo) == true || this.website.preprocessResponse(response) == false) {
                        return false;
                    }
                    if (Object.getFromPath(response, 'widgets') && Object.getLength(response.widgets) > 0) {
                        var i = 0;
                        var l = Object.getLength(response.widgets);
                        Object.each(response.widgets, function(widget, elementId) {
                            if (this.website.isError(widget) == true || this.website.preprocessResponse(widget) == false) {
                                return;
                            }
                            var o = {};
                            if (options && typeof(options.onInit) != 'undefined' && options.onInit && i == l - 1) {
                                o.onInit = options.onInit;
                            }
                            this.queueWidgetInsert(elementId, widget, true, false, o);
                            i++;
                        }, this);
                    }
                    if (options && typeof(options.onComplete) != 'undefined' && options.onComplete) {
                        options.onComplete.apply();
                    }
                    return true;
                }.bind(this)
            }, options);
            if (typeof(options.data) != 'undefined') {
                options.data = Object.merge(data, (typeOf(options.data) == 'string' ? options.data.parseQueryString() : Object.clone(options.data)));
            } else {
                options.data = data;
            }
            this.website.request(options);
        }
    },
    refreshCart: function(options) {
        var options = Object.merge({
            exclude: [],
            onRequest: function() {},
            onFailure: function() {}
        }, options);
        if (Object.getLength(this.widgets) > 0) {
            var widgetsToRefresh = this.getCartWidgetsToRefresh(options.exclude);
            this.refreshWidgets(widgetsToRefresh, options, true);
        }
    },
    showWeirdElements: function() {
        Object.each(this.widgets, function(widget) {
            widget.showWeirdElements();
        });
        Object.each(this.addons, function(addon) {
            addon.showWeirdElements();
        });
    },
    hideWeirdElements: function() {
        Object.each(this.widgets, function(widget) {
            widget.hideWeirdElements();
        });
        Object.each(this.addons, function(addon) {
            addon.hideWeirdElements();
        });
    },
    requirePluginAssets: function(options) {
        options = Object.merge({
            js: [],
            css: [],
            onLoad: false
        }, options);
        var js = {};
        var css = {};
        var existingJs = $$('script[src]');
        var existingCss = $$('link[rel=stylesheet]');
        var checkLoaded = function() {
            var loaded = true;
            Object.each(js, function(o, f) {
                if (o.loaded == false) {
                    loaded = false;
                }
            });
            Object.each(css, function(o, f) {
                if (o.loaded == false) {
                    loaded = false;
                }
            });
            if (loaded == true) {
                options.onLoad.apply();
            }
        };
        options.js.each(function(file) {
            var url = this.website.options.core_assets_full_path + 'js/plugins/' + file;
            var relUrl = url.replace(/^http:\/\/(www.)?/i, '');
            var script = false;
            existingJs.each(function(s) {
                if (script === false && s.get('src').indexOf(relUrl) > -1) {
                    script = s;
                }
            });
            js[file] = {
                url: url,
                script: script,
                loaded: false
            };
        }, this);
        options.css.each(function(file) {
            var url = this.website.options.template_assets_full_path + 'css/plugins/' + file;
            var relUrl = url.replace(/^http:\/\/(www.)?/i, '');
            var sheet = false;
            existingCss.each(function(s) {
                if (sheet === false && s.get('href').indexOf(relUrl) > -1) {
                    sheet = s;
                }
            });
            css[file] = {
                url: url,
                sheet: sheet,
                loaded: false
            };
        }, this);
        Object.each(js, function(o, f) {
            if (js[f].script === false) {
                js[f].script = new Element('script', {
                    'src': js[f].url,
                    'type': 'text/javascript'
                });
                if (typeof js[f].script.onreadystatechange != 'undefined') {
                    js[f].script.addEvent('readystatechange', function() {
                        if (['loaded', 'complete'].contains(this.readyState)) {
                            js[f].script.set('data-loaded', 'true');
                            js[f].loaded = true;
                            checkLoaded.apply();
                        }
                    });
                } else {
                    js[f].script.addEvent('load', function() {
                        js[f].script.set('data-loaded', 'true');
                        js[f].loaded = true;
                        checkLoaded.apply();
                    });
                }
                js[f].script.inject(document.body);
            } else {
                if (js[f].script.get('data-loaded') == 'true') {
                    js[f].loaded = true;
                    checkLoaded.apply();
                } else {
                    if (typeof js[f].script.onreadystatechange != 'undefined') {
                        js[f].script.addEvent('readystatechange', function() {
                            if (['loaded', 'complete'].contains(this.readyState)) {
                                js[f].loaded = true;
                                checkLoaded.apply();
                            }
                        });
                    } else {
                        js[f].script.addEvent('load', function() {
                            js[f].loaded = true;
                            checkLoaded.apply();
                        });
                    }
                }
            }
        });
        Object.each(css, function(o, f) {
            if (css[f].sheet === false) {
                css[f].sheet = new Element('link', {
                    'href': css[f].url,
                    'rel': 'stylesheet',
                    'type': 'text/css'
                });
                var onLoad = function() {
                    css[f].sheet.set('data-loaded', 'true');
                    css[f].loaded = true;
                    checkLoaded.apply();
                };
                if (Browser.safari) {
                    var link = css[f].sheet,
                        t = document.createStyleSheet,
                        s = t ? 'styleSheet' : 'sheet',
                        i = 0;
                    var check = function() {
                        try {
                            var r = link && link[s];
                            if (!r && i++ > 300) {
                                return true;
                            }
                            return r;
                        } catch (e) {
                            return false;
                        }
                    };
                    (function poll() {
                        check() && setTimeout(onLoad, 0) || setTimeout(poll, 100);
                    })();
                } else {
                    css[f].sheet.addEvent('load', onLoad);
                }
                css[f].sheet.inject(document.head);
            } else {
                if (css[f].sheet.get('data-loaded') == 'true') {
                    css[f].loaded = true;
                    checkLoaded.apply();
                } else {
                    var onLoad = function() {
                        css[f].loaded = true;
                        checkLoaded.apply();
                    };
                    if (Browser.safari) {
                        var link = css[f].sheet,
                            t = document.createStyleSheet,
                            s = t ? 'styleSheet' : 'sheet',
                            i = 0;
                        var check = function() {
                            try {
                                var r = link && link[s];
                                if (!r && i++ > 300) {
                                    return true;
                                }
                                return r;
                            } catch (e) {
                                return false;
                            }
                        };
                        (function poll() {
                            check() && setTimeout(onLoad, 0) || setTimeout(poll, 100);
                        })();
                    } else {
                        css[f].sheet.addEvent('load', onLoad);
                    }
                }
            }
        });
    },
    pageContentResize: function() {
        Object.each(this.widgets, function(widget) {
            widget.elementResized();
        });
    },
    responsiveDesignResize: function() {
        Object.each(this.widgets, function(widget) {
            widget.documentResized();
        });
        Object.each(this.addons, function(addon) {
            addon.documentResized();
        });
    },
    queueReCaptchaElement: function(el) {
        if (el) {
            this.reCaptchaQueue.push(el);
        }
    },
    renderReCaptchaElements: function() {
        if (typeof(grecaptcha) != 'undefined' && this.reCaptchaQueue.length > 0) {
            this.reCaptchaQueue.each(function(el, i) {
                var elData = {
                    'sitekey': el.get('data-sitekey'),
                    'callback': el.get('data-callback'),
                    'size': el.get('data-size')
                };
                var wId = grecaptcha.render(el, elData);
                el.set('data-wid', wId);
                delete this.reCaptchaQueue[i];
            }, this);
        }
    }
});
var DropdownBox = new Class({
    Implements: [Options, Events],
    options: {
        displayMode: 1,
        showDelay: 0,
        hideDelay: 0,
        closeButton: false,
        hideOthersOnShow: true,
        positionTarget: null,
        positionRelativeTarget: null,
        scrollableElement: window,
        position: 'static',
        alignment: 'right',
        boxOffset: {
            x: 0,
            y: 0
        },
        viewport: null,
        container: null,
        box: null,
        classes: {
            dropdown: 'tpl-dropdown-box',
            close: 'tpl-dropdown-box-close',
            expanded: 'tpl-expanded'
        },
        zIndex: 5,
        onElementMouseEnter: function(ev, toggler) {},
        onElementMouseLeave: function(ev, toggler) {},
        onElementClick: function(ev, toggler) {},
        onBoxMouseEnter: function(ev, toggler) {},
        onBoxMouseLeave: function(ev, toggler) {},
        onShow: function(toggler, dropdown) {},
        onHide: function(toggler, dropdown) {}
    },
    expanded: false,
    initialize: function(target, options) {
        this.setOptions(options);
        this.element = $(target);
        this.box = null;
        if (this.options.box) {
            this.box = $(this.options.box);
            if (this.options.container && $(this.options.container) != this.box.getParent()) {
                this.box.inject($(this.options.container));
            }
            this.box.setStyles({
                position: 'absolute',
                top: 0,
                left: -9999
            });
            this.box.dropdown = this;
        }
        this.timer = false;
        this.setBound();
        this.attach();
    },
    attach: function() {
        this.element.addEvent('mouseenter', this.bound.elementMouseEnter);
        this.element.addEvent('mouseleave', this.bound.elementMouseLeave);
        this.element.addEvent('click', this.bound.elementClick);
        document.addEvent('click', this.bound.documentClick);
        document.addEvent('keydown', this.bound.documentKeyDown);
        window.addEvent('resize', this.bound.windowResize);
        if (this.options.displayMode == 2 && this.box) {
            this.box.addEvent('mouseenter', this.bound.boxMouseEnter);
            this.box.addEvent('mouseleave', this.bound.boxMouseLeave);
        }
        if (this.options.closeButton == true && this.box) {
            var button = this.box.getElement('.' + this.options.classes.close.replace(/ /gi, '.'));
            if (button) {
                button.addEvent('click', this.bound.buttonClick);
            }
        }
    },
    detach: function() {
        this.element.removeEvent('mouseenter', this.bound.elementMouseEnter);
        this.element.removeEvent('mouseleave', this.bound.elementMouseLeave);
        this.element.removeEvent('click', this.bound.elementClick);
        document.removeEvent('click', this.bound.documentClick);
        document.removeEvent('keydown', this.bound.documentKeyDown);
        window.removeEvent('resize', this.bound.windowResize);
        if (this.options.displayMode == 2 && this.box) {
            this.box.removeEvent('mouseenter', this.bound.boxMouseEnter);
            this.box.removeEvent('mouseleave', this.bound.boxMouseLeave);
        }
        if (this.options.closeButton == true && this.box) {
            var button = this.box.getElement('.' + this.options.classes.close.replace(/ /gi, '.'));
            if (button) {
                button.removeEvent('click', this.bound.buttonClick);
            }
        }
        clearTimeout(this.timer);
    },
    setBound: function() {
        this.bound = {
            elementMouseEnter: this.elementMouseEnter.bind(this),
            elementMouseLeave: this.elementMouseLeave.bind(this),
            elementClick: this.elementClick.bind(this),
            boxMouseEnter: this.boxMouseEnter.bind(this),
            boxMouseLeave: this.boxMouseLeave.bind(this),
            buttonClick: this.buttonClick.bind(this),
            documentClick: this.documentClick.bind(this),
            documentKeyDown: this.documentKeyDown.bind(this),
            windowResize: this.windowResize.bind(this)
        };
    },
    elementMouseEnter: function(ev) {
        this.fireEvent('elementMouseEnter', [ev, this.element]);
        if (this.options.displayMode == 2) {
            clearTimeout(this.timer);
            if (!this.expanded) {
                this.timer = this.toggleDropdown.delay(this.options.showDelay, this, [1]);
            }
        }
    },
    elementMouseLeave: function(ev) {
        this.fireEvent('elementMouseLeave', [ev, this.element]);
        if (this.options.displayMode == 2 && !this.options.closeButton) {
            clearTimeout(this.timer);
            this.timer = this.toggleDropdown.delay(this.options.hideDelay, this, [-1]);
        }
    },
    elementClick: function(ev) {
        ev = new DOMEvent(ev);
        if (ev.rightClick) {
            return;
        }
        ev.preventDefault();
        this.fireEvent('elementClick', [ev, this.element]);
        if (this.options.displayMode == 1) {
            this.toggleDropdown();
        }
    },
    boxMouseEnter: function(ev) {
        this.fireEvent('boxMouseEnter', [ev, this.box]);
        clearTimeout(this.timer);
        if (!this.expanded) {
            this.timer = this.toggleDropdown.delay(this.options.showDelay, this, [1]);
        }
    },
    boxMouseLeave: function(ev) {
        this.fireEvent('boxMouseLeave', [ev, this.box]);
        if (!this.options.closeButton) {
            clearTimeout(this.timer);
            this.timer = this.toggleDropdown.delay(this.options.hideDelay, this, [-1]);
        }
    },
    buttonClick: function(ev) {
        ev = new DOMEvent(ev);
        if (ev.rightClick) {
            return;
        }
        ev.preventDefault();
        this.fireEvent('elementClick', [ev, this.element]);
        this.toggleDropdown(-1);
    },
    documentClick: function(ev) {
        ev = new DOMEvent(ev);
        if (this.expanded == false || ev.rightClick) {
            return;
        }
        try {
            var eventTarget = $(ev.target);
            if (this.expanded && eventTarget != this.box && eventTarget != this.element && Element.getParent(eventTarget, 'div.' + this.options.classes.dropdown.replace(/ /gi, '.')) != this.box && Element.getParent(eventTarget, this.element.tagName.toLowerCase()) != this.element) {
                this.toggleDropdown(-1);
            }
        } catch (e) {}
    },
    documentKeyDown: function(ev) {
        ev = new DOMEvent(ev);
        var isSpecial = (ev.alt || ev.control || ev.meta || ev.shift ? true : false);
        if (this.expanded && !isSpecial) {
            switch (ev.key) {
                case 'esc':
                    {
                        ev.stop();this.toggleDropdown(-1);
                        break;
                    }
            }
        }
    },
    windowResize: function() {
        this.position();
    },
    toggleDropdown: function(newState) {
        if (!this.box) {
            return;
        }
        var state = !this.expanded;
        if (newState) {
            switch (newState) {
                case -1:
                    {
                        state = false;
                        break;
                    }
                case 1:
                    {
                        state = true;
                        break;
                    }
            }
        }
        this.expanded = state;
        switch (this.expanded) {
            case true:
                {
                    if (this.options.hideOthersOnShow == true) {
                        $$('.' + this.options.classes.dropdown.replace(/ /gi, '.')).filter(function(box) {
                            return !(box == this.box);
                        }, this).clean().each(function(box) {
                            if (typeof(box.dropdown) != 'undefined' && box.dropdown) {
                                box.dropdown.toggleDropdown(-1);
                            }
                        }, this);
                    }
                    if (!this.element.hasClass(this.options.classes.expanded)) {
                        this.element.addClass(this.options.classes.expanded);
                    }
                    this.position();this.fireEvent('show', [this.element, this.box]);
                    break;
                }
            case false:
                {
                    if (this.element.hasClass(this.options.classes.expanded)) {
                        this.element.removeClass(this.options.classes.expanded);
                    }
                    if (this.highlighted) {
                        this.setHighlightedItem(null);
                    }
                    this.box.hide();this.fireEvent('hide', [this.element, this.box]);
                    break;
                }
        }
    },
    position: function() {
        if (!this.expanded) {
            return;
        }
        var positionTarget = Array.pick([this.options.positionTarget, this.element]);
        var dropdownPos = {
            left: 0,
            right: 0,
            bottom: 0
        };
        dropdownPos = this.getDropdownCoordinates(positionTarget, this.options.positionRelativeTarget);
        var boxWidth = this.box.measure(function() {
            return this.getDimensions().width;
        });
        var alignment = this.options.alignment;
        if (this.options.viewport) {
            var coords = this.getDropdownCoordinates(this.element, this.options.viewport);
            var viewportSize = this.options.viewport.getScrollSize();
            switch (alignment) {
                case 'left':
                    {
                        if (coords.left + boxWidth + Array.pick([this.options.boxOffset.x, 0]) > viewportSize.x) {
                            alignment = 'right';
                        }
                        break;
                    }
                case 'right':
                    {
                        if (coords.right - boxWidth + Array.pick([this.options.boxOffset.x, 0]) < 0) {
                            alignment = 'left';
                        }
                        break;
                    }
            }
        }
        if (!this.box.isDisplayed()) {
            this.box.show();
        }
        switch (alignment) {
            case 'left':
                {
                    var styles = {
                        'left': dropdownPos.left + Array.pick([this.options.boxOffset.x, 0]),
                        'top': dropdownPos.bottom + Array.pick([this.options.boxOffset.y, 0])
                    };this.box.setStyles(styles);
                    break;
                }
            case 'right':
                {
                    var styles = {
                        'left': dropdownPos.right - boxWidth + Array.pick([this.options.boxOffset.x, 0]),
                        'top': dropdownPos.bottom + Array.pick([this.options.boxOffset.y, 0])
                    };this.box.setStyles(styles);
                    break;
                }
        }
        if (Browser.ie && Math.round(Browser.version) < 8) {
            this.box.setStyle('width', boxWidth + 'px');
        }
    },
    getDropdownCoordinates: function(element, relative) {
        var offset = element.getOffsets(),
            size = element.getSize();
        var _position = {
            x: offset.x,
            y: offset.y
        };
        var relativePosition = (relative && (relative = document.id(relative))) ? relative.getOffsets() : {
            x: 0,
            y: 0
        };
        var position = {
            x: _position.x - relativePosition.x,
            y: _position.y - relativePosition.y
        };
        var obj = {
            left: position.x,
            top: position.y,
            width: size.x,
            height: size.y
        };
        if (this.options.position == 'fixed' && this.options.scrollableElement) {
            obj.left -= this.options.scrollableElement.getScroll().x;
            obj.top -= this.options.scrollableElement.getScroll().y;
        }
        obj.right = obj.left + obj.width;
        obj.bottom = obj.top + obj.height;
        return obj;
    }
});
var FormCheck = new Class({
    Implements: [Options, Events],
    options: {
        submitByAjax: false,
        JSONP: false,
        ajaxSubmitAction: '',
        ajaxData: false,
        trimValue: true,
        validateDisabled: false,
        customSubmit: false,
        classes: {
            tip: 'tpl-fc-tip',
            tipTopLeft: 'tpl-fc-tip-tl',
            tipTopRight: 'tpl-fc-tip-tr',
            tipLeft: 'tpl-fc-tip-l',
            tipRight: 'tpl-fc-tip-r',
            tipBottomLeft: 'tpl-fc-tip-bl',
            tipBottomRight: 'tpl-fc-tip-br',
            tipError: 'tpl-fc-tip-error',
            tipClose: 'tpl-fc-tip-close',
            tipArrow: 'tpl-fc-arrow tpl-left',
            errorsList: 'tpl-fc-error',
            errorsListContent: 'tpl-fc-error-content',
            errorsListMultilineContent: 'tpl-fc-multiline',
            errorsListItem: 'tpl-fc-error-item',
            fieldError: 'tpl-fc-field-error'
        },
        display: {
            showErrors: 0,
            titlesInsteadNames: 0,
            errorsLocation: 1,
            indicateErrors: 1,
            indicateErrorsInit: 0,
            keepFocusOnError: 0,
            checkValueIfEmpty: 1,
            addClassErrorToField: 0,
            replaceTipsEffect: 1,
            closeTipsButton: 1,
            tipsContainer: false,
            tipsHook: {
                target: 'bottomRight',
                tip: 'topLeft'
            },
            tipsOffsetX: 0,
            tipsOffsetY: 0,
            tipsZIndex: 'auto',
            tipsWidth: 300,
            customPosTargets: {},
            customElOffsets: {},
            customElAlerts: {},
            customScrollableElements: {},
            listErrorsAtTop: false,
            errorsListContainer: false,
            scrollToFirst: true,
            scrollOffset: {
                top: 0,
                bottom: 0
            },
            scrollableElement: window,
            fadeDuration: 300,
            relative: false,
            relativeParentElement: false
        },
        alerts: {
            required: "This field is required.",
            alpha: "This field accepts alphabetic characters only.",
            alphanum: "This field accepts alphanumeric characters only.",
            alphanum_custom: "This field accepts alphanumeric characters only (including the underscores and dashes).",
            start_letter: "The value must start with a letter.",
            digit: "Please enter a valid integer.",
            no_digit: "No digits are accepted.",
            digit_ltd: "The value must be between %0 and %1.",
            digit_min: "The value must be must be greater than or equal to %0.",
            number: "Please enter a valid number.",
            email: "Please enter a valid e-mail.",
            url: "Please enter a valid url.",
            phone: "Please enter a valid phone number.",
            phone_local: "Please enter a valid phone number using the corresponding local convention.",
            phone_int: "Please enter a valid international phone number.",
            date: "Please enter a valid date.",
            first_name: "The first name contains invalid characters.",
            last_name: "The last name contains invalid characters.",
            captcha: "Please enter the text from the picture.",
            hex_color: "Please enter a valid color in hexadecimal notation.",
            confirm: "This field is different from %0.",
            differs: "This value must be different of %0.",
            length_fix: "The length is incorrect, it must be exactly %0 characters.",
            length_str: "The length is incorrect, it must be between %0 and %1.",
            length_min: "The length is incorrect, it must be at least %0.",
            length_max: "The length is incorrect, it must be at max %0.",
            checkbox: "Please check the box.",
            agreement: "You have to agree to the terms and conditions to continue.",
            radios: "Please select a radio.",
            select: "Please choose a value."
        },
        regexp: {
            required: /[^.*]/,
            alpha: /^[a-z ._-]+$/i,
            alphanum: /^[a-z0-9 ._-]+$/i,
            alphanum_custom: /^[a-z0-9_-]+$/i,
            start_letter: /^[a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]/i,
            digit: /^-?[0-9]+$/,
            no_digit: /^[^0-9]+$/,
            number: /^-?(0|[1-9]\d*)(\.\d+)?$/,
            phone: /^(\+[1-9]|[0]{2}[1-9])?[0-9\-\(\) ]{4,}$/,
            phone_local: /^[0-9][1-9\- ][0-9\-\(\) ]{2,}$/,
            phone_int: /^(\+[1-9]|[0]{2}[1-9])[0-9\-\(\) ]{4,}$/,
            first_name: /^([^\`\~\!\@\#\$\%\^\&\*\(\)\_\+\=\[\]\{\}\:\;\"\/\|\,\.\<\>\?0-9])+$/i,
            last_name: /^([^\`\~\!\@\#\$\%\^\&\*\(\)\_\+\=\[\]\{\}\:\;\"\/\|\,\.\<\>\?0-9])+$/i,
            captcha: /^[a-z0-9]{5}$/i,
            hex_color: /^(#){1}([a-f0-9]){6}$/i
        },
        positionTip: false,
        getScrollPosition: false,
        onBeforeSubmit: function(ev) {},
        onCustomSubmit: function(ev) {},
        onAjaxRequest: function() {},
        onAjaxFailure: function(instance) {},
        onAjaxError: function(text, error) {},
        onAjaxSuccess: function(response) {},
        onFormValid: function() {},
        onFormInvalid: function() {},
        onInputValid: function(el) {},
        onInputInvalid: function(el) {}
    },
    initialize: function(form, options) {
        if ((this.form = $(form))) {
            this.setOptions(options);
            this.form.isValid = true;
            this.validations = [];
            this.alreadyIndicated = false;
            this.firstError = false;
            this.regex = ['length'];
            var regex = new Hash(this.options.regexp);
            regex.each(function(el, key) {
                this.regex.push(key);
            }, this);
            this.bound = {
                submit: this.onSubmit.bind(this),
                mousewheel: this.onMouseWheel.bind(this)
            };
            this.attach();
        }
    },
    attach: function() {
        this.register();
        this.form.addEvent('submit', this.bound.submit);
        document.addEvent('mousewheel', this.bound.mousewheel);
    },
    detach: function() {
        this.dispose();
        this.form.removeEvent('submit', this.bound.submit);
        document.removeEvent('mousewheel', this.bound.mousewheel);
    },
    register: function() {
        this.form.getElements("*[class*=validate]").each(function(el) {
            this.registerElement(el);
        }, this);
    },
    registerElement: function(el) {
        el.validation = [];
        el.getProperty('class').split(' ').each(function(classX) {
            if (classX.match(/^validate(\[.+\])$/)) {
                var validators = eval(classX.match(/^validate(\[.+\])$/)[1]);
                for (var i = 0; i < validators.length; i++) {
                    el.validation.push(validators[i]);
                    if (validators[i].match(/^confirm:/)) {
                        var field = validators[i].match(/.+:(.+)$/)[1];
                        var input = this.form.getElement('input[name="' + field + '"]');
                        if (input && input.validation && input.validation.contains('required') && !validators.contains('required')) {
                            el.validation.push('required');
                        }
                    }
                }
                this.attachElement(el);
            }
        }, this);
        if (this.options.display.titlesInsteadNames) {
            var title = el.getProperty('title');
            if (title && title.length > 0) {
                el.store('title', el.getProperty('title'));
            }
            el.erase('title');
        }
    },
    dispose: function() {
        var validations = Array.clone(this.validations);
        validations.each(function(element) {
            this.disposeElement(element);
        }, this);
        this.reinitialize();
        this.form.isValid = true;
    },
    disposeElement: function(el) {
        el.validation = [];
        el.isOk = true;
        if (this.options.display.titlesInsteadNames) {
            var title = el.retrieve('title');
            if (title && title.length > 0) {
                el.setProperty('title', title);
            }
            el.eliminate('title');
        }
        this.detachElement(el);
        this.validations.erase(el);
    },
    attachElement: function(el) {
        this.validations.push(el);
        el.errors = [];
        if (this.options.display.indicateErrorsInit) {
            this.validations.each(function(el) {
                if (!this.manageError(el, 'submit')) {
                    this.form.isValid = false;
                }
            }, this);
            return true;
        }
        if (el.validation[0] == 'submit') {
            var event = function(e) {
                this.onSubmit(e);
            }.bind(this);
            el.store('event:submit', event).addEvent('click', event);
            return true;
        }
        if (this.isChildType(el) == true) {
            var radios = this.form.getElements('input[name="' + el.getProperty('name') + '"]');
            radios.each(function(radio) {
                var event = function() {
                    (function() {
                        if ((el.element || this.options.display.showErrors == 1) && (this.options.display.checkValueIfEmpty || el.value)) {
                            this.manageError(el, 'click');
                        }
                    }.bind(this)).delay(100);
                }.bind(this);
                radio.store('event:blur', event).addEvent('blur', event);
            }, this);
        } else {
            var event = function() {
                (function() {
                    if (!this.fxRunning && (el.element || this.options.display.showErrors == 1) && (this.options.display.checkValueIfEmpty || el.value)) {
                        this.manageError(el, 'blur');
                    }
                }.bind(this)).delay(100);
            }.bind(this);
            el.store('event:blur', event).addEvent('blur', event);
        }
    },
    detachElement: function(el) {
        this.removeError(el);
        var event = el.retrieve('event:submit');
        if (event) {
            el.removeEvent('submit', event).eliminate('event:submit');
        }
        if (this.isChildType(el) == true) {
            var radios = this.form.getElements('input[name="' + el.getProperty('name') + '"]');
            radios.each(function(radio) {
                var event = radio.retrieve('event:blur');
                if (event) {
                    radio.removeEvent('blur', event).eliminate('event:blur');
                }
            }, this);
        } else {
            var event = el.retrieve('event:blur');
            if (event) {
                el.removeEvent('blur', event).eliminate('event:blur');
            }
        }
    },
    isChildType: function(el) {
        return (typeof(el.type) != 'undefined' && el.type == 'radio') ? true : false;
    },
    manageError: function(el, method) {
        var isValid = this.validate(el);
        if ((!isValid && el.validation.flatten()[0].contains('confirm:')) || (!isValid && el.validation.contains('required')) || (!el.validation.contains('required') && el.value && !isValid)) {
            if (this.options.display.indicateErrors == 1 && this.alreadyIndicated) {
                return false;
            }
            if (this.options.display.listErrorsAtTop == true && method == 'submit') {
                this.listErrorsAtTop(el, method);
            }
            if (this.options.display.indicateErrors == 2 || this.alreadyIndicated == false || el.name == this.alreadyIndicated.name) {
                this.fireEvent('inputInvalid', [el]);
                if (!this.firstError) {
                    this.firstError = el;
                }
                this.alreadyIndicated = el;
                if (this.options.display.keepFocusOnError && el.name == this.firstError.name) {
                    (function() {
                        el.focus();
                    }).delay(20);
                }
                this.addError(el);
                return false;
            }
        } else if ((isValid || (!el.validation.contains('required') && !el.value)) && el.element) {
            this.fireEvent('inputValid', [el]);
            this.removeError(el);
            return true;
        }
        this.fireEvent('inputValid', [el]);
        return true;
    },
    validate: function(el) {
        el.errors = [];
        el.isOk = true;
        if (!this.options.validateDisabled && el.get('disabled')) {
            return true;
        }
        if (this.options.trimValue && el.value) {
            el.value = el.value.trim();
        }
        el.validation.each(function(rule) {
            if (this.isChildType(el) == true) {
                if (this.validateGroup(el) == false) {
                    el.isOk = false;
                }
            } else {
                var ruleArgs = [];
                var ruleMethod = rule;
                if (rule.match(/^.+\[[^>]*\]$/)) {
                    try {
                        ruleMethod = rule.split('[')[0];
                        ruleArgs = eval(rule.match(/^.+(\[.+\])$/)[1].replace(/([A-Z0-9\._-]+)/i, "'$1'"));
                    } catch (err) {
                        return true;
                    }
                }
                if (this.regex.contains(ruleMethod) && el.get('tag') != 'select' && el.type != 'checkbox') {
                    if (this.validateRegex(el, ruleMethod, ruleArgs) == false) {
                        el.isOk = false;
                    }
                }
                if (ruleMethod == 'email') {
                    if (this.validateEmail(el) == false) {
                        el.isOk = false;
                    }
                }
                if (ruleMethod == 'url') {
                    if (this.validateUrl(el, ruleArgs) == false) {
                        el.isOk = false;
                    }
                }
                if (ruleMethod == 'date' && el.get('tag') != 'select') {
                    if (this.validateDate(el) == false) {
                        el.isOk = false;
                    }
                } else if (rule.match(/^date:\{[^>]*\}$/i)) {
                    try {
                        ruleArgs = [eval('({' + rule.match(/\{(.*)\}$/)[1].split(',').map(function(el) {
                            return el.split(':').map(function(objItem) {
                                return "'" + objItem.trim() + "'"
                            }).join(': ');
                        }).join(', ') + '})')];
                        if (this.validateDate(el, ruleArgs) == false) {
                            el.isOk = false;
                        }
                    } catch (e) {}
                }
                if (rule.match(/confirm:.+/)) {
                    try {
                        ruleArgs = [rule.match(/.+:(.+)$/)[1]];
                        if (this.validateConfirm(el, ruleArgs) == false) {
                            el.isOk = false;
                        }
                    } catch (err) {}
                }
                if (rule.match(/differs:.+/)) {
                    try {
                        ruleArgs = [rule.match(/.+:(.+)$/)[1]];
                        if (this.validateDiffers(el, ruleArgs) == false) {
                            el.isOk = false;
                        }
                    } catch (err) {}
                }
                if ((el.get('tag') == 'select' || el.type == 'checkbox') && ruleMethod == 'required') {
                    if (this.simpleValidate(el, ruleArgs) == false) {
                        el.isOk = false;
                    }
                }
                if (rule.match(/%[A-Z0-9\._-]+$/i) || (el.isOk && rule.match(/~[A-Z0-9\._-]+$/i))) {
                    if (eval(rule.slice(1) + '(el, this)') == false) {
                        el.isOk = false;
                    }
                }
            }
        }, this);
        if (el.isOk) {
            return true;
        }
        return false;
    },
    validateForm: function() {
        this.reset();
        this.validations.each(function(el) {
            if (!this.manageError(el, 'submit')) {
                this.form.isValid = false;
            }
        }, this);
        return this.form.isValid;
    },
    listErrorsAtTop: function(obj) {
        if (!this.form.element) {
            this.form.element = (this.options.display.errorsListContainer ? this.options.display.errorsListContainer : new Element('div', {
                'class': this.options.classes.errorsList
            }).adopt(new Element('div', {
                'class': this.options.classes.errorsListContent
            })).inject(this.form, 'before'));
            var container = this.form.element.getElement('.' + this.options.classes.errorsListContent.replace(/ /g, '.'));
            if (container) {
                container.empty();
            }
        }
        if (this.form.element.isDisplayed() == false) {
            this.form.element.show();
        }
        var container = this.form.element.getElement('.' + this.options.classes.errorsListContent.replace(/ /g, '.'));
        if (container) {
            if (typeOf(obj) == 'collection') {
                new Element('span', {
                    'div': this.options.classes.errorsListItem
                }).set('html', obj[0].errors[0]).inject(container, 'inside');
            } else if (obj.errors.length > 0) {
                obj.errors.each(function(error) {
                    new Element('div', {
                        'class': this.options.classes.errorsListItem
                    }).set('html', error).inject(container, 'inside');
                }, this);
            }
            var items = container.getElements('.' + this.options.classes.errorsListItem.replace(/ /g, '.'));
            if (items.length > 1 && !container.hasClass(this.options.classes.errorsListMultilineContent)) {
                container.addClass(this.options.classes.errorsListMultilineContent);
            } else if (items.length == 1 && container.hasClass(this.options.classes.errorsListMultilineContent)) {
                container.removeClass(this.options.classes.errorsListMultilineContent);
            }
        }
    },
    addError: function(obj) {
        var customTargets = new Hash(this.options.display.customPosTargets);
        var posTarget = (typeof(obj.id) != 'undefined' && customTargets.has(obj.id) ? $(customTargets.get(obj.id)) : obj);
        var posEvent = false;
        if (!obj.element && this.options.display.indicateErrors != 0) {
            if (this.options.display.errorsLocation == 1) {
                if (this.options.display.relative == false) {
                    var styles = {
                        'opacity': 0,
                        'position': 'absolute',
                        'float': 'left',
                        'width': this.options.display.tipsWidth
                    };
                    if (this.options.display.tipsZIndex != 'auto') {
                        styles['z-index'] = this.options.display.tipsZIndex;
                    }
                    obj.element = new Element('div', {
                        'class': this.options.classes.tip,
                        'styles': styles
                    }).inject(document.body, 'inside');
                    posEvent = this.addPositionEvent(obj);
                } else {
                    var styles = {
                        'opacity': 0,
                        'position': 'absolute',
                        'float': 'left',
                        'width': this.options.display.tipsWidth
                    };
                    if (this.options.display.tipsZIndex != 'auto') {
                        styles['z-index'] = this.options.display.tipsZIndex;
                    }
                    var container = (this.options.display.tipsContainer != false ? (typeOf(this.options.display.tipsContainer) == 'element' ? this.options.display.tipsContainer : posTarget.getParent(this.options.display.tipsContainer)) : null) || posTarget;
                    var where = (container != posTarget ? 'inside' : 'after');
                    obj.element = new Element('div', {
                        'class': this.options.classes.tip,
                        'styles': styles
                    }).inject(container, where);
                    posEvent = this.addPositionEvent(obj);
                }
            } else if (this.options.display.errorsLocation == 2) {
                var styles = {
                    'opacity': 0,
                    'width': this.options.display.tipsWidth
                };
                if (this.options.display.tipsZIndex != 'auto') {
                    styles['z-index'] = this.options.display.tipsZIndex;
                }
                obj.element = new Element('div', {
                    'class': this.options.classes.errorsList,
                    'styles': styles
                }).inject(posTarget, 'before');
            } else if (this.options.display.errorsLocation == 3) {
                var styles = {
                    'opacity': 0,
                    'width': this.options.display.tipsWidth
                };
                if (this.options.display.tipsZIndex != 'auto') {
                    styles['z-index'] = this.options.display.tipsZIndex;
                }
                obj.element = new Element('div', {
                    'class': this.options.classes.errorsList,
                    'styles': styles
                });
                if (typeOf(obj.group) == 'object' || typeOf(obj.group) == 'collection') {
                    obj.element.inject(obj.group[obj.group.length - 1], 'after');
                } else {
                    obj.element.inject(posTarget, 'after');
                }
            }
        }
        if (obj.element && obj.element != true) {
            obj.element.empty();
            if (this.options.display.errorsLocation == 1) {
                var errors = [];
                obj.errors.each(function(error) {
                    errors.push(new Element('p').set('html', error));
                });
                var tips = this.makeTips(errors).inject(obj.element, 'inside');
                if (this.options.display.closeTipsButton) {
                    var event = function() {
                        this.removeError(obj);
                    }.bind(this);
                    tips.getElements('.' + this.options.classes.tipClose.replace(/ /gi, '.')).store('event:mouseup', event).addEvent('mouseup', event);
                }
            } else {
                obj.errors.each(function(error) {
                    new Element('p').set('html', error).inject(obj.element, 'inside');
                });
            }
            if ((!this.options.display.fadeDuration || (Browser.ie && Math.round(Browser.version) < 9)) && this.options.display.errorsLocation < 2) {
                obj.element.setStyle('opacity', 1);
                obj.element.style.removeAttribute('filter');
            } else {
                obj.hideMe = false;
                obj.fx = new Fx.Tween(obj.element, {
                    'duration': this.options.display.fadeDuration,
                    'ignore': true,
                    'onStart': function() {
                        this.fxRunning = true;
                    }.bind(this),
                    'onComplete': function() {
                        this.fxRunning = false;
                        if (obj.element && obj.element.getStyle('opacity').toInt() == 0 && typeof(obj.hideMe) != 'undefined' && obj.hideMe == true) {
                            obj.element.destroy();
                            obj.element = false;
                        }
                    }.bind(this)
                });
                if (obj.element.getStyle('opacity').toInt() != 1) {
                    obj.fx.start('opacity', 1);
                }
            }
        }
        if (this.options.display.addClassErrorToField && this.isChildType(obj) == false) {
            obj.addClass(this.options.classes.fieldError);
            obj.element = obj.element || true;
        }
        if (posEvent) {
            posEvent.apply(null, [obj]);
        }
    },
    removeError: function(obj) {
        if (this.alreadyIndicated == obj) {
            this.alreadyIndicated = false;
        }
        obj.errors = [];
        obj.isOk = true;
        if (this.options.display.errorsLocation == 1 && obj.element) {
            if (this.options.display.closeTipsButton) {
                var event = obj.element.getElement('.' + this.options.classes.tipClose.replace(/ /gi, '.')).retrieve('event:mouseup');
                if (event) {
                    obj.element.getElements('.' + this.options.classes.tipClose.replace(/ /gi, '.')).removeEvent('mouseup', event).eliminate('event:mouseup');
                }
            }
        } else if (this.options.display.errorsLocation >= 2 && obj.element) {
            new Fx.Tween(obj.element, {
                'duration': this.options.display.fadeDuration
            }).start('height', 0);
        }
        if ((!this.options.display.fadeDuration || (Browser.ie && Math.round(Browser.version) < 9)) && this.options.display.errorsLocation == 1 && obj.element) {
            this.fxRunning = true;
            obj.element.destroy();
            obj.element = false;
            (function() {
                this.fxRunning = false;
            }.bind(this)).delay(200);
        } else if (obj.element && obj.element != true) {
            obj.hideMe = true;
            obj.fx.start('opacity', 0);
        }
        if (this.options.display.addClassErrorToField && !this.isChildType(obj)) {
            obj.removeClass(this.options.classes.fieldError);
        }
        this.removePositionEvent(obj);
    },
    addPositionEvent: function(obj) {
        var event = (this.options.positionTip && typeOf(this.options.positionTip) == 'function' ? this.options.positionTip.bind(this, obj) : this.positionTip.bind(this, obj));
        obj.store('event:resize', event);
        window.addEvent('resize', event);
        return event;
    },
    positionTip: function(obj) {
        var customOffsets = new Hash(this.options.display.customElOffsets);
        var customTargets = new Hash(this.options.display.customPosTargets);
        var posTarget = (typeof(obj.id) != 'undefined' && customTargets.has(obj.id) ? $(customTargets.get(obj.id)) : obj);
        if (typeOf(obj.element) == 'element') {
            var top = 0;
            var left = 0;
            if (this.options.display.replaceTipsEffect) {
                top = [parseInt(obj.element.getStyle('top')), 0];
                left = [parseInt(obj.element.getStyle('left')), 0];
            }
            if (this.options.display.relative == false) {
                var coords = posTarget.getCoordinates();
                this.positionModify(obj.element, coords, this.options.display.tipsHook.target, 1);
                this.positionModify(obj.element, coords, this.options.display.tipsHook.tip, -1);
                if (this.options.display.replaceTipsEffect) {
                    top[1] = coords.top + (typeof(obj.id) != 'undefined' && customOffsets.has(obj.id) ? customOffsets.get(obj.id).tipsOffsetY : this.options.display.tipsOffsetY);
                    left[1] = coords.left + (typeof(obj.id) != 'undefined' && customOffsets.has(obj.id) ? customOffsets.get(obj.id).tipsOffsetX : this.options.display.tipsOffsetX);
                } else {
                    top = coords.top + (typeof(obj.id) != 'undefined' && customOffsets.has(obj.id) ? customOffsets.get(obj.id).tipsOffsetY : this.options.display.tipsOffsetY);
                    left = coords.left + (typeof(obj.id) != 'undefined' && customOffsets.has(obj.id) ? customOffsets.get(obj.id).tipsOffsetX : this.options.display.tipsOffsetX);
                }
            } else {
                var relObj = (this.options.display.relativeParentElement != false ? (typeOf(this.options.display.relativeParentElement) == 'element' ? this.options.display.relativeParentElement : posTarget.getParent(this.options.display.relativeParentElement)) : posTarget.getOffsetParent());
                var coords = posTarget.getRelativeCoordinates(relObj);
                this.positionModify(obj.element, coords, this.options.display.tipsHook.target, 1);
                this.positionModify(obj.element, coords, this.options.display.tipsHook.tip, -1);
                if (this.options.display.replaceTipsEffect) {
                    top[1] = coords.top + (typeof(obj.id) != 'undefined' && customOffsets.has(obj.id) ? customOffsets.get(obj.id).tipsOffsetY : this.options.display.tipsOffsetY);
                    left[1] = coords.left + (typeof(obj.id) != 'undefined' && customOffsets.has(obj.id) ? customOffsets.get(obj.id).tipsOffsetX : this.options.display.tipsOffsetX);
                } else {
                    top = coords.top + (typeof(obj.id) != 'undefined' && customOffsets.has(obj.id) ? customOffsets.get(obj.id).tipsOffsetY : this.options.display.tipsOffsetY);
                    left = coords.left + (typeof(obj.id) != 'undefined' && customOffsets.has(obj.id) ? customOffsets.get(obj.id).tipsOffsetX : this.options.display.tipsOffsetX);
                }
            }
            if (this.options.display.replaceTipsEffect) {
                new Fx.Morph(obj.element, {
                    'duration': this.options.display.fadeDuration
                }).start({
                    'top': top,
                    'left': left
                });
            } else {
                obj.element.setStyles({
                    'top': top,
                    'left': left
                });
            }
        }
    },
    positionTips: function() {
        this.validations.each(function(el) {
            if (!el.isOk && el.element) {
                (this.options.positionTip && typeOf(this.options.positionTip) == 'function' ? this.options.positionTip : this.positionTip).apply(this, [el]);
            }
        }, this);
    },
    positionModify: function(tip, targetCoords, corner, neg) {
        var tipCoords = tip.getDimensions();
        if (corner == 'topRight') {
            targetCoords.left += (neg > 0 ? targetCoords.width : tipCoords.width) * neg;
        } else if (corner == 'bottomLeft') {
            targetCoords.top += (neg > 0 ? targetCoords.height : tipCoords.height) * neg;
        } else if (corner == 'bottomRight') {
            targetCoords.top += (neg > 0 ? targetCoords.height : tipCoords.height) * neg;
            targetCoords.left += (neg > 0 ? targetCoords.width : tipCoords.width) * neg;
        } else if (corner == 'topMid') {
            targetCoords.left += ((neg > 0 ? targetCoords.width : tipCoords.width) / 2) * neg;
        } else if (corner == 'leftMid') {
            targetCoords.top += ((neg > 0 ? targetCoords.height : tipCoords.height) / 2) * neg;
        } else if (corner == 'bottomMid') {
            targetCoords.top += (neg > 0 ? targetCoords.height : tipCoords.height) * neg;
            targetCoords.left += ((neg > 0 ? targetCoords.width : tipCoords.width) / 2) * neg;
        } else if (corner == 'rightMid') {
            targetCoords.top += ((neg > 0 ? targetCoords.height : tipCoords.height) / 2) * neg;
            targetCoords.left += (neg > 0 ? targetCoords.width : tipCoords.width) * neg;
        }
    },
    removePositionEvent: function(obj) {
        var event = obj.retrieve('event:resize');
        if (event) {
            window.removeEvent('resize', event);
            obj.eliminate('event:resize');
        }
    },
    makeTips: function(txt) {
        var table = new Element('table');
        table.cellPadding = '0';
        table.cellSpacing = '0';
        table.border = '0';
        var tbody = new Element('tbody').inject(table, 'inside');
        var tr1 = new Element('tr').inject(tbody, 'inside');
        new Element('td', {
            'class': this.options.classes.tipTopLeft
        }).inject(tr1, 'inside');
        new Element('td', {
            'class': this.options.classes.tipTopRight
        }).inject(tr1, 'inside');
        var tr2 = new Element('tr').inject(tbody, 'inside');
        new Element('td', {
            'class': this.options.classes.tipLeft
        }).inject(tr2, 'inside');
        var cont = new Element('td', {
            'class': this.options.classes.tipRight
        }).inject(tr2, 'inside');
        var errors = new Element('div', {
            'class': this.options.classes.tipError
        }).inject(cont, 'inside');
        txt.each(function(error) {
            error.inject(errors, 'inside');
        });
        if (this.options.classes.tipArrow.length > 0) {
            new Element('span', {
                'class': this.options.classes.tipArrow
            }).inject(cont, 'top');
        }
        if (this.options.display.closeTipsButton) {
            new Element('a', {
                'class': this.options.classes.tipClose
            }).inject(cont, 'inside');
        }
        var tr3 = new Element('tr').inject(tbody, 'inside');
        new Element('td', {
            'class': this.options.classes.tipBottomLeft
        }).inject(tr3, 'inside');
        new Element('td', {
            'class': this.options.classes.tipBottomRight
        }).inject(tr3, 'inside');
        return table;
    },
    onSubmit: function(event) {
        this.fireEvent('beforeSubmit', [event]);
        if (this.validateForm() == true) {
            this.fireEvent('formValid');
            if (this.options.submitByAjax) {
                if (event) {
                    new DOMEvent(event).stop();
                }
                this.submitByAjax();
            } else if (this.options.customSubmit) {
                if (event) {
                    new DOMEvent(event).stop();
                }
                this.fireEvent('customSubmit', [event]);
            }
        } else {
            this.fireEvent('formInvalid');
            if (event) {
                new DOMEvent(event).stop();
            }
            if (this.elementToRemove && this.elementToRemove != this.firstError && this.options.display.indicateErrors == 1) {
                this.removeError(this.elementToRemove);
            }
            this.focusOnError(this.firstError);
        }
    },
    submitByAjax: function() {
        if (typeof(this.submitting) != 'undefined' && this.submitting == true) {
            return;
        } else {
            this.submitting = true;
        }
        var url = (this.options.ajaxSubmitAction.length > 0) ? this.options.ajaxSubmitAction : this.form.getProperty('action');
        this.fireEvent('ajaxRequest');
        var data = this.form.toQueryString();
        if (this.options.ajaxData) {
            var ajaxData = (typeOf(this.options.ajaxData) == 'string' ? this.options.ajaxData.parseQueryString() : this.options.ajaxData);
            if (ajaxData && typeOf(ajaxData) == 'object' && Object.getLength(ajaxData) > 0) {
                var dataObj = data.parseQueryString();
                Object.each(dataObj, function(v, k) {
                    if (k.substr(k.length - 2) == '[]' && typeOf(v) == 'array') {
                        Object.erase(dataObj, k);
                        dataObj[k.replace(/\[\]$/, '')] = v;
                    }
                });
                data = Object.toQueryString(Object.merge(dataObj, ajaxData));
            }
        }
        if (this.options.JSONP == true) {
            new Request.JSONP({
                url: url,
                data: data,
                onCancel: function() {
                    this.submitting = false;
                    this.fireEvent('ajaxFailure');
                }.bind(this),
                onComplete: function(result) {
                    this.submitting = false;
                    this.fireEvent('ajaxSuccess', [result]);
                }.bind(this)
            }).send();
        } else {
            new Request.JSON({
                url: url,
                method: this.form.getProperty('method'),
                data: data,
                onFailure: function(instance) {
                    this.submitting = false;
                    this.fireEvent('ajaxFailure', [instance]);
                }.bind(this),
                onError: function(text, error) {
                    this.submitting = false;
                    this.fireEvent('ajaxError', [text, error]);
                }.bind(this),
                onSuccess: function(result) {
                    this.submitting = false;
                    this.fireEvent('ajaxSuccess', [result]);
                }.bind(this)
            }).send();
        }
    },
    reinitialize: function() {
        this.validations.each(function(el) {
            if (typeOf(el.element) == 'element') {
                el.element.destroy();
                el.element = false;
            }
        }, this);
        this.alreadyFocused = false;
        this.firstError = false;
        this.elementToRemove = this.alreadyIndicated;
        this.alreadyIndicated = false;
    },
    reset: function() {
        this.reinitialize();
        this.validations.each(function(el) {
            el.errors = [];
            el.isOk = true;
            this.fireEvent('inputValid', [el]);
        }, this);
        if (this.form.element) {
            this.form.element.hide();
            var container = this.form.element.getElement('.' + this.options.classes.errorsListContent.replace(/ /g, '.'));
            if (container) {
                container.empty();
            }
        }
        this.form.isValid = true;
    },
    focusOnError: function(obj) {
        var customScrollable = new Hash(this.options.display.customScrollableElements);
        var scrollableElement = (typeof(obj.id) != 'undefined' && customScrollable.has(obj.id) ? $(customScrollable.get(obj.id)) : ((this.options.display.scrollableElement != false && this.options.display.scrollableElement != window ? (typeOf(this.options.display.scrollableElement) == 'element' ? this.options.display.scrollableElement : obj.getParent(this.options.display.scrollableElement)) : null) || window));
        if (this.options.display.scrollToFirst && scrollableElement && !this.alreadyFocused && !this.isScrolling) {
            var pos = (this.options.getScrollPosition && typeOf(this.options.getScrollPosition) == 'function' ? this.options.getScrollPosition.apply(this, [obj]) : this.getScrollPosition.apply(this, [obj]));
            var scrollY = scrollableElement.getScroll().y;
            var scrollableSizeY = scrollableElement.getHeight();
            var scrollToY = -1;
            if (pos.top > -1 && scrollY > pos.top) {
                scrollToY = pos.top + this.options.display.scrollOffset.top;
            } else if (pos.top > -1 && pos.bottom > -1 && ((scrollY < pos.top && scrollY + scrollableSizeY < pos.top) || (scrollY < pos.bottom && scrollY + scrollableSizeY < pos.bottom))) {
                scrollToY = Math.min(scrollableElement.getScrollSize().y - scrollableSizeY, pos.bottom - scrollableSizeY) + this.options.display.scrollOffset.bottom;
            }
            if (scrollToY > -1) {
                this.isScrolling = true;
                if (obj.element) {
                    obj.element.hide();
                }
                obj.scrollFx = new Fx.Scroll(scrollableElement, {
                    link: 'cancel',
                    wheelStops: false,
                    onComplete: function() {
                        this.isScrolling = false;
                        if (obj.get('type') != 'hidden') {
                            obj.focus();
                        }
                        if (obj.element) {
                            (this.options.positionTip && typeOf(this.options.positionTip) == 'function' ? this.options.positionTip : this.positionTip).apply(this, [obj]);
                            obj.element.show();
                        }
                    }.bind(this)
                }).start(0, scrollToY);
            } else {
                this.isScrolling = false;
                if (obj.element) {
                    obj.element.hide();
                }
                if (obj.get('type') != 'hidden') {
                    obj.focus();
                }
                if (obj.element) {
                    (this.options.positionTip && typeOf(this.options.positionTip) == 'function' ? this.options.positionTip : this.positionTip).apply(this, [obj]);
                    obj.element.show();
                }
            }
            this.alreadyFocused = true;
        } else if (!this.alreadyFocused) {
            if (obj.get('type') != 'hidden') {
                obj.focus();
            }
            this.alreadyFocused = true;
        }
    },
    getScrollPosition: function(obj) {
        var top = -1;
        var bottom = -1;
        var customScrollable = new Hash(this.options.display.customScrollableElements);
        var scrollableElement = (typeof(obj.id) != 'undefined' && customScrollable.has(obj.id) ? $(customScrollable.get(obj.id)) : ((this.options.display.scrollableElement != false && this.options.display.scrollableElement != window ? (typeOf(this.options.display.scrollableElement) == 'element' ? this.options.display.scrollableElement : obj.getParent(this.options.display.scrollableElement)) : null) || window));
        if (!this.options.display.indicateErrors || !this.options.display.errorsLocation) {
            if (this.options.display.relative) {
                var relObj = obj.getOffsetParent();
                if (obj.getStyle('display') == 'none') {
                    obj.show();
                    relObj = obj.getOffsetParent();
                    obj.hide();
                }
                var coords = obj.getRelativeCoordinates(relObj);
                top = coords.top - 10;
                bottom = coords.bottom + 10;
            } else {
                var coords = obj.measure(function() {
                    return this.getCoordinates()
                });
                top = coords.top - 10;
                bottom = coords.bottom + 10;
            }
        } else if (this.alreadyIndicated.element) {
            switch (this.options.display.errorsLocation) {
                case 1:
                    var customTargets = new Hash(this.options.display.customPosTargets);
                    var posTarget = (typeof(obj.id) != 'undefined' && customTargets.has(obj.id) ? $(customTargets.get(obj.id)) : obj);
                    if (this.options.display.relative) {
                        var position = (scrollableElement && typeOf(scrollableElement) == 'element' ? scrollableElement.getStyle('position') : false);
                        var relObj = (['absolute', 'relative'].contains(position)) ? scrollableElement : obj.getOffsetParent();
                        if (posTarget.getStyle('display') == 'none') {
                            posTarget.show();
                            relObj = (['absolute', 'relative'].contains(position)) ? scrollableElement : posTarget.getOffsetParent();
                            posTarget.hide();
                        }
                        var coords = posTarget.getRelativeCoordinates(relObj);
                        top = (coords.top > 10 ? coords.top - 10 : 0);
                        bottom = coords.bottom + 10;
                    } else {
                        var coords = posTarget.measure(function() {
                            return this.getCoordinates()
                        });
                        top = (coords.top > 10 ? coords.top - 10 : 0);
                        bottom = coords.bottom + 10;
                    }
                    break;
                case 2:
                    if (this.options.display.relative) {
                        var position = (scrollableElement && typeOf(scrollableElement) == 'element' ? scrollableElement.getStyle('position') : false);
                        var relObj = (['absolute', 'relative'].contains(position)) ? scrollableElement : obj.getOffsetParent();
                        if (obj.getStyle('display') == 'none') {
                            obj.show();
                            relObj = (['absolute', 'relative'].contains(position)) ? scrollableElement : obj.getOffsetParent();
                            obj.hide();
                        }
                        top = obj.element.getRelativeCoordinates(relObj).top - 30;
                    } else {
                        top = obj.element.measure(function() {
                            return this.getCoordinates().top
                        }) - 30;
                    }
                    break;
                case 3:
                    if (this.options.display.relative) {
                        var position = (scrollableElement && typeOf(scrollableElement) == 'element' ? scrollableElement.getStyle('position') : false);
                        var relObj = (['absolute', 'relative'].contains(position)) ? scrollableElement : obj.getOffsetParent();
                        if (obj.getStyle('display') == 'none') {
                            obj.show();
                            relObj = (['absolute', 'relative'].contains(position)) ? scrollableElement : obj.getOffsetParent();
                            obj.hide();
                        }
                        top = obj.getRelativeCoordinates(relObj).top - 30;
                    } else {
                        top = obj.measure(function() {
                            return this.getCoordinates().top
                        }) - 30;
                    }
                    break;
            }
        }
        return {
            top: top,
            bottom: bottom
        };
    },
    onMouseWheel: function(event) {
        this.isScrolling = false;
    },
    validateRegex: function(el, ruleMethod, ruleArgs) {
        var msg = '';
        var title = el.retrieve('title');
        if (ruleArgs[1] && ruleMethod == 'length') {
            if (ruleArgs[1] == -1) {
                this.options.regexp.length = new RegExp("^[\\s\\S]{" + ruleArgs[0] + ",}$");
                msg = this.options.alerts.length_min.replace('%0', ruleArgs[0]);
            } else if (ruleArgs[0] == ruleArgs[1]) {
                this.options.regexp.length = new RegExp("^[\\s\\S]{" + ruleArgs[0] + "}$");
                msg = this.options.alerts.length_fix.replace('%0', ruleArgs[0]);
            } else {
                this.options.regexp.length = new RegExp("^[\\s\\S]{" + ruleArgs[0] + "," + ruleArgs[1] + "}$");
                msg = this.options.alerts.length_str.replace('%0', ruleArgs[0]).replace('%1', ruleArgs[1]);
            }
        } else if (ruleArgs[0] && ruleMethod == 'length') {
            this.options.regexp.length = new RegExp("^[\\s\\S]{0," + ruleArgs[0] + "}$");
            msg = this.options.alerts.length_max.replace('%0', ruleArgs[0]);
        } else {
            msg = this.options.alerts[ruleMethod];
        }
        if (ruleArgs[1] && ruleMethod == 'digit') {
            var regres = true;
            var valueres = false;
            if (!this.options.regexp.digit.test(el.value)) {
                if (el.id && typeof(this.options.display.customElAlerts[el.id]) != 'undefined') {
                    msg = this.options.display.customElAlerts[el.id];
                    if (!el.errors.contains(msg)) {
                        el.errors.push(msg);
                    }
                } else if (this.options.display.titlesInsteadNames && title && title.length > 0) {
                    msg = title;
                    if (!el.errors.contains(msg)) {
                        el.errors.push(msg);
                    }
                } else {
                    el.errors.push(this.options.alerts[ruleMethod]);
                }
                regres = false;
            }
            if (ruleArgs[1] == -1) {
                if (el.value >= parseInt(ruleArgs[0])) {
                    valueres = true;
                }
                msg = this.options.alerts.digit_min.replace('%0', ruleArgs[0]);
                if (el.id && typeof(this.options.display.customElAlerts[el.id]) != 'undefined') {
                    msg = this.options.display.customElAlerts[el.id];
                } else if (this.options.display.titlesInsteadNames && title && title.length > 0) {
                    msg = title;
                }
            } else {
                if (el.value >= parseInt(ruleArgs[0]) && el.value <= parseInt(ruleArgs[1])) {
                    valueres = true;
                }
                msg = this.options.alerts.digit_ltd.replace('%0', ruleArgs[0]).replace('%1', ruleArgs[1]);
                if (el.id && typeof(this.options.display.customElAlerts[el.id]) != 'undefined') {
                    msg = this.options.display.customElAlerts[el.id];
                } else if (this.options.display.titlesInsteadNames && title && title.length > 0) {
                    msg = title;
                }
            }
            if (regres == false || valueres == false) {
                if (!el.errors.contains(msg)) {
                    el.errors.push(msg);
                }
                return false;
            }
        } else if (this.options.regexp[ruleMethod].test(el.value) == false) {
            if (el.id && typeof(this.options.display.customElAlerts[el.id]) != 'undefined') {
                msg = this.options.display.customElAlerts[el.id];
                if (!el.errors.contains(msg)) {
                    el.errors.push(msg);
                }
            } else if (this.options.display.titlesInsteadNames && title && title.length > 0) {
                msg = title;
                if (!el.errors.contains(msg)) {
                    el.errors.push(msg);
                }
            } else {
                el.errors.push(msg);
            }
            return false;
        }
        return true;
    },
    validateEmail: function(el) {
        var email = el.value;
        if (email.indexOf('@') > -1) {
            mail = email.split('@');
            domain = mail.pop();
            if (domain.length > 0) {
                var chars = this.countChars(domain, 1);
                if (chars && typeof(chars) == 'object') {
                    var isASCII = true;
                    Object.each(chars, function(l, k) {
                        if (parseInt(k) > 127) {
                            isASCII = false;
                        }
                    });
                    if (isASCII == false) {
                        domain = new Punycode().ToASCII(domain);
                    }
                }
                mail.push(domain);
                email = mail.join('@');
            }
        }
        var regex = /^[a-z0-9!#$%&\'*+\/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&\'*+\/=?^_`{|}~-]+)*@(?:[a-z0-9][-a-z0-9]*\.)*(?:[a-z0-9][-a-z0-9]{0,62})\.(?:(?:[a-z]{2}\.)?[a-z]{2,})$/i;
        if (regex.test(email)) {
            return true;
        }
        var msg = el.retrieve('title');
        if (el.id && typeof(this.options.display.customElAlerts[el.id]) != 'undefined') {
            msg = this.options.display.customElAlerts[el.id];
            if (!el.errors.contains(msg)) {
                el.errors.push(msg);
            }
        } else if (this.options.display.titlesInsteadNames && msg && msg.length > 0) {
            if (!el.errors.contains(msg)) {
                el.errors.push(msg);
            }
        } else {
            el.errors.push(this.options.alerts.email);
        }
        return false;
    },
    validateUrl: function(el, ruleArgs) {
        var url = el.value;
        var urlParts = this.parseUrl(url);
        if (typeof(urlParts['host']) != 'undefined' && urlParts['host'].length > 0) {
            var chars = this.countChars(urlParts['host'], 1);
            if (chars && typeof(chars) == 'object') {
                var isASCII = true;
                Object.each(chars, function(l, k) {
                    if (parseInt(k) > 127) {
                        isASCII = false;
                    }
                });
                if (isASCII == false) {
                    urlParts['host'] = new Punycode().ToASCII(urlParts['host']);
                    url = (typeof(urlParts['scheme']) != 'undefined' && urlParts['scheme'].length > 0 ? urlParts['scheme'] + '://' : '');
                    url += (typeof(urlParts['user']) != 'undefined' && urlParts['user'].length > 0 ? urlParts['user'] : '');
                    url += (typeof(urlParts['user']) != 'undefined' && urlParts['user'].length > 0 && $defined(urlParts['pass']) && urlParts['pass'].length > 0 ? ':' : '');
                    url += (typeof(urlParts['pass']) != 'undefined' && urlParts['pass'].length > 0 ? urlParts['pass'] : '');
                    url += (typeof(urlParts['user']) != 'undefined' && urlParts['user'].length > 0 && $defined(urlParts['pass']) && urlParts['pass'].length > 0 ? '@' : '');
                    url += urlParts['host'];
                    url += (typeof(urlParts['port']) != 'undefined' && urlParts['port'].length > 0 ? ':' + urlParts['port'] : '');
                    url += (typeof(urlParts['path']) != 'undefined' && urlParts['path'].length > 0 ? urlParts['path'] : '');
                    url += (typeof(urlParts['query']) != 'undefined' && urlParts['query'].length > 0 ? '?' + urlParts['query'] : '');
                    url += (typeof(urlParts['fragment']) != 'undefined' && urlParts['fragment'].length > 0 ? '#' + urlParts['fragment'] : '');
                }
            }
        }
        var bNoStrict = (ruleArgs && typeof(ruleArgs[0]) != 'undefined' && ruleArgs[0] ? true : false);
        var bRelative = (ruleArgs && typeof(ruleArgs[1]) != 'undefined' && ruleArgs[1] ? true : false);
        var regex = /^(?:(?:https?|ftps?|file|news|gopher):\/\/)(?:(?:(?:25[0-5]|2[0-4][0-9]|(?:(?:1[0-9])?|[1-9]?)[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|(?:(?:1[0-9])?|[1-9]?)[0-9])|(?:[a-z0-9][-a-z0-9]*\.)*(?:[a-z0-9][-a-z0-9]{0,62})\.(?:(?:[a-z]{2}\.)?[a-z]{2,}))(?::[1-9][0-9]{0,4})?(?:\/?|\/([\!"\$&\'\(\)*\+,-\.@_\:;\=\~\[\]\/0-9a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(%[0-9a-f]{2}))*)?(?:\?([\!"\$&\'\(\)*\+,-\.@_\:;\=\~\[\]\/0-9a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(%[0-9a-f]{2}))*)?(?:#([\!"\$&\'\(\)*\+,-\.@_\:;\=\~\[\]\/0-9a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(%[0-9a-f]{2}))*)?$/i;
        if (bRelative == true) {
            regex = /^(?:(?:https?|ftps?|file|news|gopher):\/\/)?(?:(?:(?:25[0-5]|2[0-4][0-9]|(?:(?:1[0-9])?|[1-9]?)[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|(?:(?:1[0-9])?|[1-9]?)[0-9])|(?:[a-z0-9][-a-z0-9]*\.)*(?:[a-z0-9][-a-z0-9]{0,62})\.(?:(?:[a-z]{2}\.)?[a-z]{2,}))?(?::[1-9][0-9]{0,4})?(?:\/?|\/([\!"\$&\'\(\)*\+,-\.@_\:;\=\~\[\]\/0-9a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(%[0-9a-f]{2}))*)?(?:\?([\!"\$&\'\(\)*\+,-\.@_\:;\=\~\[\]\/0-9a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(%[0-9a-f]{2}))*)?(?:#([\!"\$&\'\(\)*\+,-\.@_\:;\=\~\[\]\/0-9a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(%[0-9a-f]{2}))*)?$/i;
        } else if (bNoStrict == true) {
            regex = /^(?:(?:https?|ftps?|file|news|gopher):\/\/)?(?:(?:(?:25[0-5]|2[0-4][0-9]|(?:(?:1[0-9])?|[1-9]?)[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|(?:(?:1[0-9])?|[1-9]?)[0-9])|(?:[a-z0-9][-a-z0-9]*\.)*(?:[a-z0-9][-a-z0-9]{0,62})\.(?:(?:[a-z]{2}\.)?[a-z]{2,}))(?::[1-9][0-9]{0,4})?(?:\/?|\/([\!"\$&\'\(\)*\+,-\.@_\:;\=\~\[\]\/0-9a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(%[0-9a-f]{2}))*)?(?:\?([\!"\$&\'\(\)*\+,-\.@_\:;\=\~\[\]\/0-9a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(%[0-9a-f]{2}))*)?(?:#([\!"\$&\'\(\)*\+,-\.@_\:;\=\~\[\]\/0-9a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]|(%[0-9a-f]{2}))*)?$/i;
        }
        if (regex.test(url)) {
            return true;
        }
        var msg = el.retrieve('title');
        if (el.id && typeof(this.options.display.customElAlerts[el.id]) != 'undefined') {
            msg = this.options.display.customElAlerts[el.id];
            if (!el.errors.contains(msg)) {
                el.errors.push(msg);
            }
        } else if (this.options.display.titlesInsteadNames && msg && msg.length > 0) {
            if (!el.errors.contains(msg)) {
                el.errors.push(msg);
            }
        } else {
            el.errors.push(this.options.alerts.url);
        }
        return false;
    },
    validateDate: function(el, ruleArgs) {
        var bIsValid = false;
        var year = '';
        var month = '';
        var day = '';
        if (ruleArgs && typeof(ruleArgs[0]) == 'object' && el.get('tag') == 'select') {
            if (typeof(ruleArgs[0].year) != 'undefined' && this.form[ruleArgs[0].year]) {
                year = $(this.form[ruleArgs[0].year]).get('value');
            }
            if (typeof(ruleArgs[0].month) != 'undefined' && this.form[ruleArgs[0].month]) {
                month = $(this.form[ruleArgs[0].month]).get('value');
            }
            if (typeof(ruleArgs[0].day) != 'undefined' && this.form[ruleArgs[0].day]) {
                day = $(this.form[ruleArgs[0].day]).get('value');
            }
        } else if (el.get('tag') != 'select') {
            var pattern = ruleArgs && typeof(ruleArgs[0]) == 'object' && typeof(ruleArgs[0].format) != 'String' ? ruleArgs[0].format : '%Y-%m-%d';
            var date = this.parseDate(pattern, el.get('value'));
            if (date) {
                year = date.getFullYear().toString();
                month = (date.getMonth() + 1).toString();
                day = date.getDate().toString();
            }
        }
        if (year.length == 4 && (month.length == 1 || month.length == 2) && (day.length == 1 || day.length == 2)) {
            year = year.toInt();
            month = month.toInt();
            day = day.toInt();
            var d = new Date(year, month - 1, day);
            if (d.isValid()) {
                return true;
            }
        }
        var msg = el.retrieve('title');
        if (el.id && typeof(this.options.display.customElAlerts[el.id]) != 'undefined') {
            msg = this.options.display.customElAlerts[el.id];
            if (!el.errors.contains(msg)) {
                el.errors.push(msg);
            }
        } else if (this.options.display.titlesInsteadNames && msg && msg.length > 0) {
            if (!el.errors.contains(msg)) {
                el.errors.push(msg);
            }
        } else {
            el.errors.push(this.options.alerts.date);
        }
        return false;
    },
    validateConfirm: function(el, ruleArgs) {
        var confirm = ruleArgs[0];
        if (el.value != this.form[confirm].value) {
            var msg = el.retrieve('title');
            if (el.id && typeof(this.options.display.customElAlerts[el.id]) != 'undefined') {
                msg = this.options.display.customElAlerts[el.id];
                if (!el.errors.contains(msg)) {
                    el.errors.push(msg);
                }
            } else if (this.options.display.titlesInsteadNames && msg && msg.length > 0) {
                if (!el.errors.contains(msg)) {
                    el.errors.push(msg);
                }
            } else {
                el.errors.push(this.options.alerts.confirm.replace('%0', confirm));
            }
            return false;
        }
        return true;
    },
    validateDiffers: function(el, ruleArgs) {
        var differs = ruleArgs[0];
        if (el.value == this.form[differs].value) {
            var msg = el.retrieve('title');
            if (el.id && typeof(this.options.display.customElAlerts[el.id]) != 'undefined') {
                msg = this.options.display.customElAlerts[el.id];
                if (!el.errors.contains(msg)) {
                    el.errors.push(msg);
                }
            } else if (this.options.display.titlesInsteadNames && msg && msg.length > 0) {
                if (!el.errors.contains(msg)) {
                    el.errors.push(msg);
                }
            } else {
                el.errors.push(this.options.alerts.differs.replace('%0', differs));
            }
            return false;
        }
        return true;
    },
    simpleValidate: function(el, ruleArgs) {
        if (el.get('tag') == 'select' && el.get('value').length == 0) {
            var msg = el.retrieve('title');
            if (el.id && typeof(this.options.display.customElAlerts[el.id]) != 'undefined') {
                msg = this.options.display.customElAlerts[el.id];
                if (!el.errors.contains(msg)) {
                    el.errors.push(msg);
                }
            } else if (this.options.display.titlesInsteadNames && msg && msg.length > 0) {
                if (!el.errors.contains(msg)) {
                    el.errors.push(msg);
                }
            } else {
                el.errors.push(this.options.alerts.select);
            }
            return false;
        } else if (el.type == 'checkbox' && el.checked == false) {
            var bMultiCheckbox = (typeof(ruleArgs[0] != 'undefined') && ruleArgs[0] == 'true' ? true : false);
            if (bMultiCheckbox == true) {
                var bChecked = this.form.getElements('input[name="' + el.getProperty('name') + '"]').some(function(cb) {
                    return cb.checked;
                });
                if (bChecked == true) {
                    return true;
                }
            }
            var msg = el.retrieve('title');
            if (el.id && typeof(this.options.display.customElAlerts[el.id]) != 'undefined') {
                msg = this.options.display.customElAlerts[el.id];
                if (!el.errors.contains(msg)) {
                    el.errors.push(msg);
                }
            } else if (this.options.display.titlesInsteadNames && msg && msg.length > 0) {
                if (!el.errors.contains(msg)) {
                    el.errors.push(msg);
                }
            } else {
                msg = el.validation.contains('agreement') ? this.options.alerts.agreement : this.options.alerts.checkbox;
                if (!el.errors.contains(msg)) {
                    el.errors.push(msg);
                }
            }
            return false;
        }
        return true;
    },
    validateGroup: function(el) {
        el.errors = [];
        el.group = this.form.getElements("input[name='" + el.getProperty('name') + "']");
        var cbCheckeds = false;
        el.group.each(function(radio) {
            if (radio.checked) {
                cbCheckeds = true;
            }
        }, this);
        if (cbCheckeds == false) {
            var msg = el.retrieve('title');
            if (el.id && typeof(this.options.display.customElAlerts[el.id]) != 'undefined') {
                el.errors.push(this.options.display.customElAlerts[el.id]);
            } else if (this.options.display.titlesInsteadNames && msg && msg.length > 0) {
                el.errors.push(msg);
            } else {
                el.errors.push(this.options.alerts.radios);
            }
            return false;
        }
        return true;
    },
    countChars: function(str, mode) {
        str = ('' + str).split('').sort().join('').match(/(.)\1*/g);
        var result = {};
        if ((mode & 1) == 0) {
            for (i = 0; i != 256; i++) {
                result[i] = 0;
            }
        }
        if (mode === 2 || mode === 4) {
            for (i = 0; i != str.length; i += 1) {
                delete result[str[i].charCodeAt(0)];
            }
            for (i in result) {
                result[i] = (mode === 4) ? String.fromCharCode(i) : 0;
            }
        } else if (mode === 3) {
            for (i = 0; i != str.length; i += 1) {
                result[i] = str[i].slice(0, 1);
            }
        } else {
            for (i = 0; i != str.length; i += 1) {
                result[str[i].charCodeAt(0)] = str[i].length;
            }
        }
        if (mode < 3) {
            return result;
        }
        for (i in result) {
            resultArr.push(result[i]);
        }
        return resultArr.join('');
    },
    parseUrl: function(str, component) {
        var o = {
            strictMode: false,
            key: ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'],
            q: {
                name: 'queryKey',
                parser: /(?:^|&)([^&=]*)=?([^&]*)/g
            },
            parser: {
                strict: /^(?:([^:\/?#]+):)?(?:\/\/((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?))?((((?:[^?#\/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
                loose: /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/\/?)?((?:(([^:@]*):?([^:@]*))?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
            }
        };
        var m = o.parser[o.strictMode ? 'strict' : 'loose'].exec(str);
        var uri = {};
        var i = 14;
        while (i--) {
            uri[o.key[i]] = m[i] || '';
        }
        switch (component) {
            case 'PHP_URL_SCHEME':
                return uri.protocol;
            case 'PHP_URL_HOST':
                return uri.host;
            case 'PHP_URL_PORT':
                return uri.port;
            case 'PHP_URL_USER':
                return uri.user;
            case 'PHP_URL_PASS':
                return uri.password;
            case 'PHP_URL_PATH':
                return uri.path;
            case 'PHP_URL_QUERY':
                return uri.query;
            case 'PHP_URL_FRAGMENT':
                return uri.anchor;
            default:
                var retArr = {};
                if (uri.protocol !== '') {
                    retArr.scheme = uri.protocol;
                }
                if (uri.host !== '') {
                    retArr.host = uri.host;
                }
                if (uri.port !== '') {
                    retArr.port = uri.port;
                }
                if (uri.user !== '') {
                    retArr.user = uri.user;
                }
                if (uri.password !== '') {
                    retArr.pass = uri.password;
                }
                if (uri.path !== '') {
                    retArr.path = uri.path;
                }
                if (uri.query !== '') {
                    retArr.query = uri.query;
                }
                if (uri.anchor !== '') {
                    retArr.fragment = uri.anchor;
                }
                return retArr;
        }
    },
    parseDate: function(format, value) {
        format = format.replace(/%/g, '')
        if (format == null || value == null) {
            return null;
        }
        value = (typeof(value) == 'object' ? value.toString() : value + '');
        if (value == '') {
            return null;
        }
        var year = null;
        var month = null;
        var day = null;
        var getNumber = function(match) {
            var size = (match == 'Y' ? 4 : 2);
            var digits = new RegExp('^\\d{1,' + size + '}');
            var num = value.substring(iValue).match(digits);
            if (!num) {
                return null;
            }
            iValue += num[0].length;
            return parseInt(num[0], 10);
        };
        var iValue = 0;
        for (var iFormat = 0; iFormat < format.length; iFormat++) {
            switch (format.charAt(iFormat)) {
                case 'd':
                    day = getNumber('d');
                    break;
                case 'm':
                    month = getNumber('m');
                    break;
                case 'Y':
                    year = getNumber('Y');
                    break;
                case ".":
                case "-":
                case "/":
                    iValue++;
                    break;
                default:
                    ;
            }
        }
        if (!year || !month || !day) {
            return null;
        }
        var date = new Date(year, month - 1, day);
        if (date.getFullYear() != year || date.getMonth() + 1 != month || date.getDate() != day) {
            return null;
        }
        return date;
    }
});
var UTF16 = new Class({
    decode: function(input) {
        var output = [];
        var i = 0;
        var len = input.length;
        var value = null;
        var extra = null;
        while (i < len) {
            value = input.charCodeAt(i++);
            if ((value & 0xF800) === 0xD800) {
                extra = input.charCodeAt(i++);
                if (((value & 0xFC00) !== 0xD800) || ((extra & 0xFC00) !== 0xDC00)) {
                    throw new RangeError("UTF-16(decode): Illegal UTF-16 sequence");
                }
                value = ((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000;
            }
            output.push(value);
        }
        return output;
    },
    encode: function(input) {
        var output = [];
        var i = 0;
        var len = input.length;
        var value = null;
        while (i < len) {
            value = input[i++];
            if ((value & 0xF800) === 0xD800) {
                throw new RangeError("UTF-16(encode): Illegal UTF-16 value");
            }
            if (value > 0xFFFF) {
                value -= 0x10000;
                output.push(String.fromCharCode(((value >>> 10) & 0x3FF) | 0xD800));
                value = 0xDC00 | (value & 0x3FF);
            }
            output.push(String.fromCharCode(value));
        }
        return output.join('');
    }
});
var Punycode = new Class({
    initial_n: 0x80,
    initial_bias: 72,
    delimiter: '\x2D',
    base: 36,
    damp: 700,
    tmin: 1,
    tmax: 26,
    skew: 38,
    maxint: 0x7FFFFFFF,
    initialize: function() {
        this.utf16 = new UTF16();
    },
    decode_digit: function(cp) {
        return cp - 48 < 10 ? cp - 22 : cp - 65 < 26 ? cp - 65 : cp - 97 < 26 ? cp - 97 : this.base;
    },
    encode_digit: function(d, flag) {
        return d + 22 + 75 * (d < 26) - ((flag != 0) << 5);
    },
    adapt: function(delta, numpoints, firsttime) {
        var k;
        delta = firsttime ? Math.floor(delta / this.damp) : (delta >> 1);
        delta += Math.floor(delta / numpoints);
        for (k = 0; delta > (((this.base - this.tmin) * this.tmax) >> 1); k += this.base) {
            delta = Math.floor(delta / (this.base - this.tmin));
        }
        return Math.floor(k + (this.base - this.tmin + 1) * delta / (delta + this.skew));
    },
    encode_basic: function(bcp, flag) {
        bcp -= (bcp - 97 < 26) << 5;
        return bcp + ((!flag && (bcp - 65 < 26)) << 5);
    },
    decode: function(input, preserveCase) {
        var output = [];
        var case_flags = [];
        var input_length = input.length;
        var n, out, i, bias, basic, j, ic, oldi, w, k, digit, t, len;
        n = this.initial_n;
        i = 0;
        bias = this.initial_bias;
        basic = input.lastIndexOf(this.delimiter);
        if (basic < 0) {
            basic = 0;
        }
        for (j = 0; j < basic; ++j) {
            if (preserveCase) {
                case_flags[output.length] = (input.charCodeAt(j) - 65 < 26);
            }
            if (input.charCodeAt(j) >= 0x80) {
                throw new RangeError("Illegal input >= 0x80");
            }
            output.push(input.charCodeAt(j));
        }
        for (ic = basic > 0 ? basic + 1 : 0; ic < input_length;) {
            for (oldi = i, w = 1, k = this.base;; k += this.base) {
                if (ic >= input_length) {
                    throw RangeError("punycode_bad_input(1)");
                }
                digit = this.decode_digit(input.charCodeAt(ic++));
                if (digit >= this.base) {
                    throw RangeError("punycode_bad_input(2)");
                }
                if (digit > Math.floor((this.maxint - i) / w)) {
                    throw RangeError("punycode_overflow(1)");
                }
                i += digit * w;
                t = k <= bias ? this.tmin : k >= bias + this.tmax ? this.tmax : k - bias;
                if (digit < t) {
                    break;
                }
                if (w > Math.floor(this.maxint / (this.base - t))) {
                    throw RangeError("punycode_overflow(2)");
                }
                w *= (this.base - t);
            }
            out = output.length + 1;
            bias = this.adapt(i - oldi, out, oldi === 0);
            if (Math.floor(i / out) > this.maxint - n) {
                throw RangeError("punycode_overflow(3)");
            }
            n += Math.floor(i / out);
            i %= out;
            if (preserveCase) {
                case_flags.splice(i, 0, input.charCodeAt(ic - 1) - 65 < 26);
            }
            output.splice(i, 0, n);
            i++;
        }
        if (preserveCase) {
            for (i = 0, len = output.length; i < len; i++) {
                if (case_flags[i]) {
                    output[i] = (String.fromCharCode(output[i]).toUpperCase()).charCodeAt(0);
                }
            }
        }
        return this.utf16.encode(output);
    },
    encode: function(input, preserveCase) {
        var n, delta, h, b, bias, j, m, q, k, t, ijv, case_flags;
        if (preserveCase) {
            case_flags = this.utf16.decode(input);
        }
        input = this.utf16.decode(input.toLowerCase());
        var input_length = input.length;
        if (preserveCase) {
            for (j = 0; j < input_length; j++) {
                case_flags[j] = input[j] != case_flags[j];
            }
        }
        var output = [];
        n = this.initial_n;
        delta = 0;
        bias = this.initial_bias;
        for (j = 0; j < input_length; ++j) {
            if (input[j] < 0x80) {
                output.push(String.fromCharCode(case_flags ? this.encode_basic(input[j], case_flags[j]) : input[j]));
            }
        }
        h = b = output.length;
        if (b > 0) {
            output.push(this.delimiter);
        }
        while (h < input_length) {
            for (m = this.maxint, j = 0; j < input_length; ++j) {
                ijv = input[j];
                if (ijv >= n && ijv < m) {
                    m = ijv;
                }
            }
            if (m - n > Math.floor((this.maxint - delta) / (h + 1))) {
                throw RangeError("punycode_overflow (1)");
            }
            delta += (m - n) * (h + 1);
            n = m;
            for (j = 0; j < input_length; ++j) {
                ijv = input[j];
                if (ijv < n) {
                    if (++delta > this.maxint) {
                        return Error("punycode_overflow(2)");
                    }
                }
                if (ijv == n) {
                    for (q = delta, k = this.base;; k += this.base) {
                        t = k <= bias ? this.tmin : k >= bias + this.tmax ? this.tmax : k - bias;
                        if (q < t) {
                            break;
                        }
                        output.push(String.fromCharCode(this.encode_digit(t + (q - t) % (this.base - t), 0)));
                        q = Math.floor((q - t) / (this.base - t));
                    }
                    output.push(String.fromCharCode(this.encode_digit(q, preserveCase && case_flags[j] ? 1 : 0)));
                    bias = this.adapt(delta, h + 1, h == b);
                    delta = 0;
                    ++h;
                }
            }
            ++delta, ++n;
        }
        return output.join('');
    },
    ToASCII: function(domain) {
        var domain_array = domain.split('.');
        var out = [];
        for (var i = 0; i < domain_array.length; ++i) {
            var s = domain_array[i];
            out.push(s.match(/[^A-Za-z0-9-]/) ? 'xn--' + this.encode(s) : s);
        }
        return out.join('.');
    },
    ToUnicode: function(domain) {
        var domain_array = domain.split('.');
        var out = [];
        for (var i = 0; i < domain_array.length; ++i) {
            var s = domain_array[i];
            out.push(s.match(/^xn--/) ? this.decode(s.slice(4)) : s);
        }
        return out.join('.');
    }
});
(function() {
    var hasPushState = Boolean(window.history && window.history.pushState && window.history.replaceState && !((/ Mobile\/([1-7][a-z]|(8([abcde]|f(1[0-8]))))/i).test(navigator.userAgent) || (/AppleWebKit\/5([0-2]|3[0-2])/i).test(navigator.userAgent))),
        hasHashChange = Boolean((('onhashchange' in window) || ('onhashchange' in document)) && !(Browser.ie && Browser.version < 8)),
        popped = false,
        initialURL = location.href;
    this.History = new new Class({
        Implements: [Events],
        initialize: function() {
            if (this.hasPushState() == true) {
                Element.NativeEvents['popstate'] = 2;
                window.addEvent('popstate', this.pop.bind(this));
            } else if (this.hasHashChange() == true) {
                Element.NativeEvents['hashchange'] = 1;
                window.addEvent('hashchange', this.pop.bind(this));
            }
        },
        hasPushState: function() {
            return hasPushState;
        },
        hasHashChange: function() {
            return hasHashChange;
        },
        push: function(url, title, state) {
            url = this.toRelativeUrl(url);
            if (this.hasPushState() == true) {
                history.pushState(state || null, title || null, url);
                this.fireEvent('change', [url, state || {}, 'popstate']);
                popped = true;
                return true
            } else if (this.hasHashChange() == true) {
                var uri = new URI(url);
                uri.setData('__hs', state);
                url = uri.get('directory') + uri.get('file') + (uri.get('query').length > 0 ? '?' : '') + uri.get('query');
                location.hash = url;
                return true;
            }
            return false;
        },
        pop: function(event) {
            if (this.hasPushState() == true) {
                var initialPop = !popped && location.href == initialURL;
                popped = true;
                if (initialPop == true) {
                    return;
                }
                var url = this.toRelativeUrl(location.href),
                    state = event.event.state;
                if (location.href.indexOf('#') > -1) {
                    return;
                }
                this.fireEvent('change', [url, state || {}, 'popstate']);
            } else if (this.hasHashChange() == true) {
                var url = this.toRelativeUrl(location.hash.substr(1));
                if (this.hash == '#' + url) {
                    return;
                }
                this.hash = '#' + url;
                var query = new URI(url).get('data');
                if (typeof(query.__hs) == 'undefined') {
                    return;
                }
                this.fireEvent('change', [url, {}, 'hashchange']);
            }
        },
        toRelativeUrl: function(url) {
            var uri = url.toURI();
            return uri.get('directory') + uri.get('file') + (uri.get('query').length > 0 ? '?' : '') + uri.get('query');
        }
    });
}).call(this);
var IPG_CAROUSEL_SIZE_SMALL = 1;
var IPG_CAROUSEL_SIZE_LARGE = 2;
var IPG_CAROUSEL_MODE_CLICK = 1;
var IPG_CAROUSEL_MODE_HOVER = 2;
var InlinePhotoGallery = new Class({
    Implements: [Options, Events],
    options: {
        transition: Fx.Transitions.Quad.easeInOut,
        durationSmall: 500,
        durationLarge: 500,
        pause: 1000,
        autoPlayPause: 6000,
        fadeDuration: 500,
        autoScroll: false,
        autoPlay: false,
        swipe: true,
        carouselSize: IPG_CAROUSEL_SIZE_SMALL,
        carouselMode: IPG_CAROUSEL_MODE_CLICK,
        carousel: '.tpl-photo-gallery-carousel',
        carouselNavPrev: '.tpl-photo-gallery-carousel-control.tpl-previous',
        carouselNavNext: '.tpl-photo-gallery-carousel-control.tpl-next',
        filmStripContainer: '.tpl-photo-gallery-carousel-film-strip-container',
        filmStrip: '.tpl-photo-gallery-carousel-film-strip',
        slide: '.tpl-photo-gallery-carousel-slide',
        stage: '.tpl-photo-gallery-stage',
        stageNavPrev: '.tpl-photo-gallery-stage-control.tpl-previous',
        stageNavNext: '.tpl-photo-gallery-stage-control.tpl-next',
        stageNavArrow: '.tpl-photo-gallery-stage-control-arrow',
        progressIndicator: '.tpl-photo-gallery-stage-progress-indicator',
        photoWrapper: '.tpl-photo-gallery-stage-image-wrapper',
        photo: '.tpl-photo-gallery-stage-image',
        description: '.tpl-photo-gallery-stage-description',
        classes: {
            carouselNavMouseOver: 'tpl-photo-gallery-carousel-control-mouseover',
            currentSlide: 'tpl-current'
        },
        onShowStage: function() {},
        onLoadPhotoIntoStage: function(options) {}
    },
    initialize: function(container, options) {
        this.setOptions(options);
        this.container = $(container);
        this.carousel = this.container.getElement(this.options.carousel);
        this.carouselNavPrev = (this.carousel ? this.carousel.getElement(this.options.carouselNavPrev) : null);
        this.carouselNavNext = (this.carousel ? this.carousel.getElement(this.options.carouselNavNext) : null);
        this.filmStripContainer = this.container.getElement(this.options.filmStripContainer);
        this.filmStripContainerSize = (this.filmStripContainer ? this.filmStripContainer.measure(function() {
            return this.getComputedSize({
                mode: 'horizontal',
                styles: ['border', 'padding', 'margin']
            })
        }) : null);
        this.filmStrip = this.container.getElement(this.options.filmStrip);
        this.slides = this.container.getElements(this.options.slide);
        this.stage = this.container.getElement(this.options.stage);
        this.stageNavPrev = this.stage.getElement(this.options.stageNavPrev);
        this.stageNavNext = this.stage.getElement(this.options.stageNavNext);
        this.progressIndicator = this.stage.getElement(this.options.progressIndicator);
        this.currentSlide = null;
        this.preloaded = false;
        this.stageSwipe = null;
        this.carouselSwipe = null;
        var self = this;
        this.slideCoordinates = this.slides.map(function(s) {
            if (s.hasClass(this.options.classes.currentSlide)) {
                this.currentSlide = s;
            }
            return s.measure(function() {
                var coords = this.getCoordinates(self.filmStrip);
                coords.left = coords.left.toInt();
                coords.right = coords.right.toInt();
                return coords;
            });
        }, this);
        this.avgSlideWidth = (this.filmStrip ? Math.round(this.filmStrip.measure(function() {
            return this.getSize().x
        }) / this.slides.length) : 0);
        this.duration = (this.options.carouselSize == IPG_CAROUSEL_SIZE_SMALL ? this.options.durationSmall : this.options.durationLarge);
        this.scrollFx = (this.filmStripContainer ? new Fx.Scroll(this.filmStripContainer, {
            transition: this.options.transition,
            duration: this.duration,
            wheelStops: false
        }) : null);
        this.currentSpeed = this.duration;
        this.currentDelay = this.options.pause;
        if (this.filmStripContainer) {
            if (this.currentSlide) {
                this.scrollToSlide(this.currentSlide, this.slides[0], true);
            } else if (this.slides.length > 0) {
                this.currentSlide = this.slides[0];
                this.scrollFx.set(0, 0);
            }
        }
        this.bound = {
            containerMouseEnter: this.containerMouseEnter.bind(this),
            containerMouseLeave: this.containerMouseLeave.bind(this),
            carouselNavPrevMouseEnter: this.carouselNavPrevMouseEnter.bind(this),
            carouselNavPrevMouseLeave: this.carouselNavPrevMouseLeave.bind(this),
            carouselNavPrevMouseDown: this.carouselNavPrevMouseDown.bind(this),
            carouselNavPrevMouseUp: this.carouselNavPrevMouseUp.bind(this),
            carouselNavPrevClick: this.carouselNavPrevClick.bind(this),
            carouselNavNextMouseEnter: this.carouselNavNextMouseEnter.bind(this),
            carouselNavNextMouseLeave: this.carouselNavNextMouseLeave.bind(this),
            carouselNavNextMouseDown: this.carouselNavNextMouseDown.bind(this),
            carouselNavNextMouseUp: this.carouselNavNextMouseUp.bind(this),
            carouselNavNextClick: this.carouselNavNextClick.bind(this),
            stageNavPrevMouseEnter: this.stageNavPrevMouseEnter.bind(this),
            stageNavPrevMouseLeave: this.stageNavPrevMouseLeave.bind(this),
            stageNavPrevClick: this.stageNavPrevClick.bind(this),
            stageNavNextMouseEnter: this.stageNavNextMouseEnter.bind(this),
            stageNavNextMouseLeave: this.stageNavNextMouseLeave.bind(this),
            stageNavNextClick: this.stageNavNextClick.bind(this)
        };
        if (this.options.autoPlay) {
            this.options.autoScroll = false;
        }
        this.attach();
    },
    attach: function() {
        if (this.filmStripContainer) {
            this.container.addEvents({
                mouseenter: this.bound.containerMouseEnter,
                mouseleave: this.bound.containerMouseLeave
            });
        }
        if (this.carouselNavPrev) {
            this.carouselNavPrev.addEvents({
                mouseenter: this.bound.carouselNavPrevMouseEnter,
                mouseleave: this.bound.carouselNavPrevMouseLeave,
                mousedown: this.bound.carouselNavPrevMouseDown,
                mouseup: this.bound.carouselNavPrevMouseUp,
                click: this.bound.carouselNavPrevClick
            });
        }
        if (this.carouselNavNext) {
            this.carouselNavNext.addEvents({
                mouseenter: this.bound.carouselNavNextMouseEnter,
                mouseleave: this.bound.carouselNavNextMouseLeave,
                mousedown: this.bound.carouselNavNextMouseDown,
                mouseup: this.bound.carouselNavNextMouseUp,
                click: this.bound.carouselNavNextClick
            });
        }
        this.stageNavPrev.addEvents({
            mouseenter: this.bound.stageNavPrevMouseEnter,
            mouseleave: this.bound.stageNavPrevMouseLeave,
            click: this.bound.stageNavPrevClick
        });
        this.stageNavNext.addEvents({
            mouseenter: this.bound.stageNavNextMouseEnter,
            mouseleave: this.bound.stageNavNextMouseLeave,
            click: this.bound.stageNavNextClick
        });
        this.slides.each(function(sl) {
            var lnk = sl.getElement('a');
            if (lnk) {
                var event = this.carouselSlideLinkClick.bind(this, lnk);
                lnk.store('event:carouselSlideLinkClick', event).addEvent('click', event);
            }
        }, this);
        if (this.stageSwipe) {
            this.stageSwipe.attach();
        } else if (this.options.swipe == true && typeof(Swipe) != 'undefined') {
            this.stageSwipe = new Swipe(this.stage, {
                onSwipeLeft: function() {
                    this.loadNextPhoto();
                }.bind(this),
                onSwipeRight: function() {
                    this.loadPreviousPhoto();
                }.bind(this)
            });
        }
        if (this.carouselSwipe) {
            this.carouselSwipe.attach();
        } else if (this.filmStripContainer && this.options.swipe == true && typeof(Swipe) != 'undefined') {
            this.carouselSwipe = new Swipe(this.filmStripContainer, {
                onSwipeLeft: function() {
                    if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
                        this.scrollFx.cancel();
                    }
                    if (this.timer) {
                        clearTimeout(this.timer);
                        this.timer = null;
                    }
                    if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
                        var oldSpeed = this.currentSpeed;
                        this.currentSpeed = 300;
                    }
                    this.forward();
                    if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
                        this.currentSpeed = oldSpeed;
                    }
                }.bind(this),
                onSwipeRight: function() {
                    if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
                        this.scrollFx.cancel();
                    }
                    if (this.timer) {
                        clearTimeout(this.timer);
                        this.timer = null;
                    }
                    if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
                        var oldSpeed = this.currentSpeed;
                        this.currentSpeed = 300;
                    }
                    this.backward();
                    if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
                        this.currentSpeed = oldSpeed;
                    }
                }.bind(this)
            });
        }
        if (this.filmStripContainer && this.options.autoScroll) {
            this.autoScrollTimer = this.autoScroll.delay(2000, this);
        }
        if (this.filmStripContainer && this.options.autoPlay) {
            this.autoPlay();
        }
    },
    detach: function() {
        if (this.filmStripContainer) {
            this.stop();
            this.container.removeEvents({
                mouseenter: this.bound.containerMouseEnter,
                mouseleave: this.bound.containerMouseLeave
            });
        }
        if (this.carouselNavPrev) {
            this.carouselNavPrev.removeEvents({
                mouseenter: this.bound.carouselNavPrevMouseEnter,
                mouseleave: this.bound.carouselNavPrevMouseLeave,
                mousedown: this.bound.carouselNavPrevMouseDown,
                mouseup: this.bound.carouselNavPrevMouseUp,
                click: this.bound.carouselNavPrevClick
            });
        }
        if (this.carouselNavNext) {
            this.carouselNavNext.removeEvents({
                mouseenter: this.bound.carouselNavNextMouseEnter,
                mouseleave: this.bound.carouselNavNextMouseLeave,
                mousedown: this.bound.carouselNavNextMouseDown,
                mouseup: this.bound.carouselNavNextMouseUp,
                click: this.bound.carouselNavNextClick
            });
        }
        this.stageNavPrev.removeEvents({
            mouseenter: this.bound.stageNavPrevMouseEnter,
            mouseleave: this.bound.stageNavPrevMouseLeave,
            click: this.bound.stageNavPrevClick
        });
        this.stageNavNext.removeEvents({
            mouseenter: this.bound.stageNavNextMouseEnter,
            mouseleave: this.bound.stageNavNextMouseLeave,
            click: this.bound.stageNavNextClick
        });
        this.slides.each(function(sl) {
            var lnk = sl.getElement('a');
            if (lnk) {
                lnk.removeEvent('click', lnk.retrieve('event:carouselSlideLinkClick')).eliminate('event:carouselSlideLinkClick');
            }
        }, this);
        if (this.stageSwipe) {
            this.stageSwipe.detach();
        }
    },
    reinitialize: function() {
        this.filmStripContainerSize = this.filmStripContainer.measure(function() {
            return this.getComputedSize({
                mode: 'horizontal',
                styles: ['border', 'padding', 'margin']
            })
        });
        var self = this;
        this.slideCoordinates = this.slides.map(function(s) {
            if (s.hasClass(this.options.classes.currentSlide)) {
                this.currentSlide = s;
            }
            return s.measure(function() {
                var coords = this.getCoordinates(self.filmStrip);
                coords.left = coords.left.toInt();
                coords.right = coords.right.toInt();
                return coords;
            });
        }, this);
        this.avgSlideWidth = (this.filmStrip ? Math.round(this.filmStrip.measure(function() {
            return this.getSize().x
        }) / this.slides.length) : 0);
        this.currentSlide = this.slides[0];
        this.scrollFx.set(0, 0);
    },
    containerMouseEnter: function(ev) {
        if (this.options.autoScroll) {
            this.stop();
        }
        if (this.autoScrollTimer) {
            clearTimeout(this.autoScrollTimer);
            this.autoScrollTimer = null;
        }
        if (this.options.autoPlay) {
            this.stop();
        }
    },
    containerMouseLeave: function(ev) {
        if (this.options.autoScroll) {
            this.autoScrollTimer = this.autoScroll.delay(2000, this);
        }
        if (this.options.autoPlay) {
            this.autoPlay();
        }
        if (this.startTimer) {
            clearTimeout(this.startTimer);
            this.startTimer = null;
        }
    },
    carouselNavPrevMouseEnter: function(ev) {
        if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
            this.startTimer = this.startBackward.delay(5, this);
        }
        if (!this.carouselNavPrev.hasClass(this.options.classes.carouselNavMouseOver)) {
            this.carouselNavPrev.addClass(this.options.classes.carouselNavMouseOver);
        }
    },
    carouselNavPrevMouseLeave: function(ev) {
        if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
            this.stop();
        }
        if (this.carouselNavPrev.hasClass(this.options.classes.carouselNavMouseOver)) {
            this.carouselNavPrev.removeClass(this.options.classes.carouselNavMouseOver);
        }
    },
    carouselNavPrevMouseDown: function(ev) {
        this.speedUp();
    },
    carouselNavPrevMouseUp: function(ev) {
        this.slowDown();
    },
    carouselNavPrevClick: function(ev) {
        if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
            this.scrollFx.cancel();
        }
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
            var oldSpeed = this.currentSpeed;
            this.currentSpeed = 300;
        }
        this.backward();
        if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
            this.currentSpeed = oldSpeed;
        }
    },
    carouselNavNextMouseEnter: function(ev) {
        if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
            this.startTimer = this.startForward.delay(5, this);
        }
        if (!this.carouselNavNext.hasClass(this.options.classes.carouselNavMouseOver)) {
            this.carouselNavNext.addClass(this.options.classes.carouselNavMouseOver);
        }
    },
    carouselNavNextMouseLeave: function(ev) {
        if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
            this.stop();
        }
        if (this.carouselNavNext.hasClass(this.options.classes.carouselNavMouseOver)) {
            this.carouselNavNext.removeClass(this.options.classes.carouselNavMouseOver);
        }
    },
    carouselNavNextMouseDown: function(ev) {
        this.speedUp();
    },
    carouselNavNextMouseUp: function(ev) {
        this.slowDown();
    },
    carouselNavNextClick: function(ev) {
        if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
            this.scrollFx.cancel();
        }
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
            var oldSpeed = this.currentSpeed;
            this.currentSpeed = 300;
        }
        this.forward();
        if (this.options.carouselMode == IPG_CAROUSEL_MODE_HOVER) {
            this.currentSpeed = oldSpeed;
        }
    },
    carouselSlideLinkClick: function(el, ev) {
        ev.preventDefault();
        this.setCurrentPhoto(el);
    },
    stageNavPrevMouseEnter: function(ev) {
        this.stageNavPrev.getElement(this.options.stageNavArrow).show();
    },
    stageNavPrevMouseLeave: function(ev) {
        this.stageNavPrev.getElement(this.options.stageNavArrow).hide();
    },
    stageNavPrevClick: function(ev) {
        this.loadPreviousPhoto();
    },
    stageNavNextMouseEnter: function(ev) {
        this.stageNavNext.getElement(this.options.stageNavArrow).show();
    },
    stageNavNextMouseLeave: function(ev) {
        this.stageNavNext.getElement(this.options.stageNavArrow).hide();
    },
    stageNavNextClick: function(ev) {
        this.loadNextPhoto();
    },
    startBackward: function() {
        this.scrollFx.cancel();
        var fn = (function() {
            this.timer = this.backward.delay(this.currentDelay, this);
        }).bind(this);
        this.scrollFx.addEvent('complete', fn);
        this.backward();
    },
    startForward: function() {
        this.scrollFx.cancel();
        var fn = (function() {
            this.timer = this.forward.delay(this.currentDelay, this);
        }).bind(this);
        this.scrollFx.addEvent('complete', fn);
        this.forward();
    },
    speedUp: function() {
        this.currentSpeed = 300;
        this.currentDelay = 300;
    },
    slowDown: function() {
        this.currentSpeed = this.duration;
        this.currentDelay = this.options.pause;
    },
    backward: function() {
        var delta = 0;
        var i = this.slides.length - 1;
        while (i >= 0) {
            if (this.slideCoordinates[i].left < this.filmStripContainer.scrollLeft) {
                delta = this.filmStripContainer.scrollLeft - this.slideCoordinates[i].left
                break;
            }
            i--;
        }
        var left = 0;
        if (i >= 0 && delta > 0) {
            this.scrollFx.setOptions({
                duration: Math.round(delta / this.avgSlideWidth * this.currentSpeed)
            });
            left = this.slideCoordinates[i].left;
        } else if (i < 0 && delta == 0) {
            left = this.slideCoordinates[this.slides.length - 1].right - this.filmStripContainerSize.width;
            this.scrollFx.setOptions({
                duration: this.duration
            });
        } else {
            this.scrollFx.setOptions({
                duration: this.duration
            });
        }
        this.scrollFx.start(left, 0);
    },
    forward: function() {
        var delta = 0;
        var i = 0;
        while (i < this.slides.length) {
            if (this.slideCoordinates[i].right - this.filmStripContainer.scrollLeft > this.filmStripContainerSize.width) {
                delta = this.slideCoordinates[i].right - this.filmStripContainer.scrollLeft - this.filmStripContainerSize.width;
                break;
            }
            i++;
        }
        var left = 0;
        if (i < this.slides.length && delta > 0) {
            this.scrollFx.setOptions({
                duration: Math.round(delta / this.avgSlideWidth * this.currentSpeed)
            });
            left = this.slideCoordinates[i].right - this.filmStripContainerSize.width;
        } else {
            this.scrollFx.setOptions({
                duration: this.duration
            });
        }
        this.scrollFx.start(left, 0);
    },
    scrollToSlide: function(current, previous, skipFx) {
        var bScrollToBeginning = false;
        var bScrollToEnd = false;
        var bScrollToPos = false;
        var left = 0;
        var delta = 0;
        var ci = this.slides.indexOf(current);
        var pi = (previous ? this.slides.indexOf(previous) : -1);
        if (this.slideCoordinates[ci].left <= this.filmStripContainer.scrollLeft || (ci > 0 && this.slideCoordinates[ci - 1].left <= this.filmStripContainer.scrollLeft)) {
            var ni = (ci > 0 ? ci - 1 : 0);
            if (ni == 0 && pi == this.slides.length - 1) {
                bScrollToBeginning = true;
            } else {
                bScrollToPos = true;
                delta = this.filmStripContainer.scrollLeft - this.slideCoordinates[ni].left;
                left = this.slideCoordinates[ni].left;
            }
        } else if (this.slideCoordinates[ci].right - this.filmStripContainer.scrollLeft >= this.filmStripContainerSize.width || (ci < this.slides.length - 1 && this.slideCoordinates[ci + 1].right - this.filmStripContainer.scrollLeft >= this.filmStripContainerSize.width)) {
            var ni = (ci < this.slides.length - 1 ? ci + 1 : this.slides.length - 1);
            if (ni == this.slides.length - 1 && pi == 0) {
                bScrollToEnd = true;
            } else {
                bScrollToPos = true;
                delta = this.slideCoordinates[ni].right - this.filmStripContainer.scrollLeft - this.filmStripContainerSize.width;
                left = this.slideCoordinates[ni].right - this.filmStripContainerSize.width;
            }
        }
        if (bScrollToBeginning) {
            this.scrollFx.cancel();
            this.scrollFx.setOptions({
                duration: this.duration
            });
            if (skipFx) {
                this.scrollFx.set(0, 0);
            } else {
                this.scrollFx.start(0, 0);
            }
        } else if (bScrollToEnd) {
            this.scrollFx.cancel();
            this.scrollFx.setOptions({
                duration: this.duration
            });
            if (skipFx) {
                this.scrollFx.set(this.slideCoordinates[this.slides.length - 1].right - this.filmStripContainerSize.width, 0);
            } else {
                this.scrollFx.start(this.slideCoordinates[this.slides.length - 1].right - this.filmStripContainerSize.width, 0);
            }
        } else if (bScrollToPos && delta > 0) {
            delta = (delta / this.avgSlideWidth > 2 ? this.avgSlideWidth : delta);
            this.scrollFx.cancel();
            this.scrollFx.setOptions({
                duration: Math.round(delta / this.avgSlideWidth * this.currentSpeed)
            });
            if (skipFx) {
                this.scrollFx.set(left, 0);
            } else {
                this.scrollFx.start(left, 0);
            }
        }
    },
    autoScroll: function() {
        this.startForward();
    },
    autoPlay: function() {
        this.timer = this.loadNextPhoto.periodical(this.options.autoPlayPause, this);
    },
    stop: function() {
        this.slowDown();
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        this.scrollFx.removeEvents('complete');
    },
    setCurrentPhoto: function(el) {
        if (this.currentSlide == el.getParent(this.options.slide)) {
            if (this.stage.isDisplayed() == false) {
                this.stage.show();
                this.fireEvent('showStage');
            }
            return;
        }
        var previousSlide = this.currentSlide;
        if (this.currentSlide && this.currentSlide.hasClass(this.options.classes.currentSlide)) {
            this.currentSlide.removeClass(this.options.classes.currentSlide);
        }
        this.currentSlide = el.getParent(this.options.slide);
        if (this.currentSlide && !this.currentSlide.hasClass(this.options.classes.currentSlide)) {
            this.currentSlide.addClass(this.options.classes.currentSlide);
        }
        if (this.preloaded === false) {
            this.preloadPhotos();
        }
        var data = (el.get('data-image') && el.get('data-image').length > 0 ? JSON.decode(el.get('data-image')) : null);
        if (!data || typeof(data.id) == 'undefined' || typeof(data.description) == 'undefined') {
            return;
        }
        if (this.stage.isDisplayed() == false) {
            this.stage.show();
            this.fireEvent('showStage');
        }
        this.scrollToSlide(this.currentSlide, previousSlide);
        var src = el.get('href');
        if (this.preloaded === false || (typeOf(this.preloaded) == 'array' && !this.preloaded.contains(src))) {
            this.progressIndicator.show();
            Asset.image(src, {
                onLoad: function() {
                    this.progressIndicator.hide();
                    this.preloaded.push(src);
                    this.loadPhotoIntoStage({
                        src: src,
                        description: data.description
                    });
                }.bind(this),
                onError: function() {
                    this.progressIndicator.hide();
                }.bind(this),
                onAbort: function() {
                    this.progressIndicator.hide();
                }.bind(this)
            });
        } else {
            this.loadPhotoIntoStage({
                src: src,
                description: data.description
            });
        }
    },
    loadPhotoIntoStage: function(options) {
        if (this.busy) {
            this.loadPhotoIntoStage.delay(200, this, [options]);
            return;
        }
        this.busy = true;
        var wrapper = this.stage.getElement(this.options.photoWrapper);
        var wrapperClone = wrapper.clone().setStyle('opacity', 0).inject(wrapper, 'after');
        var photo = wrapperClone.getElement(this.options.photo);
        var description = wrapperClone.getElement(this.options.description);
        photo.getElement('img').set('src', options.src);
        description.set('html', options.description);
        var self = this;
        wrapper.get('tween').removeEvents('complete');
        wrapper.set('tween', {
            duration: this.options.fadeDuration,
            onComplete: function() {
                (function() {
                    wrapper.destroy();
                    self.busy = false;
                }).delay(5);
            }
        });
        wrapperClone.set('tween', {
            duration: this.options.fadeDuration,
            onComplete: function() {
                wrapperClone.setStyle('opacity', null);
            }
        });
        wrapper.fade('out');
        wrapperClone.fade('in');
        this.fireEvent('loadPhotoIntoStage', [options]);
    },
    loadPreviousPhoto: function() {
        var previousSlide = null;
        if (this.currentSlide) {
            var i = this.slides.indexOf(this.currentSlide);
            if (i == -1) {
                previousSlide = this.slides[0];
            } else if (i == 0) {
                previousSlide = this.slides.getLast();
            } else {
                previousSlide = this.slides[i - 1];
            }
        } else {
            previousSlide = this.slides[0];
        }
        this.setCurrentPhoto(previousSlide.getElement('a'));
    },
    loadNextPhoto: function() {
        var nextSlide = null;
        if (this.currentSlide) {
            var i = this.slides.indexOf(this.currentSlide);
            if (i == -1 || i == this.slides.length - 1) {
                nextSlide = this.slides[0];
            } else {
                nextSlide = this.slides[i + 1];
            }
        } else {
            nextSlide = this.slides[0];
        }
        this.setCurrentPhoto(nextSlide.getElement('a'));
    },
    preloadPhotos: function() {
        var photos = [];
        this.slides.each(function(sl) {
            var lnk = sl.getElement('a[href]');
            if (lnk && lnk.get('href').length > 0) {
                photos.push(lnk.get('href'));
            }
        });
        if (photos.length > 0) {
            this.preloaded = [];
            var fn = (function(src) {
                Asset.image(src, {
                    onLoad: function() {
                        photos.shift();
                        this.preloaded.push(src);
                        if (photos.length > 0) {
                            fn.apply(this, [photos[0]]);
                        }
                    }.bind(this),
                    onError: function() {
                        photos.shift();
                    }.bind(this),
                    onAbort: function() {
                        photos.shift();
                    }.bind(this)
                });
            });
            fn.apply(this, [photos[0]]);
        }
    }
});
var IWindowUID = 0;
var IWindowParentsStack = {};
var IWindow = new Class({
    Implements: [Options, Events],
    options: {
        id: null,
        inject: {
            target: null,
            where: ''
        },
        pin: false,
        allowNegative: false,
        relativeTo: null,
        position: 'center',
        offset: {
            x: 0,
            y: 0
        },
        edge: false,
        positionOnResize: false,
        width: 300,
        height: 0,
        minWidth: 0,
        minHeight: 0,
        overflow: false,
        close: true,
        maximize: false,
        buttons: [],
        buttonsType: 'link',
        classes: {
            window: '',
            instance: 'tpl-window-instance',
            content: 'tpl-window-default',
            wrapperTop: 'tpl-window-top',
            wrapperTopLeft: 'tpl-window-top-ul',
            headerTopLeft: 'tpl-window-top-hl',
            wrapperToRight: 'tpl-window-top-ur',
            headerTopRight: 'tpl-window-top-hr',
            wrapperMiddle: 'tpl-window-middle',
            wrapperBottom: 'tpl-window-bottom',
            wrapperBottomLeft: 'tpl-window-bottom-ll',
            wrapperBottomRight: 'tpl-window-bottom-lr',
            headerCaption: 'tpl-window-caption',
            bodyWrapper: 'tpl-window-body-wrapper',
            body: 'tpl-window-body',
            button: 'tpl-window-button',
            closeButton: 'tpl-window-close-button',
            maximizeButton: 'tpl-window-maximize-button',
            restoreButton: 'tpl-window-restore-button',
            pressedButton: 'tpl-pressed',
            disabledButton: 'tpl-disabled',
            headerButtons: 'tpl-window-header-buttons',
            closeButtons: 'tpl-window-close-buttons',
            closable: 'tpl-window-closable',
            maximizable: 'tpl-window-maximizable',
            clearfix: 'clearfix',
            modalLayer: 'tpl-window-modal-overlay'
        },
        zIndex: 10000,
        parent: null,
        modal: false,
        modalLayerId: 'ModalOverlay',
        canHideModalLayerOnClose: true,
        allowMultiple: true,
        allowMultipleByClass: false,
        useIframeShim: true,
        iframeShimSelector: '',
        showNow: true,
        destroyOnClose: false,
        closeOnClickOut: false,
        allowedClickElements: [],
        closeOnEsc: false,
        timeout: 0,
        onInitialize: function() {},
        onShow: function() {},
        onBeforeHide: function() {},
        onHide: function() {},
        onResize: function() {},
        onBodyResize: function() {},
        onToggleSize: function() {},
        onAttach: function() {},
        onDetach: function() {},
        onBeforeDestroy: function() {},
        onDestroy: function() {}
    },
    initialize: function(caption, body, options) {
        this.setDefaults(options);
        this.id = this.options.id || 'IWindow_' + (++IWindowUID);
        this.visible = false;
        this.focused = false;
        this.focusableInputs = [];
        this.maximized = false;
        this.pinned = false;
        this.modalizer = null;
        this.makeWindow();
        if (this.options.parent && typeof(this.options.parent) == 'object' && this.options.parent.element && this.options.parent.visible == true) {
            var pZindex = parseInt(this.options.parent.element.getStyle('z-index'));
            var elZindex = parseInt(this.element.getStyle('z-index'));
            if (elZindex < pZindex + 2) {
                this.element.setStyle('z-index', pZindex + 2);
            }
        }
        this.bound = {
            timeout: this.timeout.bind(this),
            documentClick: this.documentClick.bind(this),
            documentKeyDown: this.documentKeyDown.bind(this),
            windowResize: this.windowResize.bind(this),
            contentMouseWheel: this.contentMouseWheel.bind(this)
        };
        if (caption || body) {
            this.setContent(caption, body);
        }
        this.fireEvent('initialize');
        this.attach();
        if (this.options.modal) {
            this.modalizer = new Modalizer({
                layerId: this.options.modalLayerId,
                classes: {
                    layer: this.options.classes.modalLayer
                },
                inject: {
                    target: this.options.inject.target,
                    where: this.options.inject.where
                }
            });
        }
        if (this.options.showNow) {
            this.show();
            if (this.options.pin && this.element.getStyle('position') != 'fixed') {
                this.pin();
            }
        }
    },
    setDefaults: function(options) {
        this.setOptions(options);
        if (options.parent) {
            this.options.parent = options.parent;
        }
        if (!this.options.inject.target) {
            this.options.inject.target = document.body;
        }
        if (!this.options.inject.where) {
            this.options.inject.where = 'bottom';
        }
        if (!this.options.relativeTo) {
            this.options.relativeTo = document.body;
        }
    },
    attach: function(bSkipResize) {
        if (this.options.timeout > 0) {
            this.addEvent('onShow', this.bound.timeout);
        }
        if (this.options.closeOnClickOut) {
            document.addEvent('click', this.bound.documentClick);
        }
        if (this.options.closeOnEsc) {
            document.addEvent('keydown', this.bound.documentKeyDown);
        }
        if (bSkipResize != true && this.options.positionOnResize) {
            window.addEvent('resize', this.bound.windowResize);
        }
        if (this.content && this.options.height && this.options.height > 0 && this.options.overflow) {
            this.content.addEvent('mousewheel', this.bound.contentMouseWheel);
        }
        if (this.buttons.length > 0) {
            this.buttons.each(function(button) {
                this.attachButton(button);
            }, this);
        }
        if (this.options.maximize) {
            this.element.getElements('.' + this.options.classes.maximizable.replace(/ /gi, '.')).each(function(el) {
                var event = this.toggleMaximize.bind(this);
                el.store('event:click', event).addEvent('click', event);
            }, this);
            var header = this.element.getElement('.' + this.options.classes.headerTopRight.replace(/ /gi, '.'));
            if (header) {
                var event = this.toggleMaximize.bind(this);
                header.store('event:dblclick', event).addEvent('dblclick', event);
            }
        }
        if (this.options.close) {
            this.element.getElements('.' + this.options.classes.closable.replace(/ /gi, '.')).each(function(el) {
                var event = this.hide.bind(this, true);
                el.store('event:click', event).addEvent('click', event);
            }, this);
        }
        this.fireEvent('attach');
    },
    detach: function(bSkipResize) {
        if (this.options.timeout > 0) {
            this.removeEvent('onShow', this.bound.timeout);
            if (this.timer) {
                clearTimeout(this.timer);
            }
        }
        if (this.options.closeOnClickOut) {
            document.removeEvent('click', this.bound.documentClick);
        }
        if (this.options.closeOnEsc) {
            document.removeEvent('keydown', this.bound.documentKeyDown);
        }
        if (bSkipResize != true && this.options.positionOnResize) {
            window.removeEvent('resize', this.bound.windowResize);
        }
        if (this.content && this.options.height && this.options.height > 0 && this.options.overflow) {
            this.content.removeEvent('mousewheel', this.bound.contentMouseWheel);
        }
        if (this.buttons.length > 0) {
            this.buttons.each(function(button) {
                this.detachButton(button);
            }, this);
        }
        if (this.options.maximize) {
            this.element.getElements('.' + this.options.classes.maximizable.replace(/ /gi, '.')).each(function(el) {
                el.removeEvent('click', el.retrieve('event:click')).eliminate('event:click');
            }, this);
            var header = this.element.getElement('.' + this.options.classes.headerTopRight.replace(/ /gi, '.'));
            if (header) {
                header.removeEvent('dblclick', header.retrieve('event:dblclick')).eliminate('event:dblclick');
            }
        }
        if (this.options.close) {
            this.element.getElements('.' + this.options.classes.closable.replace(/ /gi, '.')).each(function(el) {
                el.removeEvent('click', el.retrieve('event:click')).eliminate('event:click');
            }, this);
        }
        this.fireEvent('detach');
    },
    attachButton: function(b) {
        var button = b.button;
        var options = b.options;
        var event = this.buttonMouseDown.bind(this, button);
        button.store('event:buttonMouseDown', event).addEvent('mousedown', event);
        if (typeof(options.onClick) != 'undefined') {
            var event = options.onClick.pass(button);
            button.store('event:buttonClick', event).addEvent('click', event);
        }
        var event = this.documentMouseUp.bind(this, button);
        button.store('event:documentMouseUp', event);
        document.addEvent('mouseup', event);
        if (Browser.ie) {
            var event = this.documentSelectStart.bind(this, button);
            button.store('event:documentSelectStart', event);
            document.addEvent('selectstart', event);
        }
    },
    detachButton: function(b) {
        var button = b.button;
        var options = b.options;
        button.removeEvent('mousedown', button.retrieve('event:buttonMouseDown')).eliminate('event:buttonMouseDown');
        if (typeof(options.onClick) != 'undefined') {
            button.removeEvent('click', button.retrieve('event:buttonClick')).eliminate('event:buttonClick');
        }
        document.removeEvent('mouseup', button.retrieve('event:documentMouseUp')).eliminate('event:documentMouseUp');
        if (Browser.ie) {
            document.removeEvent('selectstart', button.retrieve('event:documentSelectStart')).eliminate('event:documentSelectStart');
        }
    },
    makeWindow: function() {
        if (!this.options.allowMultipleByClass || !this.options.allowMultiple) {
            this.destroyOthers();
        }
        if (!document.id(this.id)) {
            this.element = new Element('div', {
                'id': this.id,
                'class': (this.options.classes.window.length > 0 ? this.options.classes.window + ' ' : '') + this.options.classes.instance + ' ' + this.options.classes.clearfix
            }).setStyles({
                display: 'none',
                position: (this.options.pin ? 'fixed' : 'absolute'),
                zIndex: this.options.zIndex
            }).inject(this.options.inject.target, this.options.inject.where).store('IWindow', this);
            this.content = new Element('div', {
                'class': this.options.classes.content
            }).adopt(new Element('div', {
                'class': this.options.classes.wrapperTop + ' ' + this.options.classes.clearfix
            }).adopt(new Element('div', {
                'class': this.options.classes.wrapperTopLeft
            }).adopt(new Element('div', {
                'class': this.options.classes.headerTopLeft
            })), new Element('div', {
                'class': this.options.classes.wrapperToRight
            }).adopt(new Element('div', {
                'class': this.options.classes.headerTopRight
            }))));
            var browser = '';
            if (Browser.ie) {
                browser = 'ie' + (Math.round(Browser.version) < 8 ? ' ie-lte7' : '') + ' ie-' + Math.round(Browser.version);
            }
            if (Browser.firefox) {
                browser = 'ff';
            }
            if (Browser.opera) {
                browser = 'opera';
            }
            if (Browser.chrome) {
                browser = 'chrome';
            }
            if (Browser.safari) {
                browser = 'safari';
            }
            this.content.addClass(browser);
            this.body = new Element('div', {
                'class': this.options.classes.body
            });
            this.buttons = [];
            if (this.options.buttons.length > 0) {
                this.options.buttons.each(function(b) {
                    var properties = Object.merge({
                        'class': this.options.classes.button + ' ' + this.options.classes.closable
                    }, (typeof(b.properties) != 'undefined' ? b.properties : {}));
                    var button = null;
                    switch (this.options.buttonsType) {
                        case 'link':
                            {
                                button = new Element('a').appendText((typeof(b.text) != 'undefined' ? b.text : '')).set(properties);
                                break;
                            }
                        case 'input':
                            {
                                button = new Element('input', {
                                    'type': 'button',
                                    'value': (typeof(b.text) != 'undefined' ? b.text : '')
                                }).set(properties);
                                break;
                            }
                        default:
                            ;
                    }
                    this.buttons.push({
                        button: button,
                        options: b
                    });
                }, this);
            }
            this.content.adopt(new Element('div', {
                'class': this.options.classes.wrapperMiddle + ' ' + this.options.classes.clearfix
            }).adopt(new Element('div', {
                'class': this.options.classes.bodyWrapper + ' ' + this.options.classes.clearfix
            }).adopt(this.body, (this.buttons.length > 0) ? new Element('div', {
                'class': this.options.classes.closeButtons + ' ' + this.options.classes.clearfix
            }).adopt(this.buttons.map(function(b) {
                return b.button
            })) : [])), new Element('div', {
                'class': this.options.classes.wrapperBottom + ' ' + this.options.classes.clearfix
            }).adopt(new Element('div', {
                'class': this.options.classes.wrapperBottomLeft
            }), new Element('div', {
                'class': this.options.classes.wrapperBottomRight
            })));
            if (this.options.close || this.options.maximize) {
                var headerButtons = [];
                if (this.options.close) {
                    headerButtons.push(new Element('div', {
                        'class': this.options.classes.closeButton + ' ' + this.options.classes.closable
                    }));
                }
                if (this.options.maximize) {
                    headerButtons.push(new Element('div', {
                        'class': this.options.classes.maximizeButton + ' ' + this.options.classes.maximizable
                    }));
                }
                this.content.adopt(new Element('div', {
                    'class': this.options.classes.headerButtons
                }).adopt(headerButtons));
            }
            this.element.adopt(this.content);
        } else {
            this.element = document.id(this.id);
        }
    },
    setContent: function(newCaption, newBody) {
        if (!this.content) {
            return;
        }
        if (newCaption) {
            var oldCaption = this.element.getElement('.' + this.options.classes.wrapperTop.replace(/ /gi, '.') + ' h1');
            if (oldCaption && document.id(newCaption)) {
                oldCaption.empty();
                oldCaption.adopt(newCaption);
            } else if (oldCaption) {
                oldCaption.empty();
                oldCaption.set('html', newCaption);
            } else {
                var caption = new Element('h1', {
                    'class': this.options.classes.headerCaption
                });
                if (document.id(newCaption)) {
                    caption.adopt(newCaption);
                } else {
                    caption.set('html', newCaption);
                }
                this.element.getElement('.' + this.options.classes.headerTopRight.replace(/ /gi, '.')).adopt(caption);
            }
        }
        if (newBody) {
            if (document.id(newBody)) {
                this.body.empty().adopt(newBody);
            } else {
                this.body.set('html', newBody);
            }
            if (this.options.height && this.options.height > 0 && this.options.overflow && this.body.scrollTop > 0) {
                this.body.scrollTop = 0;
            }
        }
        this.getFocusableInputs();
        this.setWindowSize();
    },
    setWindowSize: function() {
        var viewport = $(document.body).getSize();
        var delta = 4;
        if (this.options.width && this.options.width > 0) {
            if (this.options.width < viewport.x - delta) {
                var w = this.options.width - this.calculateWidth();
                var styles = {
                    minWidth: Math.min(1910, w),
                    overflowX: 'hidden'
                };
                if (this.options.overflow) {
                    styles = {
                        width: Math.min(1910, w),
                        overflowX: 'auto'
                    };
                }
                this.element.setStyle('width', this.options.width);
                this.body.setStyles(styles);
            } else if (viewport.x - this.calculateWidth() - delta > 0) {
                var w = viewport.x - delta;
                if (this.options.minWidth > 0) {
                    w = Math.max(w, this.options.minWidth - delta);
                }
                var styles = {
                    width: w - this.calculateWidth(),
                    overflowX: 'auto'
                };
                this.element.setStyle('width', w);
                this.body.setStyles(styles);
            }
        } else {
            var w = this.element.measure(function() {
                return this.getSize().x
            });
            if (w > viewport.x - delta && viewport.x - this.calculateWidth() - delta > 0) {
                var w = viewport.x - delta;
                var styles = {
                    width: w - this.calculateWidth(),
                    overflowX: 'auto'
                };
                this.element.setStyle('width', w);
                this.body.setStyles(styles);
            }
        }
        if (this.options.height && this.options.height > 0) {
            if (this.options.height < viewport.y - delta) {
                var h = this.options.height - this.calculateHeight();
                var styles = {
                    minHeight: Math.min(1080, h),
                    overflowY: 'hidden'
                };
                if (this.options.overflow) {
                    styles = {
                        height: Math.min(1080, h),
                        overflowY: 'auto'
                    };
                }
                this.body.setStyles(styles);
            } else if (viewport.y - this.calculateHeight() - delta > 0) {
                var h = viewport.y - delta;
                if (this.options.minHeight > 0) {
                    h = Math.max(h, this.options.minHeight - delta);
                }
                var styles = {
                    height: h - this.calculateHeight(),
                    overflowY: 'auto'
                };
                this.element.setStyle('height', h);
                this.body.setStyles(styles);
            }
        } else {
            var h = this.element.measure(function() {
                return this.getSize().y
            });
            if (h > viewport.y - delta && viewport.y - this.calculateHeight() - delta > 0) {
                var h = viewport.y - delta;
                var styles = {
                    height: h - this.calculateHeight(),
                    overflowY: 'auto'
                };
                this.element.setStyle('height', h);
                this.body.setStyles(styles);
            }
        }
    },
    timeout: function() {
        this.timer = this.hide.delay(this.options.timeout, this, true);
    },
    setFocused: function(focused) {
        this.focused = focused;
    },
    show: function() {
        if (!this.positioned) {
            this.position();
        }
        if (this.options.modal) {
            this.modalizer.show();
            this.modalizer.setModalTo(this.element);
        }
        this.element.show();
        this.fireEvent('show');
        if (this.options.useIframeShim) {
            this.showIframeShim();
        }
        this.visible = true;
        this.setFocused(true);
        if (this.options.parent && typeof(this.options.parent) == 'object') {
            IWindowParentsStack[this.options.parent.id] = this.id;
            this.blurParent();
        }
    },
    hide: function(close) {
        if ((typeof(this.canHide) == 'function' && !this.canHide()) || (typeof(this.canHide) == 'boolean' && !this.canHide)) {
            return;
        }
        if (this.bodyResizeFx) {
            this.bodyResizeFx.cancel();
        }
        if (this.winResizeFx) {
            this.winResizeFx.cancel();
        }
        if (this.positionFx) {
            this.positionFx.cancel();
        }
        this.fireEvent('beforeHide');
        this.element.hide();
        this.fireEvent('hide');
        if (this.options.useIframeShim) {
            this.hideIframeShim();
        }
        this.visible = false;
        this.setFocused(false);
        if (this.options.modal && !this.options.parent && this.isLastVisible() && ((typeOf(this.options.canHideModalLayerOnClose) == 'function' && this.options.canHideModalLayerOnClose() == true) || (typeOf(this.options.canHideModalLayerOnClose) == 'boolean' && this.options.canHideModalLayerOnClose == true))) {
            this.modalizer.hide();
        }
        if (this.options.parent && typeof(this.options.parent) == 'object') {
            this.focusParent();
        }
        if (IWindowParentsStack) {
            Object.each(IWindowParentsStack, function(id, pid) {
                if (id == this.id) {
                    Object.erase(IWindowParentsStack, pid);
                }
            }, this);
        }
        if (close && ((typeof(this.canClose) == 'function' && this.canClose()) || (typeof(this.canClose) == 'boolean' && this.canClose)) && this.options.destroyOnClose) {
            this.destroy();
        }
    },
    canHide: function() {
        return true;
    },
    canClose: function() {
        return true;
    },
    getFocusableInputs: function() {
        var indexed = [];
        var notIndexed = [];
        this.element.getElements('input[type=text], input[type=password], input[type=file], input[type=submit], input[type=button], input[type=checkbox], input[type=radio], textarea, select, a[tabindex]').each(function(input) {
            var i = input.get('tabindex');
            if (i > 0) {
                while (typeof(indexed[i]) != 'undefined') {
                    i++;
                }
                indexed[i] = input;
            } else {
                i = notIndexed.length;
                while (typeof(indexed[i]) != 'undefined') {
                    i++;
                }
                notIndexed[i] = input;
            }
        });
        this.focusableInputs = indexed.combine(notIndexed).clean();
    },
    isLastVisible: function() {
        var bIsLast = true;
        $$('div.' + this.options.classes.instance.replace(/ /gi, '.')).each(function(win) {
            var instance = win.retrieve('IWindow');
            if (instance && instance.id != this.id && instance.visible == true) {
                bIsLast = false;
            }
        }, this);
        return bIsLast;
    },
    blurParent: function() {
        if (this.options.parent && typeof(this.options.parent) == 'object' && this.options.parent.element && this.options.parent.visible == true && this.options.parent.options.modal == true) {
            this.options.parent.setFocused(false);
            this.options.parent.detach(true);
        }
    },
    focusParent: function() {
        if (this.options.modal && this.options.parent && typeof(this.options.parent) == 'object' && this.options.parent.element && this.options.parent.visible == true && this.options.parent.options.modal == true) {
            this.modalizer.setModalTo(this.options.parent.element);
        } else if (this.options.modal && this.options.parent && typeof(this.options.parent) == 'object' && this.options.parent.element && this.options.parent.visible == true) {
            var current = this;
            var parent = this.options.parent;
            var bHide = !this.options.parent.options.modal;
            while (true) {
                if (parent && typeof(parent) == 'object' && parent.element && parent.visible == true) {
                    if (parent.options.modal == true) {
                        bHide = false;
                        this.modalizer.setModalTo(parent.element);
                        break;
                    }
                    current = parent;
                    parent = parent.options.parent;
                } else {
                    if (current && ((typeOf(current.options.canHideModalLayerOnClose) == 'function' && current.options.canHideModalLayerOnClose() == true) || (typeOf(current.options.canHideModalLayerOnClose) == 'boolean' && current.options.canHideModalLayerOnClose == true))) {
                        bHide = true;
                    } else {
                        bHide = false;
                    }
                    break;
                }
            }
            if (bHide) {
                this.modalizer.hide();
            }
        }
        if (this.options.parent && typeof(this.options.parent) == 'object' && this.options.parent.element && this.options.parent.visible == true && this.options.parent.options.modal == true) {
            this.options.parent.setFocused(true);
            this.options.parent.attach(true);
        }
    },
    focusNextInput: function(ev) {
        if (this.focusableInputs.length > 0) {
            var focused = this.element.getElement('*:focus');
            var next = null;
            if (focused) {
                var i = this.focusableInputs.indexOf(focused);
                if (i > -1 && typeof(this.focusableInputs[i + 1]) != 'undefined') {
                    next = this.focusableInputs[i + 1];
                } else {
                    next = this.focusableInputs[0];
                }
            } else {
                next = this.focusableInputs[0];
            }
            if (next) {
                var i = this.focusableInputs.indexOf(next);
                while (true) {
                    if (next.isVisible() && !next.get('disabled') && !next.get('readonly') && (next.tagName.toLowerCase() != 'a' || (next.tagName.toLowerCase() == 'a' && next.get('href')))) {
                        break;
                    }
                    var j = this.focusableInputs.indexOf(next);
                    if (j > -1 && typeof(this.focusableInputs[j + 1]) != 'undefined') {
                        next = this.focusableInputs[j + 1];
                    } else {
                        next = this.focusableInputs[0];
                    }
                    if (this.focusableInputs.indexOf(next) <= i) {
                        next = null;
                        break;
                    }
                }
                if (next) {
                    var tagName = next.tagName.toLowerCase();
                    var tagType = next.get('type');
                    switch (true) {
                        case (tagName == 'input' && tagType == 'text'):
                        case (tagName == 'input' && tagType == 'password'):
                        case (tagName == 'textarea'):
                            {
                                next.setCaretPosition('end');
                                break;
                            }
                        default:
                            {
                                next.focus();
                                break;
                            }
                    }
                }
            }
        }
    },
    maximize: function() {
        if (this.maximized) {
            return;
        }
        var pos = this.element.getPosition();
        this._pos = {
            top: pos.y,
            left: pos.x,
            width: parseInt(this.element.getStyle('width')),
            height: parseInt(this.element.getStyle('height'))
        };
        var viewport = $(document.body).getSize();
        var w = viewport.x - 4;
        var h = viewport.y - 4;
        var fromOptions = this._pos;
        var toOptions = {
            width: Math.min(1910, w),
            height: Math.min(1080, h)
        };
        toOptions.top = Math.floor((viewport.y - toOptions.height) / 2) + (this.options.pin == false ? $(document.body).getScroll().y : 0);
        toOptions.left = Math.floor((viewport.x - toOptions.width) / 2) + (this.options.pin == false ? $(document.body).getScroll().x : 0);
        this.resize(toOptions, fromOptions, true);
        this.maximized = true;
        var button = this.element.getElement('.' + this.options.classes.maximizeButton.replace(/ /gi, '.'));
        if (button && !button.hasClass(this.options.classes.restoreButton)) {
            button.addClass(this.options.classes.restoreButton);
        }
    },
    restore: function() {
        if (!this.maximized || !this._pos) {
            return;
        }
        var pos = this.element.getPosition();
        var fromOptions = {
            top: pos.y,
            left: pos.x,
            width: parseInt(this.element.getStyle('width')),
            height: parseInt(this.element.getStyle('height'))
        };
        var toOptions = this._pos;
        this.resize(toOptions, fromOptions, true);
        this._pos = null;
        this.maximized = false;
        var button = this.element.getElement('.' + this.options.classes.maximizeButton.replace(/ /gi, '.'));
        if (button && button.hasClass(this.options.classes.restoreButton)) {
            button.removeClass(this.options.classes.restoreButton);
        }
    },
    toggleMaximize: function() {
        if (this.maximized) {
            this.restore();
        } else {
            this.maximize();
        }
    },
    pin: function(pin) {
        if (!this.element.pin) {
            return;
        }
        this.pinned = Array.pick([pin, true]);
        this.element.pin(pin);
    },
    unpin: function() {
        this.pin(false);
    },
    togglePin: function() {
        this.pin(!this.pinned);
    },
    destroyOthers: function() {
        $$('div.' + this.options.classes.instance.replace(/ /gi, '.')).each(function(win) {
            if (!this.options.allowMultiple || (!this.options.allowMultipleByClass && this.options.classes.window != '' && win.hasClass(this.options.classes.window))) {
                var instance = win.retrieve('IWindow');
                instance.destroy();
            }
        }, this);
    },
    position: function(options) {
        this.positioned = true;
        this.setOptions(options);
        this.element.position({
            allowNegative: Array.pick([this.options.allowNegative, this.options.relativeTo != document.body]),
            relativeTo: this.options.relativeTo,
            position: this.options.position,
            offset: this.options.offset,
            edge: this.options.edge,
            relFixedPosition: this.options.pin
        });
        if (this.shim) {
            this.shim.position();
        }
        this.fireEvent('position');
    },
    reposition: function() {
        if (this.positioned) {
            this.element.position({
                allowNegative: Array.pick([this.options.allowNegative, this.options.relativeTo != document.body]),
                relativeTo: this.options.relativeTo,
                position: this.options.position,
                offset: this.options.offset,
                edge: this.options.edge,
                relFixedPosition: this.options.pin
            });
        }
    },
    resize: function(toOptions, fromOptions, bToggled) {
        this.element.setStyles({
            top: toOptions.top,
            left: toOptions.left
        });
        this.body.setStyles({
            width: toOptions.width - this.calculateWidth(),
            height: toOptions.height - this.calculateHeight()
        });
        this.element.setStyle('width', 'auto');
        var w = this.element.getDimensions().width;
        this.element.setStyle('width', w);
        this.fireEvent('bodyResize');
        if (bToggled) {
            this.fireEvent('toggleSize');
        }
        if (typeof(toOptions.onComplete) == 'function') {
            toOptions.onComplete.apply();
        }
    },
    calculateWidth: function() {
        var w = 0;
        var m = this.element.getElement('.' + this.options.classes.wrapperMiddle.replace(/ /gi, '.'));
        var mw = this.element.getElement('.' + this.options.classes.bodyWrapper.replace(/ /gi, '.'));
        if (m) {
            var d = m.getDimensions({
                computeSize: true,
                styles: ['border', 'padding', 'margin'],
                mode: 'horizontal'
            });
            w += d.computedLeft + d.computedRight;
        }
        if (mw) {
            var d = mw.getDimensions({
                computeSize: true,
                styles: ['border', 'padding', 'margin'],
                mode: 'horizontal'
            });
            w += d.computedLeft + d.computedRight;
        }
        var bw = this.body.getDimensions({
            computeSize: true,
            styles: ['border', 'padding', 'margin'],
            mode: 'horizontal'
        });
        w += bw.computedLeft + bw.computedRight;
        var cw = this.content.getDimensions({
            computeSize: true,
            styles: ['border', 'padding', 'margin'],
            mode: 'horizontal'
        });
        w += cw.computedLeft + cw.computedRight;
        return w;
    },
    calculateHeight: function() {
        var h = 0;
        var t = this.element.getElement('.' + this.options.classes.wrapperTop.replace(/ /gi, '.'));
        var b = this.element.getElement('.' + this.options.classes.wrapperBottom.replace(/ /gi, '.'));
        var mb = this.element.getElement('.' + this.options.classes.closeButtons.replace(/ /gi, '.'));
        var m = this.element.getElement('.' + this.options.classes.wrapperMiddle.replace(/ /gi, '.'));
        var mw = this.element.getElement('.' + this.options.classes.bodyWrapper.replace(/ /gi, '.'));
        if (t) {
            h += t.measure(function() {
                return this.getSize().y
            });
        }
        if (b) {
            h += b.measure(function() {
                return this.getSize().y
            });
        }
        if (mb && !mb.getParent('.' + this.options.classes.body.replace(/ /gi, '.'))) {
            h += mb.measure(function() {
                return this.getSize().y
            });
        }
        if (m) {
            var d = m.getDimensions({
                computeSize: true,
                styles: ['border', 'padding', 'margin'],
                mode: 'vertical'
            });
            h += d.computedTop + d.computedBottom;
        }
        if (mw) {
            var d = mw.getDimensions({
                computeSize: true,
                styles: ['border', 'padding', 'margin'],
                mode: 'vertical'
            });
            h += d.computedTop + d.computedBottom;
        }
        var bw = this.body.getDimensions({
            computeSize: true,
            styles: ['border', 'padding', 'margin'],
            mode: 'vertical'
        });
        h += bw.computedTop + bw.computedBottom;
        var cw = this.content.getDimensions({
            computeSize: true,
            styles: ['border', 'padding', 'margin'],
            mode: 'vertical'
        });
        h += cw.computedTop + cw.computedBottom;
        return h;
    },
    showIframeShim: function() {
        this.makeIframeShim();
        this.shim.show();
    },
    hideIframeShim: function() {
        if (this.shim) {
            this.shim.hide();
        }
    },
    makeIframeShim: function() {
        if (!this.shim) {
            var el = (this.options.iframeShimSelector) ? this.element.getElement(this.options.iframeShimSelector) : this.element;
            this.shim = new IframeShim(el, {
                display: false,
                name: 'IWindowShim'
            });
        }
    },
    destroy: function() {
        this.detach();
        this.fireEvent('beforeDestroy');
        if (this.element) {
            this.element.destroy();
        }
        if (this.options.useIframeShim && this.shim) {
            this.shim.destroy();
        }
        this.fireEvent('destroy');
    },
    documentClick: function(ev) {
        if (this.focused) {
            var eventTarget = $(ev.target);
            if (this.element != eventTarget && !this.element.contains(eventTarget) && !this.options.allowedClickElements.contains(eventTarget)) {
                var bHide = true;
                if (typeof(IWindowParentsStack[this.id]) != 'undefined' && IWindowParentsStack[this.id]) {
                    bHide = false;
                }
                if (bHide) {
                    this.hide(true);
                }
            }
        }
    },
    documentKeyDown: function(ev) {
        if (this.focused) {
            switch (ev.key) {
                case 'tab':
                    {
                        ev.preventDefault();this.focusNextInput();
                        break;
                    }
                case 'esc':
                    {
                        var bHide = true;
                        if (typeof(IWindowParentsStack[this.id]) != 'undefined' && IWindowParentsStack[this.id]) {
                            bHide = false;
                        }
                        if (bHide) {
                            this.hide(true);
                        }
                        break;
                    }
            }
        }
    },
    windowResize: function(ev) {
        if (this.resizeTimer) {
            clearTimeout(this.resizeTimer);
            this.resizeTimer = undefined;
        }
        this.resizeTimer = (function() {
            this.element.setStyles({
                width: null,
                height: null
            });
            this.body.setStyles({
                width: null,
                height: null,
                minWidth: null,
                minHeight: null,
                overflowX: null,
                overflowY: null
            });
            this.setWindowSize();
            this.position();
        }).delay(100, this);
    },
    contentMouseWheel: function(ev) {
        var ev = new DOMEvent(ev);
        var delta = ev.wheel;
        DOMEvent.stop(ev);
        var objH = this.body.getCoordinates().height;
        var scrollH = this.body.scrollHeight;
        if (objH < scrollH) {
            objH = scrollH;
        }
        var ratio = Math.log(objH) / Math.log(100);
        var y = this.body.scrollTop;
        var newY = Array.pick([ratio, 1]) * 25 * (-delta) + y;
        newY = (newY < 0) ? 0 : (newY > objH) ? objH : newY;
        this.body.scrollTop = newY;
    },
    buttonMouseDown: function(button, ev) {
        ev = new DOMEvent(ev);
        if (ev.rightClick == true) {
            return;
        }
        ev.stop();
        if (!button.hasClass(this.options.classes.disabledButton)) {
            button.store('mousedown', true);
            if (!button.hasClass(this.options.classes.pressedButton)) {
                button.addClass(this.options.classes.pressedButton);
            }
        }
    },
    documentMouseUp: function(button, ev) {
        ev = new DOMEvent(ev);
        if (ev.rightClick == true) {
            return;
        }
        if (!button.hasClass(this.options.classes.disabledButton)) {
            button.eliminate('mousedown');
            if (button.hasClass(this.options.classes.pressedButton)) {
                button.removeClass(this.options.classes.pressedButton);
            }
        }
    },
    documentSelectStart: function(button, ev) {
        try {
            if ($(ev.target) == button || Element.getParent($(ev.target), 'a') == button) {
                ev = new DOMEvent(ev);
                ev.stop();
            }
        } catch (e) {}
    },
    set: function(name, value) {
        this[name] = value;
        return this;
    }
});
IWindow = Class.refactor(IWindow, {
    options: {
        fadeTransition: 'sine:in:out',
        fadeOnShow: true,
        fadeOnHide: true,
        fadeDuration: 200
    },
    show: function() {
        this.previous();
        if ((Browser.ie && Math.round(Browser.version) < 9) || this.options.fadeOnShow == false) {
            return;
        }
        this.fade(1);
    },
    hide: function(close) {
        if ((Browser.ie && Math.round(Browser.version) < 9) || this.options.fadeOnHide == false) {
            this.previous(close);
            return;
        }
        if ((typeof(this.canHide) == 'function' && !this.canHide()) || (typeof(this.canHide) == 'boolean' && !this.canHide)) {
            return;
        }
        if (this.bodyResizeFx) {
            this.bodyResizeFx.cancel();
        }
        if (this.winResizeFx) {
            this.winResizeFx.cancel();
        }
        if (this.positionFx) {
            this.positionFx.cancel();
        }
        this.fireEvent('beforeHide');
        this.visible = false;
        this.setFocused(false);
        if (this.options.modal && !this.options.parent && this.isLastVisible() && ((typeOf(this.options.canHideModalLayerOnClose) == 'function' && this.options.canHideModalLayerOnClose() == true) || (typeOf(this.options.canHideModalLayerOnClose) == 'boolean' && this.options.canHideModalLayerOnClose == true))) {
            this.modalizer.hide();
        }
        if (this.options.parent && typeof(this.options.parent) == 'object') {
            this.focusParent();
        }
        if (IWindowParentsStack) {
            Object.each(IWindowParentsStack, function(id, pid) {
                if (id == this.id) {
                    Object.erase(IWindowParentsStack, pid);
                }
            }, this);
        }
        this.fade(0, function() {
            this.fireEvent('hide');
            if (this.options.useIframeShim) {
                this.hideIframeShim();
            }
            if (close && ((typeof(this.canClose) == 'function' && this.canClose()) || (typeof(this.canClose) == 'boolean' && this.canClose)) && this.options.destroyOnClose) {
                this.destroy();
            }
        }.bind(this));
    },
    fade: function(to, onComplete) {
        if (!this.fadeFx) {
            this.element.setStyles({
                opacity: (to > 0 ? 0 : 1),
                display: 'block'
            });
            var opts = {
                property: 'opacity',
                duration: this.options.fadeDuration
            };
            if (this.options.fadeTransition) {
                opts.transition = this.options.fadeTransition;
            }
            this.fadeFx = new Fx.Tween(this.element, opts);
        }
        this.fadeFx.clearChain();
        this.fadeFx.start(to).chain(function() {
            if (to == 0) {
                this.element.hide();
            }
            if (typeof(onComplete) == 'function') {
                onComplete.apply();
            }
        }.bind(this));
    },
    position: function(options) {
        if (this.positioned && !this.positionFx && typeof(Fx.Move) != 'undefined') {
            this.positionFx = new Fx.Move(this.element, {
                duration: 200,
                allowNegative: Array.pick([this.options.allowNegative, this.options.relativeTo != document.body]),
                relativeTo: this.options.relativeTo,
                position: this.options.position,
                offset: this.options.offset,
                edge: this.options.edge,
                relFixedPosition: this.options.pin
            });
        }
        if (this.positionFx) {
            this.positioned = true;
            this.setOptions(options);
            this.positionFx.cancel();
            this.positionFx.start();
            if (this.shim) {
                this.shim.position();
            }
        } else {
            this.previous(options);
        }
    },
    resize: function(toOptions, fromOptions, bToggled) {
        if (!this.bodyResizeFx) {
            this.bodyResizeFx = new Fx.Morph(this.body, {
                duration: 200,
                onComplete: function() {
                    this.fireEvent('bodyResize');
                    if (bToggled) {
                        this.fireEvent('toggleSize');
                    }
                }.bind(this)
            });
        }
        if (!this.winResizeFx) {
            this.winResizeFx = new Fx.Morph(this.element, {
                duration: 200
            });
        }
        this.winResizeFx.setOptions({
            onComplete: (typeof(toOptions.onComplete) == 'function' ? toOptions.onComplete : Function.from(true))
        });
        this.bodyResizeFx.cancel();
        this.winResizeFx.cancel();
        this.bodyResizeFx.start({
            width: [fromOptions.width - this.calculateWidth(), toOptions.width - this.calculateWidth()],
            height: [fromOptions.height - this.calculateHeight(), toOptions.height - this.calculateHeight()]
        });
        this.winResizeFx.start({
            top: [fromOptions.top, toOptions.top],
            left: [fromOptions.left, toOptions.left],
            width: [fromOptions.width, toOptions.width]
        });
    }
});
var IWindowResize = new Class({
    Extends: Drag,
    initialize: function(element, options) {
        this.parent(element, options);
        this.bound = Object.merge({
            mousewheel: this.mousewheel.bind(this),
            keydown: this.keydown.bind(this)
        }, this.bound);
    },
    attachDrag: function() {
        this.document.body.addEvent('mousewheel', this.bound.mousewheel);
        this.document.addEvent('keydown', this.bound.keydown);
    },
    detachDrag: function() {
        this.document.body.removeEvent('mousewheel', this.bound.mousewheel);
        this.document.removeEvent('keydown', this.bound.keydown);
    },
    start: function(ev) {
        if (ev.rightClick) {
            return;
        }
        this.parent(ev);
        this.mouse.previous = {
            x: this.mouse.start.x,
            y: this.mouse.start.y
        };
        this.value.delta = {
            x: 0,
            y: 0
        };
        var coords = this.options.original.getCoordinates(this.options.relativeTo);
        var elZindex = parseInt(this.options.original.getStyle('z-index'));
        this.placeholder = new Element('div', {
            'class': this.options.classes.placeholder,
            'styles': {
                'z-index': elZindex + 1,
                'left': coords.left,
                'top': coords.top
            }
        }).inject(this.options.parent);
        var hSize = this.placeholder.getComputedSize({
            styles: ['padding', 'margin', 'border']
        });
        this.placeholder.setStyles({
            'width': coords.width - hSize.computedLeft - hSize.computedRight,
            'height': coords.height - hSize.computedTop - hSize.computedBottom
        });
        this.attachDrag();
    },
    drag: function(ev) {
        this.mouse.now = ev.page;
        var current = {
            value: {
                now: {
                    x: 0,
                    y: 0
                },
                delta: {
                    x: 0,
                    y: 0
                }
            },
            mouse: {
                previous: {
                    x: 0,
                    y: 0
                }
            }
        };
        for (var z in this.options.modifiers) {
            if (!this.options.modifiers[z]) continue;
            current.value.now[z] = this.mouse.now[z] - this.mouse.previous[z];
            current.value.delta[z] = this.mouse.now[z] - this.mouse.start[z];
            current.mouse.previous[z] = this.mouse.now[z];
        }
        var size = this.placeholder.getSize();
        var hSize = this.placeholder.getComputedSize({
            styles: ['padding', 'margin', 'border']
        });
        var nX = size.x - hSize.computedLeft - hSize.computedRight + current.value.now.x;
        var nY = size.y - hSize.computedTop - hSize.computedBottom + current.value.now.y;
        var xMin = (Object.getFromPath(this.options, 'limit.x') ? Object.getFromPath(this.options, 'limit.x')[0] : false);
        var xMax = (Object.getFromPath(this.options, 'limit.x') ? Object.getFromPath(this.options, 'limit.x')[1] : false);
        var yMin = (Object.getFromPath(this.options, 'limit.y') ? Object.getFromPath(this.options, 'limit.y')[0] : false);
        var yMax = (Object.getFromPath(this.options, 'limit.y') ? Object.getFromPath(this.options, 'limit.y')[1] : false);
        if (xMin && nX < xMin) {
            nX = 0;
        } else if (xMax && nX > xMax) {
            nX = 0;
        }
        if (yMin && nY < yMin) {
            nY = 0;
        } else if (yMax && nY > yMax) {
            nY = 0;
        }
        if (nX > 0) {
            this.placeholder.setStyle('width', nX);
            this.value.now.x = current.value.now.x;
            this.value.delta.x = current.value.delta.x;
            this.mouse.previous.x = current.mouse.previous.x;
        }
        if (nY > 0) {
            this.placeholder.setStyle('height', nY);
            this.value.now.y = current.value.now.y;
            this.value.delta.y = current.value.delta.y;
            this.mouse.previous.y = current.mouse.previous.y;
        }
        this.fireEvent('drag', [this.element, ev]);
        ev.stop();
    },
    cancel: function(ev) {
        this.parent(ev);
        if (ev) {
            this.placeholder.destroy();
            this.detachDrag();
        }
    },
    stop: function(ev) {
        this.parent(ev);
        this.placeholder.destroy();
        this.detachDrag();
    },
    mousewheel: function(ev) {
        if (ev) {
            ev.stop();
        }
    },
    keydown: function(ev) {
        if (ev && ev.key == 'esc') {
            this.stop();
            this.fireEvent('escKeyPress', [this.element]);
        }
    }
});
IWindowResize.Move = new Class({
    Extends: IWindowResize
});
IWindow = Class.refactor(IWindow, {
    options: {
        draggable: false,
        dragOptions: {
            handle: null,
            onComplete: function() {}
        },
        resizable: false,
        resizeOptions: {
            limit: {
                x: [250, 1920],
                y: [72, 1080]
            },
            onStart: function(el, ev) {},
            onDrag: function(el, ev) {},
            onComplete: function() {}
        },
        classes: {
            placeholder: 'tpl-window-placeholder',
            dragHandle: 'tpl-window-drag-handle',
            resizeHandle: 'tpl-window-resize-handle'
        }
    },
    makeWindow: function() {
        this.previous();
        if (this.options.draggable && this.content) {
            this.content.getElement('.' + this.options.classes.headerTopRight.replace(/ /gi, '.')).addClass(this.options.classes.dragHandle);
            this.makeDraggable();
        }
        if (this.options.resizable && this.content && this.body) {
            this.resizeHandle = new Element('div', {
                'class': this.options.classes.resizeHandle
            }).inject(this.content.getElement('.' + this.options.classes.wrapperBottomRight.replace(/ /gi, '.')))
            this.makeResizable();
        }
    },
    makeDraggable: function() {
        var toggled = this.toggleVisible(true);
        this.options.dragOptions.onCancel = this.options.dragOptions.onComplete;
        if (this.options.useIframeShim) {
            this.makeIframeShim();
            var onComplete = this.options.dragOptions.onComplete;
            this.options.dragOptions.onComplete = function() {
                onComplete.apply();
                this.shim.position();
            }.bind(this);
        }
        var handle = this.element.getElement('.' + this.options.classes.dragHandle.replace(/ /gi, '.'));
        if (handle) {
            handle.setStyle('cursor', 'move');
            this.options.dragOptions.handle = handle;
        }
        this.element.makeDraggable(this.options.dragOptions);
        if (toggled) {
            this.toggleVisible(false);
        }
    },
    makeResizable: function() {
        var toggled = this.toggleVisible(true);
        var self = this;
        var options = Object.merge(this.options.resizeOptions, {
            classes: {
                placeholder: this.options.classes.placeholder
            },
            original: this.element,
            parent: this.options.inject.target,
            relativeTo: this.options.relativeTo
        });
        var onComplete = options.onComplete;
        options.onComplete = function() {
            onComplete.apply(null);
            var winSize = self.element.getDimensions();
            var nW = winSize.width + drag.value.delta.x;
            var nH = winSize.height + drag.value.delta.y;
            self.element.setStyle('width', nW);
            self.body.setStyles({
                width: nW - self.calculateWidth(),
                height: nH - self.calculateHeight(),
                minWidth: options.limit.x[0] - self.calculateWidth(),
                minHeight: options.limit.y[0] - self.calculateHeight()
            });
            self.fireEvent('bodyResize');
        };
        if (this.options.useIframeShim) {
            this.makeIframeShim();
            var prevOnComplete = options.onComplete;
            options.onComplete = function() {
                prevOnComplete.apply();
                self.shim.position();
            };
        }
        var handle = this.element.getElement('.' + this.options.classes.resizeHandle.replace(/ /gi, '.'));
        if (handle) {
            handle.setStyle('cursor', 'nw-resize');
        }
        var drag = new IWindowResize(this.resizeHandle, options);
        if (toggled) {
            this.toggleVisible(false);
        }
    },
    toggleVisible: function(show) {
        if (!this.visible && (Browser.safari || Browser.chrome) && Array.pick([show, true])) {
            this.element.setStyles({
                display: 'block',
                opacity: 0
            });
            return true;
        } else if (!Array.pick([show, false])) {
            this.element.setStyles({
                display: 'none',
                opacity: 1
            });
            return false;
        }
        return false;
    },
    maximize: function() {
        this.previous();
        if (this.options.resizable) {
            var handle = this.element.getElement('.' + this.options.classes.resizeHandle.replace(/ /gi, '.'));
            if (handle) {
                handle.hide();
            }
        }
    },
    restore: function() {
        this.previous();
        if (this.options.resizable) {
            var handle = this.element.getElement('.' + this.options.classes.resizeHandle.replace(/ /gi, '.'));
            if (handle) {
                handle.show();
            }
        }
    }
});
var Modalizer = new Class({
    Implements: [Options, Events],
    options: {
        layerId: 'ModalOverlay',
        inject: {
            target: null,
            where: ''
        },
        classes: {
            layer: 'tpl-window-modal-overlay'
        },
        elementsToHide: 'select, embed' + (Browser.ie ? '' : ', object'),
        hideOnClick: false,
        updateOnResize: true,
        onShow: function() {},
        onHide: function() {},
        onClick: function() {},
        onResize: function() {}
    },
    initialize: function(options) {
        this.setOptions(options);
        if (!this.options.inject.target) {
            this.options.inject.target = document.body;
        }
        if (!this.options.inject.where) {
            this.options.inject.where = 'bottom';
        }
        this.bound = {
            click: this.layerClick.bind(this),
            resize: this.windowResize.bind(this)
        };
        this.element = this.layer().hide();
    },
    layer: function() {
        var layer = document.id(this.options.layerId) || new Element('div', {
            id: this.options.layerId
        }).inject(this.options.inject.target, this.options.inject.where);
        if (!layer.hasClass(this.options.classes.layer)) {
            layer.addClass(this.options.classes.layer);
        }
        return layer;
    },
    attach: function() {
        this.element.addEvent('click', this.bound.click);
        if (this.options.updateOnResize) {
            window.addEvent('resize', this.bound.resize);
        }
    },
    detach: function() {
        this.element.removeEvent('click', this.bound.click);
        if (this.options.updateOnResize) {
            window.removeEvent('resize', this.bound.resize);
        }
    },
    show: function() {
        if (Browser.ie && Math.round(Browser.version) < 8) {
            var size = window.getScrollSize();
            this.element.setStyles({
                position: 'absolute',
                width: size.x,
                height: size.y
            });
        }
        this.attach();
        this.element.show();
        this.fireEvent('show');
    },
    hide: function() {
        this.detach();
        this.element.hide();
        this.fireEvent('hide');
    },
    setModalTo: function(el) {
        var elZindex = parseInt(el.getStyle('z-index'));
        var layZindex = parseInt(this.element.getStyle('z-index'));
        if (layZindex != elZindex - 1) {
            this.element.setStyle('z-index', elZindex - 1);
        }
    },
    layerClick: function() {
        this.fireEvent('click');
        if (this.options.hideOnClick) {
            this.hide(true);
        }
    },
    windowResize: function(ev) {
        this.fireEvent('resize');
    }
});
IWindow.Alert = new Class({
    Extends: IWindow,
    options: {
        draggable: true,
        width: 400,
        classes: {
            message: 'tpl-window-msg',
            messageWithIcon: 'tpl-window-icon-msg',
            messageIcon: 'tpl-window-icon',
            icon: 'tpl-info'
        },
        zIndex: 110001,
        modal: true,
        positionOnResize: true,
        destroyOnClose: true,
        closeOnEsc: true,
        buttons: [{
            text: 'OK',
            properties: {
                'tabindex': 1
            }
        }],
        buttonsType: 'input'
    },
    initialize: function(caption, message, options) {
        this.setOptions(options);
        var body = this.makeMessage(message);
        this.parent(caption, body, options);
    },
    makeMessage: function(message) {
        var msg = new Element('p', {
            'class': this.options.classes.message
        });
        if (document.id(message)) {
            message.inject(msg);
        } else {
            msg.set('html', message);
        }
        if (this.options.classes.icon) {
            new Element('span', {
                'class': this.options.classes.messageIcon + ' ' + this.options.classes.icon
            }).inject(msg, 'top');
            msg.addClass(this.options.classes.messageWithIcon);
        }
        return msg;
    }
});
IWindow.Error = new Class({
    Extends: IWindow.Alert,
    options: {
        classes: {
            icon: 'tpl-error'
        }
    }
});
IWindow.Confirm = new Class({
    Extends: IWindow.Alert,
    options: {
        classes: {
            icon: 'tpl-question',
            okButton: 'tpl-ok-button',
            cancelButton: 'tpl-cancel-button'
        },
        buttons: [{
            text: 'OK',
            properties: {
                'class': 'tpl-window-button tpl-ok-button'
            }
        }, {
            text: 'Cancel',
            properties: {
                'class': 'tpl-window-button tpl-cancel-button'
            }
        }],
        onConfirm: function() {
            this.hide(true);
        },
        onCancel: function() {
            this.hide(true);
        }
    },
    attachButton: function(b) {
        this.parent.apply(this, [b]);
        var button = b.button;
        if (button.hasClass(this.options.classes.okButton)) {
            var event = this.confirmClick.bind(this, button);
            button.store('event:confirmClick', event).addEvent('click', event);
        } else if (button.hasClass(this.options.classes.cancelButton)) {
            var event = this.cancelClick.bind(this, button);
            button.store('event:cancelClick', event).addEvent('click', event);
        }
    },
    detachButton: function(b) {
        this.parent.apply(this, [b]);
        var button = b.button;
        if (button.hasClass(this.options.classes.okButton)) {
            button.removeEvent('click', button.retrieve('event:confirmClick')).eliminate('event:confirmClick');
        } else if (button.hasClass(this.options.classes.cancelButton)) {
            button.removeEvent('click', button.retrieve('event:cancelClick')).eliminate('event:cancelClick');
        }
    },
    confirmClick: function(b, ev) {
        this.fireEvent('confirm', [ev, b]);
    },
    cancelClick: function(b, ev) {
        this.fireEvent('cancel', [ev, b]);
    }
});
var Lightbox = new Class({
    Implements: [Options, Events],
    options: {
        fadeDuration: 500,
        swipe: true,
        text: {
            close: 'Close'
        },
        getItems: function(container) {
            return container.getElements('a[href][rel=lightbox]');
        },
        getItem: function(item) {
            return item;
        },
        parseItem: function(item) {
            return {
                element: item,
                src: item.get('href'),
                description: item.get('title')
            };
        },
        classes: {
            modalLayer: 'tpl-lightbox-modal',
            lightbox: 'tpl-lightbox',
            stage: 'tpl-lightbox-stage clearfix',
            stageImageWrapper: 'tpl-lightbox-stage-image-wrapper clearfix',
            stageImage: 'tpl-lightbox-stage-image clearfix',
            stageDescription: 'tpl-lightbox-stage-description clearfix',
            stageProgressIndcator: 'tpl-lightbox-stage-progress-indicator',
            stageProgressIndcatorBg: 'tpl-lightbox-stage-progress-indicator-bg',
            stageProgressIndcatorImg: 'tpl-lightbox-stage-progress-indicator-img',
            stageControl: 'tpl-lightbox-stage-control',
            stageControlPrev: 'tpl-previous',
            stageControlNext: 'tpl-next',
            stageControlArrow: 'tpl-lightbox-stage-control-arrow',
            stageClose: 'tpl-lightbox-stage-close',
            currentItem: 'tpl-current',
            noScroll: 'tpl-lightbox-no-scroll'
        }
    },
    initialize: function(container, options) {
        this.setOptions(options);
        this.getItems = this.options.getItems;
        this.getItem = this.options.getItem;
        this.parseItem = this.options.parseItem;
        this.items = this.getItems(container);
        this.currentItem = null;
        this.preloaded = false;
        this.swipe = null;
        this.bound = {
            lightboxClick: this.lightboxClick.bind(this),
            stageNavPrevMouseEnter: this.stageNavPrevMouseEnter.bind(this),
            stageNavPrevMouseLeave: this.stageNavPrevMouseLeave.bind(this),
            stageNavPrevClick: this.stageNavPrevClick.bind(this),
            stageNavNextMouseEnter: this.stageNavNextMouseEnter.bind(this),
            stageNavNextMouseLeave: this.stageNavNextMouseLeave.bind(this),
            stageNavNextClick: this.stageNavNextClick.bind(this),
            stageCloseClick: this.stageCloseClick.bind(this),
            documentKeyDown: this.documentKeyDown.bind(this),
            windowResize: this.windowResize.bind(this)
        };
        this.create();
        this.attach();
    },
    create: function() {
        this.modalLayer = new Element('div', {
            'class': this.options.classes.modalLayer
        }).hide().inject($(document.body));
        this.lightbox = new Element('div', {
            'class': this.options.classes.lightbox
        }).hide().inject($(document.body));
        this.stage = new Element('div', {
            'class': this.options.classes.stage
        }).inject(this.lightbox);
        new Element('div', {
            'class': this.options.classes.stageImageWrapper
        }).adopt(new Element('div', {
            'class': this.options.classes.stageImage
        }).adopt(new Element('img')), new Element('div', {
            'class': this.options.classes.stageDescription
        })).inject(this.stage);
        var img = this.stage.getElement('.' + this.options.classes.stageImage.replace(/ /g, '.'));
        img.set('html', img.get('html') + '&nbsp;');
        this.progressIndicator = new Element('div', {
            'class': this.options.classes.stageProgressIndcator
        }).adopt(new Element('div', {
            'class': this.options.classes.stageProgressIndcatorBg
        }), new Element('div', {
            'class': this.options.classes.stageProgressIndcatorImg
        })).inject(this.stage);
        if (this.items.length > 1) {
            this.stageNavPrev = new Element('div', {
                'class': this.options.classes.stageControl + ' ' + this.options.classes.stageControlPrev
            }).adopt(new Element('div', {
                'class': this.options.classes.stageControlArrow
            })).inject(this.stage);
            this.stageNavNext = new Element('div', {
                'class': this.options.classes.stageControl + ' ' + this.options.classes.stageControlNext
            }).adopt(new Element('div', {
                'class': this.options.classes.stageControlArrow
            })).inject(this.stage);
        }
        this.stageClose = new Element('a', {
            'class': this.options.classes.stageClose,
            'href': '#',
            'html': '<span></span>',
            'title': this.options.text.close
        }).inject(this.stage);
    },
    attach: function() {
        this.items.each(function(el) {
            var event = this.itemClick.bind(this, el);
            el.store('event:itemClick', event).addEvent('click', event);
        }, this);
        this.lightbox.addEvent('click', this.bound.lightboxClick);
        if (this.items.length > 1) {
            this.stageNavPrev.addEvents({
                mouseenter: this.bound.stageNavPrevMouseEnter,
                mouseleave: this.bound.stageNavPrevMouseLeave,
                click: this.bound.stageNavPrevClick
            });
            this.stageNavNext.addEvents({
                mouseenter: this.bound.stageNavNextMouseEnter,
                mouseleave: this.bound.stageNavNextMouseLeave,
                click: this.bound.stageNavNextClick
            });
        }
        this.stageClose.addEvent('click', this.bound.stageCloseClick);
        if (this.swipe) {
            this.swipe.attach();
        } else if (this.options.swipe == true && typeof(Swipe) != 'undefined') {
            this.swipe = new Swipe(this.stage, {
                onSwipeLeft: function() {
                    this.loadNextPhoto();
                }.bind(this),
                onSwipeRight: function() {
                    this.loadPreviousPhoto();
                }.bind(this)
            });
        }
        document.addEvent('keydown', this.bound.documentKeyDown);
        window.addEvent('resize', this.bound.windowResize);
    },
    detach: function() {
        this.items.each(function(el) {
            el.removeEvent('click', el.retrieve('event:itemClick')).eliminate('event:itemClick');
        });
        this.lightbox.removeEvent('click', this.bound.lightboxClick);
        if (this.items.length > 1) {
            this.stageNavPrev.removeEvents({
                mouseenter: this.bound.stageNavPrevMouseEnter,
                mouseleave: this.bound.stageNavPrevMouseLeave,
                click: this.bound.stageNavPrevClick
            });
            this.stageNavNext.removeEvents({
                mouseenter: this.bound.stageNavNextMouseEnter,
                mouseleave: this.bound.stageNavNextMouseLeave,
                click: this.bound.stageNavNextClick
            });
        }
        this.stageClose.removeEvent('click', this.bound.stageCloseClick);
        if (this.swipe) {
            this.swipe.detach();
        }
        document.removeEvent('keydown', this.bound.documentKeyDown);
        window.removeEvent('resize', this.bound.windowResize);
    },
    itemClick: function(el, ev) {
        ev.preventDefault();
        this.setCurrentPhoto(el);
        this.show();
    },
    lightboxClick: function(ev) {
        var eventTarget = $(ev.target);
        if (eventTarget != this.lightbox) {
            return;
        }
        this.hide();
    },
    stageNavPrevMouseEnter: function(ev) {
        this.stageNavPrev.getElement('.' + this.options.classes.stageControlArrow.replace(/ /g, '.')).show();
    },
    stageNavPrevMouseLeave: function(ev) {
        this.stageNavPrev.getElement('.' + this.options.classes.stageControlArrow.replace(/ /g, '.')).hide();
    },
    stageNavPrevClick: function(ev) {
        this.loadPreviousPhoto();
    },
    stageNavNextMouseEnter: function(ev) {
        this.stageNavNext.getElement('.' + this.options.classes.stageControlArrow.replace(/ /g, '.')).show();
    },
    stageNavNextMouseLeave: function(ev) {
        this.stageNavNext.getElement('.' + this.options.classes.stageControlArrow.replace(/ /g, '.')).hide();
    },
    stageNavNextClick: function(ev) {
        this.loadNextPhoto();
    },
    stageCloseClick: function(ev) {
        ev.preventDefault();
        this.hide();
    },
    windowResize: function(ev) {
        if (this.lightbox.isDisplayed() == true) {
            this.position();
        }
    },
    documentKeyDown: function(ev) {
        ev = new DOMEvent(ev);
        var isSpecial = (ev.alt || ev.control || ev.meta || ev.shift ? true : false);
        if (this.lightbox.isDisplayed() == false) {
            return;
        }
        switch (ev.key) {
            case 'esc':
                {
                    ev.preventDefault();this.hide();
                    break;
                }
            case 'left':
                {
                    if (isSpecial) {
                        return;
                    }
                    ev.preventDefault();this.loadPreviousPhoto();
                    break;
                }
            case 'right':
                {
                    if (isSpecial) {
                        return;
                    }
                    ev.preventDefault();this.loadNextPhoto();
                    break;
                }
        }
    },
    loadPreviousPhoto: function() {
        var previousItem = null;
        if (this.currentItem) {
            var i = this.items.indexOf(this.currentItem);
            if (i == -1) {
                previousItem = this.items[0];
            } else if (i == 0) {
                previousItem = this.items.getLast();
            } else {
                previousItem = this.items[i - 1];
            }
        } else {
            previousItem = this.items[0];
        }
        this.setCurrentPhoto(previousItem);
    },
    loadNextPhoto: function() {
        var nextItem = null;
        if (this.currentItem) {
            var i = this.items.indexOf(this.currentItem);
            if (i == -1 || i == this.items.length - 1) {
                nextItem = this.items[0];
            } else {
                nextItem = this.items[i + 1];
            }
        } else {
            nextItem = this.items[0];
        }
        this.setCurrentPhoto(nextItem);
    },
    setCurrentPhoto: function(el) {
        if (this.currentItem == el) {
            return;
        }
        var previousItem = this.currentItem;
        if (this.currentItem && this.getItem(this.currentItem).hasClass(this.options.classes.currentItem)) {
            this.getItem(this.currentItem).removeClass(this.options.classes.currentItem);
        }
        this.currentItem = el;
        if (this.currentItem && !this.getItem(this.currentItem).hasClass(this.options.classes.currentItem)) {
            this.getItem(this.currentItem).addClass(this.options.classes.currentItem);
        }
        if (this.preloaded === false) {
            this.preloadPhotos();
        }
        var parsed = this.parseItem(this.currentItem);
        var src = parsed.src;
        if (this.preloaded === false || (typeOf(this.preloaded) == 'array' && !this.preloaded.contains(src))) {
            this.progressIndicator.show();
            Asset.image(src, {
                onLoad: function() {
                    this.progressIndicator.hide();
                    this.preloaded.push(src);
                    this.loadPhotoIntoStage({
                        element: el,
                        src: src,
                        description: parsed.description
                    });
                }.bind(this),
                onError: function() {
                    this.progressIndicator.hide();
                }.bind(this),
                onAbort: function() {
                    this.progressIndicator.hide();
                }.bind(this)
            });
        } else {
            this.loadPhotoIntoStage({
                element: el,
                src: src,
                description: parsed.description
            });
        }
    },
    loadPhotoIntoStage: function(options) {
        if (this.busy) {
            if (this.loadTimer) {
                clearTimeout(this.loadTimer);
            }
            this.loadTimer = (function() {
                this.loadTimer = null;
                this.loadPhotoIntoStage(options);
            }).delay(200, this);
            return;
        }
        this.busy = true;
        var wrapper = this.stage.getElement('.' + this.options.classes.stageImageWrapper.replace(/ /g, '.'));
        var wrapperClone = wrapper.clone().setStyle('opacity', 0).inject(wrapper, 'after');
        var photo = wrapperClone.getElement('.' + this.options.classes.stageImage.replace(/ /g, '.'));
        var description = wrapperClone.getElement('.' + this.options.classes.stageDescription.replace(/ /g, '.'));
        photo.getElement('img').set({
            'src': options.src,
            'alt': new URI(options.src).get('file')
        });
        description.set('html', options.description);
        var self = this;
        wrapper.get('tween').removeEvents('complete');
        wrapper.set('tween', {
            duration: this.options.fadeDuration,
            onComplete: function() {
                (function() {
                    wrapper.destroy();
                    self.busy = false;
                }).delay(5);
            }
        });
        wrapperClone.set('tween', {
            duration: this.options.fadeDuration,
            onComplete: function() {
                wrapperClone.setStyle('opacity', null);
            }
        });
        wrapper.fade('out');
        wrapperClone.fade('in');
        this.fireEvent('loadPhoto', [options]);
    },
    show: function() {
        var scroll = $(document.body).getScroll();
        if (scroll.x > 0 || scroll.y > 0) {
            $(document.body).store('lightbox:scroll', scroll);
        }
        [$(document.body), $(document.body).getParent()].each(function(el) {
            if (!el.hasClass(this.options.classes.noScroll)) {
                el.addClass(this.options.classes.noScroll);
            }
        }, this);
        this.position();
        this.modalLayer.show();
        this.lightbox.show();
    },
    hide: function() {
        this.lightbox.hide();
        this.modalLayer.hide();
        [$(document.body), $(document.body).getParent()].each(function(el) {
            if (el.hasClass(this.options.classes.noScroll)) {
                el.removeClass(this.options.classes.noScroll);
            }
        }, this);
        var scroll = $(document.body).retrieve('lightbox:scroll', null);
        if (scroll) {
            $(document.body).scrollTo(scroll.x, scroll.y);
        }
    },
    position: function() {
        if (Browser.ie && Browser.version < 8) {
            this.stage.setStyle('height', null);
            var winSize = window.getSize();
            var lbSize = this.lightbox.measure(function() {
                return this.getComputedSize({
                    mode: 'vertical',
                    styles: ['padding', 'margin', 'border']
                })
            });
            var stageSize = this.stage.measure(function() {
                return this.getComputedSize({
                    mode: 'vertical',
                    styles: ['padding', 'margin', 'border']
                })
            });
            if (winSize.y > stageSize.totalHeight + lbSize.computedTop + lbSize.computedBottom) {
                this.stage.setStyle('height', winSize.y - lbSize.computedTop - lbSize.computedBottom - stageSize.computedTop - stageSize.computedBottom);
            }
        }
        var image = this.stage.getElement('.' + this.options.classes.stageImage.replace(/ /g, '.'));
        if (image) {
            image.setStyles({
                height: null,
                lineHeight: null
            });
            var size = image.measure(function() {
                return this.getComputedSize({
                    mode: 'vertical',
                    styles: ['padding', 'margin', 'border']
                })
            });
            image.setStyles({
                height: size.height,
                lineHeight: size.height
            });
        }
    },
    preloadPhotos: function() {
        var photos = [];
        this.items.each(function(el) {
            if (el.get('href').length > 0) {
                photos.push(el.get('href'));
            }
        });
        if (photos.length > 0) {
            this.preloaded = [];
            var fn = (function(src) {
                Asset.image(src, {
                    onLoad: function() {
                        photos.shift();
                        this.preloaded.push(src);
                        if (photos.length > 0) {
                            fn.apply(this, [photos[0]]);
                        }
                    }.bind(this),
                    onError: function() {
                        photos.shift();
                    }.bind(this),
                    onAbort: function() {
                        photos.shift();
                    }.bind(this)
                });
            });
            fn.apply(this, [photos[0]]);
        }
    }
});
var Roar = new Class({
    Implements: [Options, Chain],
    options: {
        duration: 3000,
        position: 'upperLeft',
        container: null,
        relative: false,
        fixed: false,
        moveFirstItem: true,
        itemFxOptions: {},
        width: 300,
        margin: {
            x: 10,
            y: 10
        },
        offset: 10,
        hideOnClick: true,
        updatePositionOnResize: true,
        closeButton: false,
        classes: {
            body: 'tpl-roar-body',
            item: 'tpl-roar',
            itemTopLeft: 'tpl-roar-tl',
            itemTopRight: 'tpl-roar-tr',
            itemBottomLeft: 'tpl-roar-bl',
            itemBottomRight: 'tpl-roar-br',
            itemIcon: 'tpl-roar-tr-icon',
            iconWrapper: 'tpl-roar-icon',
            close: 'tpl-roar-close',
            clickable: 'tpl-roar-clickable',
            title: '',
            message: '',
            icon: ''
        }
    },
    initialize: function(options) {
        this.setOptions(options);
        this.items = [];
        this.container = $(this.options.container) || $(document.body);
        this.body = null;
        this.width = this.options.width;
        this.position = this.options.position;
        if (typeOf(this.position) == 'string') {
            var position = {
                x: 'center',
                y: 'center'
            };
            this.align = {
                x: 'center',
                y: 'top'
            };
            if ((/left|west/i).test(this.position)) {
                position.x = 'left';
            } else if ((/right|east/i).test(this.position)) {
                this.align.x = position.x = 'right';
            }
            if ((/upper|top|north/i).test(this.position)) {
                position.y = 'top';
            } else if ((/bottom|lower|south/i).test(this.position)) {
                this.align.y = position.y = 'bottom';
            }
            this.position = position;
        }
        this.bound = {
            windowResize: this.windowResize.bind(this)
        };
        this.createBody();
        this.attach();
        this.fitSize();
    },
    attach: function() {
        this.moveTo = this.body.setStyles.bind(this.body);
        window.addEvent('resize', this.bound.windowResize);
        if (this.items.length > 0) {
            this.items.each(function(item) {
                this.attachItem(item);
            }, this);
        }
    },
    detach: function() {
        window.removeEvent('resize', this.bound.windowResize);
        if (this.items.length > 0) {
            this.items.each(function(item) {
                this.detachItem(item);
            }, this);
        }
    },
    attachItem: function(item) {
        var options = item.retrieve('item:options');
        if (options.hideOnClick) {
            item.addClass(options.classes.clickable);
            var event = this.itemClick.bind(this, item);
            item.store('event:itemClick', event).addEvent('click', event);
        }
        if (options.closeButton) {
            var b = item.getElement('.' + options.classes.close.replace(/ /gi, '.'));
            if (b) {
                var event = this.closeClick.bind(this, item);
                b.store('event:closeClick', event).addEvent('click', event);
            }
        }
        if (options.duration) {
            var event = this.itemMouseEnter.bind(this, item);
            item.store('event:itemMouseEnter', event).addEvent('mouseenter', event);
            var event = this.itemMouseLeave.bind(this, item);
            item.store('event:itemMouseLeave', event).addEvent('mouseleave', event);
            item.timer = (function() {
                this.remove(item);
            }).delay(options.duration, this);
        }
    },
    detachItem: function(item) {
        var options = item.retrieve('item:options');
        if (options.hideOnClick) {
            item.removeClass(options.classes.clickable);
            item.removeEvent('click', item.retrieve('event:itemClick')).eliminate('event:itemClick');
        }
        if (options.closeButton) {
            var b = item.getElement('.' + options.classes.close.replace(/ /gi, '.'));
            if (b) {
                b.removeEvent('click', b.retrieve('event:closeClick')).eliminate('event:closeClick');
            }
        }
        if (options.duration) {
            item.removeEvent('mouseenter', item.retrieve('event:itemMouseEnter')).eliminate('event:itemMouseEnter');
            item.removeEvent('mouseleave', item.retrieve('event:itemMouseLeave')).eliminate('event:itemMouseLeave');
            if (item.timer) {
                clearTimeout(item.timer);
                item.timer = null;
            }
        }
    },
    itemClick: function(item, ev) {
        ev.stop();
        if (item.timer) {
            clearTimeout(item.timer);
            item.timer = null;
        }
        this.remove(item);
    },
    itemMouseEnter: function(item, ev) {
        if (item.timer) {
            clearTimeout(item.timer);
            item.timer = null;
        }
    },
    itemMouseLeave: function(item, ev) {
        item.timer = (function() {
            this.remove(item);
        }).delay(this.options.duration, this);
    },
    closeClick: function(item, ev) {
        var options = item.retrieve('item:options');
        this.remove(item);
        if (typeof(options.onClose) != 'undefined') {
            options.onClose.apply(this, [item, this.items.length]);
        }
    },
    createBody: function() {
        this.body = new Element('div', {
            'class': this.options.classes.body
        }).inject(this.container);
    },
    alert: function(title, message, options) {
        this.options = Object.merge(Object.clone(this.options), {
            icon: ''
        }, options);
        var msg = [];
        if (message) {
            if (typeOf(message) == 'array') {
                message.each(function(m) {
                    if (m.length > 0) {
                        msg.push(new Element('p', {
                            'html': m,
                            'class': this.options.classes.message
                        }));
                    }
                }, this);
            } else if (message.length > 0) {
                msg.push(new Element('p', {
                    'html': message,
                    'class': this.options.classes.message
                }));
            }
        }
        var table = new Element('table', {
            'cellpadding': 0,
            'cellspacing': 0
        }).adopt(new Element('tbody').adopt(new Element('tr').adopt(new Element('td', {
            'class': this.options.classes.itemTopLeft
        }), new Element('td', {
            'class': this.options.classes.itemTopRight + (this.options.classes.icon.length > 0 ? ' ' + this.options.classes.itemIcon : '')
        }).adopt((this.options.classes.icon.length > 0 ? new Element('span', {
            'class': this.options.classes.iconWrapper + ' ' + this.options.classes.icon
        }) : false), new Element('h3', {
            'html': title,
            'class': this.options.classes.title
        }), msg, (this.options.closeButton == true ? new Element('a', {
            'class': this.options.classes.close
        }) : false))), new Element('tr').adopt(new Element('td', {
            'class': this.options.classes.itemBottomLeft
        }), new Element('td', {
            'class': this.options.classes.itemBottomRight
        }))));
        return this.inject(table);
    },
    box: function(content, options) {
        this.options = Object.merge(Object.clone(this.options), options);
        var table = new Element('table', {
            'cellpadding': 0,
            'cellspacing': 0
        }).adopt(new Element('tbody').adopt(new Element('tr').adopt(new Element('td', {
            'class': this.options.classes.itemTopLeft
        }), new Element('td', {
            'class': this.options.classes.itemTopRight
        }).adopt(content, (this.options.closeButton == true ? new Element('a', {
            'class': this.options.classes.close
        }) : false))), new Element('tr').adopt(new Element('td', {
            'class': this.options.classes.itemBottomLeft
        }), new Element('td', {
            'class': this.options.classes.itemBottomRight
        }))));
        return this.inject(table);
    },
    inject: function(itemBody) {
        if (this.body.isDisplayed() == false) {
            this.body.show();
        }
        var itemOptions = {
            'class': this.options.classes.item,
            'styles': {
                'width': this.width,
                'opacity': 0
            }
        }
        var item = new Element('div', itemOptions).adopt(itemBody).inject(this.body);
        var offset = [0, 0];
        if (this.options.moveFirstItem == true) {
            offset = [-this.options.offset - item.offsetHeight, 0];
        }
        if (this.lastItem && this.lastOffset > -1) {
            offset[0] = this.lastOffset;
            offset[1] = this.lastOffset + this.lastItem.offsetHeight + this.options.offset;
        }
        item.setStyle(this.align.x, 0).set('morph', Object.merge({
            link: 'cancel',
            transition: Fx.Transitions.Back.easeOut,
            onStart: Chain.prototype.clearChain,
            onComplete: function() {
                if (Browser.ie && Math.round(Browser.version) < 9) {
                    item.style.removeAttribute('filter');
                }
            }
        }, this.options.itemFxOptions));
        item.store('item:options', Object.clone(this.options));
        this.lastItem = item;
        this.lastOffset = offset[1];
        this.attachItem(item);
        this.items.push(item);
        var bodyW = 0;
        var bodyH = 0;
        this.items.each(function(i) {
            bodyW = Math.max(bodyW, i.offsetWidth);
            bodyH = Math.max(bodyH, i.offsetTop + i.offsetHeight);
        }, this);
        if (bodyW > 0 && bodyH > 0) {
            this.body.setStyles({
                width: bodyW,
                height: bodyH
            });
        }
        this.reposition();
        var to = {
            opacity: 1
        };
        to[this.align.y] = offset;
        item.morph(to);
        if (typeof(this.options.onShow) != 'undefined') {
            this.options.onShow.apply(this, [item, this.items.length]);
        }
        return this;
    },
    remove: function(item) {
        if (!this.items.contains(item)) {
            return this;
        }
        var options = item.retrieve('item:options');
        this.items.splice(this.items.indexOf(item), 1);
        this.detachItem(item);
        if (this.lastItem == item) {
            this.lastItem = null;
            this.lastOffset = 0;
        }
        if (this.items.length > 0) {
            this.lastItem = this.items[this.items.length - 1];
            this.lastOffset = this.lastItem.getPosition(this.body).y;
        }
        var to = {
            opacity: 0
        };
        if (options.moveFirstItem == true || item.getStyle(this.align.y).toInt() > 0) {
            to[this.align.y] = item.getStyle(this.align.y).toInt() - item.offsetHeight - options.offset;
        }
        var self = this;
        item.morph(to).get('morph').chain(function() {
            item.destroy();
            if (self.items.length == 0) {
                self.body.hide();
            }
        });
        if (typeof(options.onHide) != 'undefined') {
            options.onHide.apply(this, [item, this.items.length]);
        }
        return this.callChain(item);
    },
    empty: function() {
        while (this.items.length) {
            this.remove(this.items[0]);
        }
        return this;
    },
    windowResize: function() {
        this.fitSize();
        if (this.options.updatePositionOnResize) {
            this.reposition();
        }
    },
    fitSize: function() {
        var winSize = $(document.body).getSize();
        var width = 0;
        if (winSize.x < this.options.width) {
            width = winSize.x - 10;
        } else {
            width = this.options.width;
        }
        if (this.width != width) {
            this.width = width;
            this.items.each(function(item) {
                item.setStyle('width', this.width);
            }, this);
            var bodyW = 0;
            var bodyH = 0;
            this.items.each(function(i) {
                bodyW = Math.max(bodyW, i.offsetWidth);
                bodyH = Math.max(bodyH, i.offsetTop + i.offsetHeight);
            }, this);
            if (bodyW > 0 && bodyH > 0) {
                this.body.setStyles({
                    width: bodyW,
                    height: bodyH
                });
            }
        }
    },
    reposition: function() {
        var posLeft = 0;
        var posTop = 0;
        if (this.options.fixed == true) {
            if (this.body.retrieve('style:top')) {
                posTop = this.body.retrieve('style:top');
            } else {
                posTop = this.body.getPosition().y;
                this.body.store('style:top', posTop);
            }
        }
        if (this.options.relative && this.options.container) {
            var max = this.options.container.getCoordinates();
            var margin = this.options.margin;
            switch (this.position.x) {
                case 'left':
                    {
                        posLeft = margin.x;
                        break;
                    }
                case 'right':
                    {
                        posLeft = max.width - margin.x - this.body.offsetWidth;
                        break;
                    }
                default:
                    {
                        posLeft = max.width / 2 + margin.x - this.body.offsetWidth / 2;
                        break;
                    }
            }
            if (this.options.fixed == false) {
                switch (this.position.y) {
                    case 'top':
                        {
                            posTop = margin.y;
                            break;
                        }
                    case 'bottom':
                        {
                            posTop = max.height - margin.y - this.body.offsetHeight;
                            break;
                        }
                    default:
                        {
                            posTop = max.height / 2 + margin.y - this.body.offsetHeight / 2;
                        }
                }
            }
        } else {
            var max = $(document.body).getCoordinates();
            var margin = this.options.margin;
            var rel = (typeOf(this.container) == 'element') ? this.container.getCoordinates() : max;
            switch (this.position.x) {
                case 'left':
                    {
                        posLeft = Math.max(rel.left, max.left) + margin.x;
                        break;
                    }
                case 'right':
                    {
                        posLeft = Math.min(rel.right, max.right) - margin.x - this.body.offsetWidth;
                        break;
                    }
                default:
                    {
                        posLeft = Math.max(rel.right, max.right) / 2 + margin.x - this.body.offsetWidth / 2;
                        break;
                    }
            }
            if (this.options.fixed == false) {
                switch (this.position.y) {
                    case 'top':
                        {
                            posTop = Math.max(rel.top, max.top) + margin.y;
                            break;
                        }
                    case 'bottom':
                        {
                            posTop = Math.min(rel.bottom, max.bottom) - margin.y - this.body.offsetHeight;
                            break;
                        }
                    default:
                        {
                            posTop = Math.max(rel.bottom, max.bottom) / 2 + margin.y - this.body.offsetHeight / 2;
                        }
                }
            }
        }
        this.moveTo({
            left: posLeft,
            top: posTop
        });
    }
});
var SPG_CAROUSEL_SIZE_SMALL = 1;
var SPG_CAROUSEL_SIZE_LARGE = 2;
var SPG_CAROUSEL_MODE_CLICK = 1;
var SPG_CAROUSEL_MODE_HOVER = 2;
var ScrollerPhotoGallery = new Class({
    Implements: [Options, Events],
    options: {
        transition: Fx.Transitions.Quad.easeInOut,
        durationSmall: 500,
        durationLarge: 500,
        pause: 1000,
        autoPlay: false,
        swipe: true,
        carouselSize: SPG_CAROUSEL_SIZE_SMALL,
        carouselMode: SPG_CAROUSEL_MODE_CLICK,
        carousel: '.tpl-photo-gallery-carousel',
        carouselNavPrev: '.tpl-photo-gallery-carousel-control.tpl-previous',
        carouselNavNext: '.tpl-photo-gallery-carousel-control.tpl-next',
        filmStripContainer: '.tpl-photo-gallery-carousel-film-strip-container',
        filmStrip: '.tpl-photo-gallery-carousel-film-strip',
        slide: '.tpl-photo-gallery-carousel-slide',
        classes: {
            carouselNavMouseOver: 'tpl-photo-gallery-carousel-control-mouseover',
            currentSlide: 'tpl-current'
        }
    },
    initialize: function(container, options) {
        this.setOptions(options);
        this.container = $(container);
        this.carousel = this.container.getElement(this.options.carousel);
        this.carouselNavPrev = this.carousel.getElement(this.options.carouselNavPrev);
        this.carouselNavNext = this.carousel.getElement(this.options.carouselNavNext);
        this.filmStripContainer = this.container.getElement(this.options.filmStripContainer);
        this.filmStripContainerSize = this.filmStripContainer.measure(function() {
            return this.getComputedSize({
                mode: 'horizontal',
                styles: ['border', 'padding', 'margin']
            })
        });
        this.filmStrip = this.container.getElement(this.options.filmStrip);
        this.slides = this.container.getElements(this.options.slide);
        this.currentSlide = null;
        this.swipe = null;
        var self = this;
        this.slideCoordinates = this.slides.map(function(s) {
            if (s.hasClass(this.options.classes.currentSlide)) {
                this.currentSlide = s;
            }
            return s.measure(function() {
                var coords = this.getCoordinates(self.filmStrip);
                coords.left = coords.left.toInt();
                coords.right = coords.right.toInt();
                return coords;
            });
        }, this);
        this.avgSlideWidth = Math.round(this.filmStrip.measure(function() {
            return this.getSize().x
        }) / this.slides.length);
        this.duration = (this.options.carouselSize == SPG_CAROUSEL_SIZE_SMALL ? this.options.durationSmall : this.options.durationLarge);
        this.scrollFx = new Fx.Scroll(this.filmStripContainer, {
            transition: this.options.transition,
            duration: this.duration,
            wheelStops: false
        });
        this.currentSpeed = this.duration;
        this.currentDelay = this.options.pause;
        if (this.currentSlide) {
            this.scrollToSlide(this.currentSlide, this.slides[0], true);
        } else if (this.slides.length > 0) {
            this.currentSlide = this.slides[0];
            this.scrollFx.set(0, 0);
        }
        this.bound = {
            containerMouseEnter: this.containerMouseEnter.bind(this),
            containerMouseLeave: this.containerMouseLeave.bind(this),
            carouselNavPrevMouseEnter: this.carouselNavPrevMouseEnter.bind(this),
            carouselNavPrevMouseLeave: this.carouselNavPrevMouseLeave.bind(this),
            carouselNavPrevMouseDown: this.carouselNavPrevMouseDown.bind(this),
            carouselNavPrevMouseUp: this.carouselNavPrevMouseUp.bind(this),
            carouselNavPrevClick: this.carouselNavPrevClick.bind(this),
            carouselNavNextMouseEnter: this.carouselNavNextMouseEnter.bind(this),
            carouselNavNextMouseLeave: this.carouselNavNextMouseLeave.bind(this),
            carouselNavNextMouseDown: this.carouselNavNextMouseDown.bind(this),
            carouselNavNextMouseUp: this.carouselNavNextMouseUp.bind(this),
            carouselNavNextClick: this.carouselNavNextClick.bind(this)
        };
        this.attach();
    },
    attach: function() {
        this.container.addEvents({
            mouseenter: this.bound.containerMouseEnter,
            mouseleave: this.bound.containerMouseLeave
        });
        this.carouselNavPrev.addEvents({
            mouseenter: this.bound.carouselNavPrevMouseEnter,
            mouseleave: this.bound.carouselNavPrevMouseLeave,
            mousedown: this.bound.carouselNavPrevMouseDown,
            mouseup: this.bound.carouselNavPrevMouseUp,
            click: this.bound.carouselNavPrevClick
        });
        this.carouselNavNext.addEvents({
            mouseenter: this.bound.carouselNavNextMouseEnter,
            mouseleave: this.bound.carouselNavNextMouseLeave,
            mousedown: this.bound.carouselNavNextMouseDown,
            mouseup: this.bound.carouselNavNextMouseUp,
            click: this.bound.carouselNavNextClick
        });
        if (this.swipe) {
            this.swipe.attach();
        } else if (this.filmStripContainer && this.options.swipe == true && typeof(Swipe) != 'undefined') {
            this.swipe = new Swipe(this.filmStripContainer, {
                onSwipeLeft: function() {
                    if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
                        this.scrollFx.cancel();
                    }
                    if (this.timer) {
                        clearTimeout(this.timer);
                        this.timer = null;
                    }
                    if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
                        var oldSpeed = this.currentSpeed;
                        this.currentSpeed = 300;
                    }
                    this.forward();
                    if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
                        this.currentSpeed = oldSpeed;
                    }
                }.bind(this),
                onSwipeRight: function() {
                    if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
                        this.scrollFx.cancel();
                    }
                    if (this.timer) {
                        clearTimeout(this.timer);
                        this.timer = null;
                    }
                    if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
                        var oldSpeed = this.currentSpeed;
                        this.currentSpeed = 300;
                    }
                    this.backward();
                    if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
                        this.currentSpeed = oldSpeed;
                    }
                }.bind(this)
            });
        }
        if (this.options.autoPlay) {
            this.autoPlayTimer = this.autoPlay.delay(2000, this);
        }
    },
    detach: function() {
        this.stop();
        this.container.removeEvents({
            mouseenter: this.bound.containerMouseEnter,
            mouseleave: this.bound.containerMouseLeave
        });
        this.carouselNavPrev.removeEvents({
            mouseenter: this.bound.carouselNavPrevMouseEnter,
            mouseleave: this.bound.carouselNavPrevMouseLeave,
            mousedown: this.bound.carouselNavPrevMouseDown,
            mouseup: this.bound.carouselNavPrevMouseUp,
            click: this.bound.carouselNavPrevClick
        });
        this.carouselNavNext.removeEvents({
            mouseenter: this.bound.carouselNavNextMouseEnter,
            mouseleave: this.bound.carouselNavNextMouseLeave,
            mousedown: this.bound.carouselNavNextMouseDown,
            mouseup: this.bound.carouselNavNextMouseUp,
            click: this.bound.carouselNavNextClick
        });
        if (this.swipe) {
            this.swipe.detach();
        }
    },
    reinitialize: function() {
        this.filmStripContainerSize = this.filmStripContainer.measure(function() {
            return this.getComputedSize({
                mode: 'horizontal',
                styles: ['border', 'padding', 'margin']
            })
        });
        var self = this;
        this.slideCoordinates = this.slides.map(function(s) {
            if (s.hasClass(this.options.classes.currentSlide)) {
                this.currentSlide = s;
            }
            return s.measure(function() {
                var coords = this.getCoordinates(self.filmStrip);
                coords.left = coords.left.toInt();
                coords.right = coords.right.toInt();
                return coords;
            });
        }, this);
        this.avgSlideWidth = Math.round(this.filmStrip.measure(function() {
            return this.getSize().x
        }) / this.slides.length);
        this.currentSlide = this.slides[0];
        this.scrollFx.set(0, 0);
    },
    containerMouseEnter: function(ev) {
        if (this.options.autoPlay) {
            this.stop();
        }
        if (this.autoPlayTimer) {
            clearTimeout(this.autoPlayTimer);
            this.autoPlayTimer = null;
        }
    },
    containerMouseLeave: function(ev) {
        if (this.options.autoPlay) {
            this.autoPlayTimer = this.autoPlay.delay(2000, this);
        }
        if (this.startTimer) {
            clearTimeout(this.startTimer);
            this.startTimer = null;
        }
    },
    carouselNavPrevMouseEnter: function(ev) {
        if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
            this.startTimer = this.startBackward.delay(5, this);
        }
        if (!this.carouselNavPrev.hasClass(this.options.classes.carouselNavMouseOver)) {
            this.carouselNavPrev.addClass(this.options.classes.carouselNavMouseOver);
        }
    },
    carouselNavPrevMouseLeave: function(ev) {
        if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
            this.stop();
        }
        if (this.carouselNavPrev.hasClass(this.options.classes.carouselNavMouseOver)) {
            this.carouselNavPrev.removeClass(this.options.classes.carouselNavMouseOver);
        }
    },
    carouselNavPrevMouseDown: function(ev) {
        this.speedUp();
    },
    carouselNavPrevMouseUp: function(ev) {
        this.slowDown();
    },
    carouselNavPrevClick: function(ev) {
        if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
            this.scrollFx.cancel();
        }
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
            var oldSpeed = this.currentSpeed;
            this.currentSpeed = 300;
        }
        this.backward();
        if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
            this.currentSpeed = oldSpeed;
        }
    },
    carouselNavNextMouseEnter: function(ev) {
        if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
            this.startTimer = this.startForward.delay(5, this);
        }
        if (!this.carouselNavNext.hasClass(this.options.classes.carouselNavMouseOver)) {
            this.carouselNavNext.addClass(this.options.classes.carouselNavMouseOver);
        }
    },
    carouselNavNextMouseLeave: function(ev) {
        if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
            this.stop();
        }
        if (this.carouselNavNext.hasClass(this.options.classes.carouselNavMouseOver)) {
            this.carouselNavNext.removeClass(this.options.classes.carouselNavMouseOver);
        }
    },
    carouselNavNextMouseDown: function(ev) {
        this.speedUp();
    },
    carouselNavNextMouseUp: function(ev) {
        this.slowDown();
    },
    carouselNavNextClick: function(ev) {
        if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
            this.scrollFx.cancel();
        }
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
            var oldSpeed = this.currentSpeed;
            this.currentSpeed = 300;
        }
        this.forward();
        if (this.options.carouselMode == SPG_CAROUSEL_MODE_HOVER) {
            this.currentSpeed = oldSpeed;
        }
    },
    startBackward: function() {
        this.scrollFx.cancel();
        var fn = (function() {
            this.timer = this.backward.delay(this.currentDelay, this);
        }).bind(this);
        this.scrollFx.addEvent('complete', fn);
        this.backward();
    },
    startForward: function() {
        this.scrollFx.cancel();
        var fn = (function() {
            this.timer = this.forward.delay(this.currentDelay, this);
        }).bind(this);
        this.scrollFx.addEvent('complete', fn);
        this.forward();
    },
    speedUp: function() {
        this.currentSpeed = 300;
        this.currentDelay = 300;
    },
    slowDown: function() {
        this.currentSpeed = this.duration;
        this.currentDelay = this.options.pause;
    },
    backward: function() {
        var delta = 0;
        var i = this.slides.length - 1;
        while (i >= 0) {
            if (this.slideCoordinates[i].left < this.filmStripContainer.scrollLeft) {
                delta = this.filmStripContainer.scrollLeft - this.slideCoordinates[i].left
                break;
            }
            i--;
        }
        var left = 0;
        if (i >= 0 && delta > 0) {
            this.scrollFx.setOptions({
                duration: Math.round(delta / this.avgSlideWidth * this.currentSpeed)
            });
            left = this.slideCoordinates[i].left;
        } else if (i < 0 && delta == 0) {
            left = this.slideCoordinates[this.slides.length - 1].right - this.filmStripContainerSize.width;
            this.scrollFx.setOptions({
                duration: this.duration
            });
        } else {
            this.scrollFx.setOptions({
                duration: this.duration
            });
        }
        this.scrollFx.start(left, 0);
    },
    forward: function() {
        var delta = 0;
        var i = 0;
        while (i < this.slides.length) {
            if (this.slideCoordinates[i].right - this.filmStripContainer.scrollLeft > this.filmStripContainerSize.width) {
                delta = this.slideCoordinates[i].right - this.filmStripContainer.scrollLeft - this.filmStripContainerSize.width;
                break;
            }
            i++;
        }
        var left = 0;
        if (i < this.slides.length && delta > 0) {
            this.scrollFx.setOptions({
                duration: Math.round(delta / this.avgSlideWidth * this.currentSpeed)
            });
            left = this.slideCoordinates[i].right - this.filmStripContainerSize.width;
        } else {
            this.scrollFx.setOptions({
                duration: this.duration
            });
        }
        this.scrollFx.start(left, 0);
    },
    scrollToSlide: function(current, previous, skipFx) {
        var bScrollToBeginning = false;
        var bScrollToEnd = false;
        var bScrollToPos = false;
        var left = 0;
        var delta = 0;
        var ci = this.slides.indexOf(current);
        var pi = (previous ? this.slides.indexOf(previous) : -1);
        if (this.slideCoordinates[ci].left <= this.filmStripContainer.scrollLeft || (ci > 0 && this.slideCoordinates[ci - 1].left <= this.filmStripContainer.scrollLeft)) {
            var ni = (ci > 0 ? ci - 1 : 0);
            if (ni == 0 && pi == this.slides.length - 1) {
                bScrollToBeginning = true;
            } else {
                bScrollToPos = true;
                delta = this.filmStripContainer.scrollLeft - this.slideCoordinates[ni].left;
                left = this.slideCoordinates[ni].left;
            }
        } else if (this.slideCoordinates[ci].right - this.filmStripContainer.scrollLeft >= this.filmStripContainerSize.width || (ci < this.slides.length - 1 && this.slideCoordinates[ci + 1].right - this.filmStripContainer.scrollLeft >= this.filmStripContainerSize.width)) {
            var ni = (ci < this.slides.length - 1 ? ci + 1 : this.slides.length - 1);
            if (ni == this.slides.length - 1 && pi == 0) {
                bScrollToEnd = true;
            } else {
                bScrollToPos = true;
                delta = this.slideCoordinates[ni].right - this.filmStripContainer.scrollLeft - this.filmStripContainerSize.width;
                left = this.slideCoordinates[ni].right - this.filmStripContainerSize.width;
            }
        }
        if (bScrollToBeginning) {
            this.scrollFx.cancel();
            this.scrollFx.setOptions({
                duration: this.duration
            });
            if (skipFx) {
                this.scrollFx.set(0, 0);
            } else {
                this.scrollFx.start(0, 0);
            }
        } else if (bScrollToEnd) {
            this.scrollFx.cancel();
            this.scrollFx.setOptions({
                duration: this.duration
            });
            if (skipFx) {
                this.scrollFx.set(this.slideCoordinates[this.slides.length - 1].right - this.filmStripContainerSize.width, 0);
            } else {
                this.scrollFx.start(this.slideCoordinates[this.slides.length - 1].right - this.filmStripContainerSize.width, 0);
            }
        } else if (bScrollToPos && delta > 0) {
            delta = (delta / this.avgSlideWidth > 2 ? this.avgSlideWidth : delta);
            this.scrollFx.cancel();
            this.scrollFx.setOptions({
                duration: Math.round(delta / this.avgSlideWidth * this.currentSpeed)
            });
            if (skipFx) {
                this.scrollFx.set(left, 0);
            } else {
                this.scrollFx.start(left, 0);
            }
        }
    },
    autoPlay: function() {
        this.startForward();
    },
    stop: function() {
        this.slowDown();
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        this.scrollFx.removeEvents('complete');
    }
});
var Swipe = new Class({
    Implements: [Options, Events],
    options: {
        tolerance: 50,
        preventDefaults: true
    },
    initialize: function(element, options) {
        this.setOptions(options);
        this.element = $(element);
        this.startX = null, this.startY = null, this.isMoving = false;
        this.bound = {
            touchStart: this.touchStart.bind(this),
            touchMove: this.touchMove.bind(this),
            touchEnd: this.touchEnd.bind(this)
        };
        this.attach();
    },
    attach: function() {
        this.element.addListener('touchstart', this.bound.touchStart);
        this.element.addListener('touchend', this.bound.touchEnd);
    },
    detach: function() {
        this.element.removeListener('touchstart', this.bound.touchStart);
        this.element.removeListener('touchend', this.bound.touchEnd);
    },
    touchStart: function(ev) {
        if (ev.touches.length == 1) {
            this.startX = ev.touches[0].pageX;
            this.startY = ev.touches[0].pageY;
            this.isMoving = true;
            this.element.addListener('touchmove', this.bound.touchMove);
        }
    },
    touchMove: function(ev) {
        if (this.options.preventDefaults && ev.cancelable) {
            ev.preventDefault();
        }
        if (this.isMoving) {
            var x = ev.touches[0].pageX;
            var y = ev.touches[0].pageY;
            var dx = this.startX - x;
            var dy = this.startY - y;
            if (Math.abs(dx) >= this.options.tolerance) {
                this.cancelTouch();
                this.fireEvent(dx > 0 ? 'swipeLeft' : 'swipeRight');
            } else if (Math.abs(dy) >= this.options.tolerance) {
                this.cancelTouch();
                this.fireEvent(dy > 0 ? 'swipeTop' : 'swipeBottom');
            }
        }
    },
    touchEnd: function(ev) {
        if (this.isMoving) {
            this.cancelTouch();
        }
    },
    cancelTouch: function() {
        this.element.removeListener('touchmove', this.bound.touchMove);
        this.startX = null;
        this.startY = null, this.isMoving = false;
    }
});
var Tooltip = new Class({
    Implements: [Options, Events],
    options: {
        title: '',
        text: '',
        titleTag: 'h3',
        textTag: 'p',
        width: 'auto',
        displayMode: 1,
        showDelay: 300,
        hideDelay: 300,
        offset: {
            x: 16,
            y: 16
        },
        hook: {
            target: 'bottomRight',
            tip: 'topLeft'
        },
        container: null,
        relative: false,
        relativeParentElement: false,
        trigger: null,
        triggerHook: null,
        closeButton: false,
        classes: {
            tooltip: 'tpl-tooltip',
            topLeft: 'tpl-tooltip-tl',
            topRight: 'tpl-tooltip-tr',
            left: 'tpl-tooltip-l',
            right: 'tpl-tooltip-r',
            content: 'tpl-tooltip-content clearfix',
            bottomLeft: 'tpl-tooltip-bl',
            bottomRight: 'tpl-tooltip-br',
            close: 'tpl-tooltip-close',
            tipText: 'tpl-tooltip-tip-text',
            arrow: '',
            icon: ''
        },
        zIndex: 1000,
        positionTip: false,
        onShow: function(tooltip) {
            var bShow = this.position();
            if (bShow == true) {
                this.tooltip.setStyle('display', 'block');
                this.display = true;
            }
        },
        onHide: function(tooltip) {
            this.tooltip.setStyle('display', 'none');
            this.display = false;
        },
        onClose: function(tooltip) {
            this.tooltip.setStyle('display', 'none');
            this.display = false;
        }
    },
    display: false,
    disabled: false,
    initialize: function(eventTarget, options) {
        this.setOptions(options);
        this.eventTarget = $(eventTarget);
        this.target = this.options.trigger ? $(this.options.trigger) : this.eventTarget;
        this.tooltip = this.makeTip().inject(this.options.container || document.body);
        if (Browser.ie) {
            var dim = this.tooltip.getComputedSize();
            this.tooltip.setStyles({
                width: dim.width,
                height: dim.height
            });
        }
        this.bound = {
            targetEnter: this.targetEnter.bind(this),
            targetLeave: this.targetLeave.bind(this),
            targetFocus: this.targetFocus.bind(this),
            targetBlur: this.targetBlur.bind(this),
            tipEnter: this.tipEnter.bind(this),
            tipLeave: this.tipLeave.bind(this),
            windowResize: this.windowResize.bind(this)
        };
        this.attach();
    },
    attach: function() {
        if (this.eventTarget && this.disabled == false) {
            if (this.options.displayMode == 1) {
                this.eventTarget.addEvent('mouseenter', this.bound.targetEnter);
                this.eventTarget.addEvent('mouseleave', this.bound.targetLeave);
                this.tooltip.addEvent('mouseenter', this.bound.tipEnter);
                this.tooltip.addEvent('mouseleave', this.bound.tipLeave);
            }
            if (this.options.displayMode == 2) {
                this.eventTarget.addEvent('focus', this.bound.targetFocus);
                this.eventTarget.addEvent('blur', this.bound.targetBlur);
            }
            if (this.eventTarget.getProperty('title')) {
                this.eventTarget.store('tooltip:title', this.eventTarget.getProperty('title')).erase('title');
            }
            window.addEvent('resize', this.bound.windowResize);
        }
    },
    detach: function() {
        if (this.eventTarget && this.disabled == true && this.eventTarget.retrieve('tooltip:title') != null && (this.options.displayMode == 1 || this.options.displayMode == 2)) {
            this.eventTarget.set('title', this.eventTarget.retrieve('tooltip:title')).eliminate('tooltip:title');
            return;
        }
        clearTimeout(this.timer);
        this.tooltip.hide();
        if (this.eventTarget) {
            if (this.options.displayMode == 1) {
                this.eventTarget.removeEvent('mouseenter', this.bound.targetEnter);
                this.eventTarget.removeEvent('mouseleave', this.bound.targetLeave);
                this.tooltip.removeEvent('mouseenter', this.bound.tipEnter);
                this.tooltip.removeEvent('mouseleave', this.bound.tipLeave);
            }
            if (this.options.displayMode == 2) {
                this.eventTarget.removeEvent('focus', this.bound.targetFocus);
                this.eventTarget.removeEvent('blur', this.bound.targetBlur);
            }
            if (this.eventTarget.retrieve('tooltip:title') != null) {
                this.eventTarget.set('title', this.eventTarget.retrieve('tooltip:title')).eliminate('tooltip:title');
            }
            window.removeEvent('resize', this.bound.windowResize);
        }
    },
    makeTip: function() {
        var styles = {
            'position': 'absolute',
            'top': 0,
            'left': -9999,
            'z-index': this.options.zIndex
        };
        if (this.options.width != 'auto') {
            styles = Object.merge({
                'width': this.options.width
            }, styles);
        }
        var tooltip = new Element('div', {
            'class': this.options.classes.tooltip,
            'styles': styles
        })
        var table = new Element('table');
        table.cellPadding = '0';
        table.cellSpacing = '0';
        table.border = '0';
        var tbody = new Element('tbody').inject(table, 'inside');
        var tr1 = new Element('tr').inject(tbody, 'inside');
        new Element('td', {
            'class': this.options.classes.topLeft
        }).inject(tr1, 'inside');
        new Element('td', {
            'class': this.options.classes.topRight
        }).inject(tr1, 'inside');
        var tr2 = new Element('tr').inject(tbody, 'inside');
        new Element('td', {
            'class': this.options.classes.left
        }).inject(tr2, 'inside');
        var container = new Element('td', {
            'class': this.options.classes.right
        }).inject(tr2, 'inside');
        var content = new Element('div', {
            'class': this.options.classes.content
        }).inject(container, 'inside');
        if (this.options.classes.arrow.length > 0) {
            new Element('span', {
                'class': this.options.classes.arrow
            }).inject(content);
        }
        if (this.options.closeButton == true) {
            new Element('a', {
                'class': this.options.classes.close
            }).addEvents({
                click: function(ev) {
                    ev = new DOMEvent(ev);
                    this.close($(ev.target));
                }.bind(this)
            }).inject(content, 'inside');
        }
        if (this.options.classes.icon.length > 0) {
            new Element('span', {
                'class': this.options.classes.icon
            }).inject(content, 'inside');
        }
        var body = new Element('span', {
            'class': this.options.classes.tipText
        }).inject(content, 'inside');
        if (this.options.title.length > 0) {
            new Element(this.options.titleTag, {
                'html': this.options.title
            }).inject(body, 'inside');
        }
        new Element(this.options.textTag, {
            'html': this.options.text
        }).inject(body, 'inside');
        var tr3 = new Element('tr').inject(tbody, 'inside');
        new Element('td', {
            'class': this.options.classes.bottomLeft
        }).inject(tr3, 'inside');
        new Element('td', {
            'class': this.options.classes.bottomRight
        }).inject(tr3, 'inside');
        tooltip.adopt(table);
        return tooltip;
    },
    targetEnter: function(event) {
        clearTimeout(this.timer);
        if (!this.display) {
            this.timer = this.show.delay(this.options.showDelay, this);
        }
    },
    targetLeave: function(event) {
        if (!this.options.closeButton) {
            clearTimeout(this.timer);
            this.timer = this.hide.delay(this.options.hideDelay, this);
        }
    },
    targetFocus: function(event) {
        clearTimeout(this.timer);
        if (!this.display) {
            this.timer = this.show.delay(this.options.showDelay, this);
        }
    },
    targetBlur: function(event) {
        if (!this.options.closeButton) {
            clearTimeout(this.timer);
            this.timer = this.hide.delay(this.options.hideDelay, this);
        }
    },
    tipEnter: function(event) {
        clearTimeout(this.timer);
        if (!this.display) {
            this.timer = this.show.delay(this.options.showDelay, this);
        }
    },
    tipLeave: function(event) {
        if (!this.options.closeButton) {
            clearTimeout(this.timer);
            this.timer = this.hide.delay(this.options.hideDelay, this);
        }
    },
    windowResize: function() {
        if (this.display == true) {
            this.position();
        }
    },
    position: function() {
        return (this.options.positionTip && typeOf(this.options.positionTip) == 'function' ? this.options.positionTip : this.positionTip).apply(this);
    },
    positionTip: function() {
        var targetCoords = {
            left: 0,
            right: 0,
            top: 0,
            bottom: 0,
            width: 0,
            height: 0
        };
        if (this.eventTarget) {
            if (this.options.relative == false) {
                targetCoords = this.eventTarget.getCoordinates();
            } else {
                var relObj = (this.options.relativeParentElement != false ? (typeOf(this.options.relativeParentElement) == 'element' ? this.options.relativeParentElement : this.eventTarget.getParent(this.options.relativeParentElement)) : this.eventTarget.getOffsetParent());
                targetCoords = this.eventTarget.getRelativeCoordinates(relObj);
            }
        }
        if (this.eventTarget != this.target && this.options.triggerHook) {
            var eventTargetCoords = null;
            if (this.options.relative == false) {
                eventTargetCoords = this.target.getCoordinates();
            } else {
                var relObj = (this.options.relativeParentElement != false ? (typeOf(this.options.relativeParentElement) == 'element' ? this.options.relativeParentElement : this.target.getParent(this.options.relativeParentElement)) : this.target.getOffsetParent());
                eventTargetCoords = this.target.getRelativeCoordinates(relObj);
            }
            if (this.options.triggerHook == 'left') {
                targetCoords.left = eventTargetCoords.left;
                targetCoords.width = eventTargetCoords.width;
            } else if (this.options.triggerHook == 'top') {
                targetCoords.top = eventTargetCoords.top;
                targetCoords.height = eventTargetCoords.height;
            } else if (this.options.triggerHook == 'bottom') {
                targetCoords.top = eventTargetCoords.bottom;
                targetCoords.height = eventTargetCoords.height;
            }
        }
        this.positionModify(targetCoords, this.options.hook.target, 1);
        this.positionModify(targetCoords, this.options.hook.tip, -1);
        targetCoords.left += this.options.offset.x;
        targetCoords.top += this.options.offset.y;
        this.tooltip.setStyles({
            top: targetCoords.top,
            left: targetCoords.left
        });
        return true;
    },
    positionModify: function(targetCoords, corner, neg) {
        var tipCoords = this.tooltip.getDimensions();
        if (corner == 'topRight') {
            targetCoords.left += (neg > 0 ? targetCoords.width : tipCoords.width) * neg;
        } else if (corner == 'bottomLeft') {
            targetCoords.top += (neg > 0 ? targetCoords.height : tipCoords.height) * neg;
        } else if (corner == 'bottomRight') {
            targetCoords.top += (neg > 0 ? targetCoords.height : tipCoords.height) * neg;
            targetCoords.left += (neg > 0 ? targetCoords.width : tipCoords.width) * neg;
        } else if (corner == 'topMid') {
            targetCoords.left += ((neg > 0 ? targetCoords.width : tipCoords.width) / 2) * neg;
        } else if (corner == 'leftMid') {
            targetCoords.top += ((neg > 0 ? targetCoords.height : tipCoords.height) / 2) * neg;
        } else if (corner == 'bottomMid') {
            targetCoords.top += (neg > 0 ? targetCoords.height : tipCoords.height) * neg;
            targetCoords.left += ((neg > 0 ? targetCoords.width : tipCoords.width) / 2) * neg;
        } else if (corner == 'rightMid') {
            targetCoords.top += ((neg > 0 ? targetCoords.height : tipCoords.height) / 2) * neg;
            targetCoords.left += (neg > 0 ? targetCoords.width : tipCoords.width) * neg;
        }
    },
    show: function() {
        this.fireEvent('show', [this.tooltip]);
    },
    hide: function() {
        this.fireEvent('hide', [this.tooltip]);
    },
    close: function() {
        this.fireEvent('close', [this.tooltip]);
    },
    enable: function() {
        if (this.eventTarget) {
            if (this.options.displayMode == 1) {
                this.eventTarget.addEvent('mouseenter', this.bound.targetEnter);
                this.eventTarget.addEvent('mouseleave', this.bound.targetLeave);
                this.tooltip.addEvent('mouseenter', this.bound.tipEnter);
                this.tooltip.addEvent('mouseleave', this.bound.tipLeave);
            }
            if (this.options.displayMode == 2) {
                this.eventTarget.addEvent('focus', this.bound.targetFocus);
                this.eventTarget.addEvent('blur', this.bound.targetBlur);
            }
            window.addEvent('resize', this.bound.windowResize);
        }
        this.disabled = false;
    },
    disable: function() {
        clearTimeout(this.timer);
        this.tooltip.hide();
        if (this.eventTarget) {
            if (this.options.displayMode == 1) {
                this.eventTarget.removeEvent('mouseenter', this.bound.targetEnter);
                this.eventTarget.removeEvent('mouseleave', this.bound.targetLeave);
                this.tooltip.removeEvent('mouseenter', this.bound.tipEnter);
                this.tooltip.removeEvent('mouseleave', this.bound.tipLeave);
            }
            if (this.options.displayMode == 2) {
                this.eventTarget.removeEvent('focus', this.bound.targetFocus);
                this.eventTarget.removeEvent('blur', this.bound.targetBlur);
            }
            window.removeEvent('resize', this.bound.windowResize);
        }
        this.disabled = true;
    },
    destroy: function() {
        this.detach();
        if (this.tooltip) {
            this.tooltip.destroy();
        }
    }
});
var FadingTooltip = new Class({
    Extends: Tooltip,
    options: {
        fxDuration: 500,
        onShow: function(tooltip) {
            if (!(Browser.ie && Math.round(Browser.version) < 9)) {
                var bShow = this.position();
                if (bShow == true) {
                    if (this.tooltip.getStyle('display') == 'none') {
                        this.tooltip.show();
                    }
                    this.fx.start({
                        opacity: 1
                    });
                    this.display = true;
                }
            } else {
                var bShow = this.position();
                if (bShow == true) {
                    this.tooltip.setStyle('display', 'block');
                    this.display = true;
                }
            }
        },
        onHide: function(tooltip) {
            if (!(Browser.ie && Math.round(Browser.version) < 9)) {
                this.fx.start({
                    opacity: 0
                });
            } else {
                this.tooltip.setStyle('display', 'none');
                this.display = false;
            }
        },
        onClose: function(tooltip) {
            if (!(Browser.ie && Math.round(Browser.version) < 9)) {
                this.fx.start({
                    opacity: 0
                });
            } else {
                this.tooltip.setStyle('display', 'none');
                this.display = false;
            }
        }
    },
    initialize: function(eventTarget, options) {
        this.parent(eventTarget, options);
        if (!(Browser.ie && Math.round(Browser.version) < 9)) {
            this.tooltip.setStyles({
                opacity: 0
            });
            this.fx = new Fx.Morph(this.tooltip, {
                link: 'cancel',
                duration: this.options.fxDuration,
                onStart: Chain.prototype.clearChain,
                onComplete: function() {
                    this.display = (this.fx.to.opacity[0].value == 1 ? true : false);
                    if (this.display == false) {
                        this.tooltip.hide();
                    }
                }.bind(this)
            });
        }
    },
    detach: function() {
        this.parent();
        if (!(Browser.ie && Math.round(Browser.version) < 9) && this.fx) {
            this.fx.cancel();
        }
    }
});
var WGT_COL_1 = 1;
var WGT_COL_2 = 2;
var WGT_COL_3 = 3;
var WGT_COL_1_2 = 4;
var WGT_COL_1_3 = 5;
var WGT_COL_2_3 = 6;
var WGT_COL_ANY = 7;
var Widget = new Class({
    Implements: [Options, Events],
    options: {
        id: null,
        admin: false,
        preview: false,
        editable: false,
        deletable: false,
        dropdown: false,
        box_class: '',
        name: '',
        short_name: ''
    },
    id: null,
    initialize: function(wId, options) {
        this.setOptions(options);
        this.element = $(wId);
        this.id = this.options.id || parseInt(wId.split('_')[1]);
        this.website = null;
        this.page = null;
        this.admin = this.options.admin;
        this.preview = this.options.preview;
        this.element.widget = this;
        this.editBox = null;
        this.editBoxFrozen = false;
        this.bInsideBox = false;
        this.scrollableElement = (this.admin || this.preview ? $('PageWrapper') : window);
        this.viewportElement = (this.admin || this.preview ? $('PageWrapper') : $(document.body));
        this.scrollFx = new Fx.Scroll(this.scrollableElement, {
            link: 'cancel',
            wheelStops: false,
            duration: 300
        });
        this.bound = {
            elementMouseEnter: this.elementMouseEnter.bind(this),
            elementMouseLeave: this.elementMouseLeave.bind(this),
            elementDoubleClick: this.elementDoubleClick.bind(this),
            windowResize: this.positionEditBox.bind(this),
            wrapperScroll: this.positionEditBox.bind(this)
        };
        this.initVariables();
    },
    initVariables: function() {},
    attach: function() {
        if (this.admin == true) {
            this.attachAdminUI();
        }
    },
    detach: function() {
        if (this.admin == true) {
            this.detachAdminUI();
        }
    },
    attachAdminUI: function() {
        if (this.options.editable == true || this.options.deletable == true) {
            this.attachHover();
        }
        if (this.options.editable == true) {
            this.attachDoubleClick();
        }
        this.element.getElements('.tpl-empty-content-action').each(function(emptyContentLink) {
            var event = this.emptyContentLinkClick.bind(this, emptyContentLink);
            emptyContentLink.store('event:emptyContentLinkClick', event).addEvent('click', event);
        }, this);
    },
    detachAdminUI: function() {
        if (this.options.editable == true || this.options.deletable == true) {
            this.detachHover();
        }
        if (this.options.editable == true) {
            this.detachDoubleClick();
        }
        this.element.getElements('.tpl-empty-content-action').each(function(emptyContentLink) {
            emptyContentLink.removeEvent('click', emptyContentLink.retrieve('event:emptyContentLinkClick')).eliminate('event:emptyContentLinkClick');
        });
    },
    attachHover: function() {
        this.element.addEvents({
            mouseenter: this.bound.elementMouseEnter,
            mouseleave: this.bound.elementMouseLeave
        });
    },
    attachDoubleClick: function() {
        this.element.addEvent('dblclick', this.bound.elementDoubleClick);
    },
    detachHover: function() {
        this.element.removeEvents({
            mouseenter: this.bound.elementMouseEnter,
            mouseleave: this.bound.elementMouseLeave
        });
    },
    detachDoubleClick: function() {
        this.element.removeEvent('dblclick', this.bound.elementDoubleClick);
    },
    elementMouseEnter: function(ev) {
        if (this.editBoxTimer) {
            clearTimeout(this.editBoxTimer);
            this.editBoxTimer = null;
        }
        this.bInsideBox = true;
        this.showEditBox();
    },
    elementMouseLeave: function(ev) {
        this.bInsideBox = false;
        this.editBoxTimer = this.hideEditBox.delay(50, this);
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetContent();
    },
    editableElementMouseEnter: function(el, ev) {
        if (this.editBoxTimer) {
            clearTimeout(this.editBoxTimer);
            this.editBoxTimer = null;
        }
        this.bInsideBox = true;
    },
    editableElementMouseLeave: function(el, ev) {
        this.bInsideBox = false;
        this.editBoxTimer = this.hideEditBox.delay(50, this);
    },
    editableButtonClick: function(ev) {
        ev.preventDefault();
        if (this.options.dropdown == false) {
            this.hideEditBox();
            this.editWidgetContent();
        }
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetContent();
    },
    editableDropdownItemClick: function(item) {
        var action = item.getElement('span').get('class');
        this.hideEditBox();
        switch (action) {
            case 'ui-edit':
                {
                    this.editWidgetContent();
                    break;
                }
            case 'ui-settings':
                {
                    this.editWidgetSettings();
                    break;
                }
            case 'ui-delete':
                {
                    this.deleteWidget();
                    break;
                }
        }
    },
    documentResized: function() {},
    elementResized: function() {
        if (this.admin == true && this.editBox) {
            this.positionEditBox();
        }
    },
    setBusy: function(bBusy) {
        if (bBusy) {
            this.element.getElements('input[type=submit],input[type=button],input[type=reset],button[type=submit],button[type=button],button[type=reset]').set('disabled', true);
        } else {
            this.element.getElements('input[type=submit],input[type=button],input[type=reset],button[type=submit],button[type=button],button[type=reset]').set('disabled', false);
        }
        this.bIsBusy = bBusy;
    },
    isBusy: function() {
        return (typeof(this.bIsBusy) != 'udnefined' && this.bIsBusy == true ? true : false);
    },
    setBusyForm: function(form, bBusy) {
        if (bBusy) {
            form.getElements('input[type=submit],input[type=button],input[type=reset],button[type=submit],button[type=button],button[type=reset]').set('disabled', true);
        } else {
            form.getElements('input[type=submit],input[type=button],input[type=reset],button[type=submit],button[type=button],button[type=reset]').set('disabled', false);
        }
        form.busy = bBusy;
    },
    isBusyForm: function(form) {
        return (typeof(form.busy) != 'udnefined' && form.busy == true ? true : false);
    },
    showWeirdElements: function() {},
    hideWeirdElements: function() {},
    GETRequest: function(data, options) {
        var elementId = (this.element ? this.element.get('id') : null);
        var data = Object.merge({
            'data[Request][widget_id]': this.id,
            'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
            'data[Request][render]': 1,
            'data[Request][process]': 0,
            'data[Widget][id]': this.id
        }, data);
        var options = Object.merge({
            onInit: function(widget) {
                var scrollY = widget.scrollableElement.getScroll().y;
                var viewportSize = widget.viewportElement.getSize();
                var coords = null;
                if (widget.admin || widget.preview) {
                    coords = widget.element.getRelativeCoordinates($('PageWrapper'));
                } else {
                    coords = widget.element.getCoordinates();
                }
                if (scrollY > coords.top) {
                    widget.scrollFx.start(0, coords.top - 10);
                }
            }
        }, options);
        this.website.request({
            url: '/ajax_core_widgets_ui/request/',
            data: data,
            onRequest: function() {
                this.setBusy(true);
                this.website.websiteRequest();
            }.bind(this),
            onFailure: function() {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onError: function(text, error) {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onSuccess: function(response, opts) {
                this.setBusy(false);
                if (this.website.websiteRequestSuccess(response, opts) == false) {
                    return;
                }
                if (Object.getFromPath(response, 'widget_content') && Object.getFromPath(response, 'widget_content').length > 0 && Object.getFromPath(response, 'css_assets') && Object.getFromPath(response, 'js_assets')) {
                    this.page.queueWidgetInsert(elementId, response, true, false, {
                        onInit: options.onInit
                    });
                    if (Object.getFromPath(response, 'notifications') && response.notifications.length > 0) {
                        this.website.notifier.empty();
                        var duration = 5000;
                        response.notifications.each(function(notification) {
                            if (Object.getFromPath(notification, 'type') && Object.getFromPath(notification, 'title') && Object.getFromPath(notification, 'msg')) {
                                var options = Object.merge(Object.clone(this.website.options.notifierOptions), {
                                    duration: duration,
                                    hideOnClick: false,
                                    classes: {
                                        item: 'tpl-roar tpl-roar-' + notification.type
                                    }
                                });
                                this.website.notify(notification.title, notification.msg, options);
                            }
                        }, this);
                    }
                    if (Object.getFromPath(response, 'app_error') && Object.getFromPath(response, 'app_error') == true) {
                        var title = __('core', 'Error');
                        var msg = __('core', 'An error has occurred while communicating with the server. Please try again.');
                        if (Object.getFromPath(response, 'app_title') && Object.getFromPath(response, 'app_title').length > 0) {
                            title = Object.getFromPath(response, 'app_title');
                        }
                        if (Object.getFromPath(response, 'app_msg') && Object.getFromPath(response, 'app_msg').length > 0) {
                            msg = Object.getFromPath(response, 'app_msg');
                        }
                        new IWindow.Error(title, msg, {
                            pin: true,
                            onShow: function() {
                                this.element.getElement('input[type=button]').focus();
                            }
                        });
                    }
                    return;
                }
                new IWindow.Error(__('core', 'Error'), __('core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later."), {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    }
                });
            }.bind(this)
        });
    },
    showEditBox: function() {
        if (this.editBox) {
            return;
        }
        var c = $('PageContent');
        var col = this.element.getParent('.tpl-layout-col');
        var boxClass = 'tpl-editable-' + this.options.short_name.replace(/_/gi, '-');
        if (col) {
            boxClass += ' tpl-editable-column-' + col.get('id').replace(/^Col_/i, '');
        }
        if (this.options.box_class.length > 0) {
            boxClass += ' ' + this.options.box_class;
        }
        this.editBox = {
            tb: new Element('div', {
                'class': 'tpl-editable-indicator-top ' + boxClass
            }).inject(c),
            lb: new Element('div', {
                'class': 'tpl-editable-indicator-left ' + boxClass
            }).inject(c),
            rb: new Element('div', {
                'class': 'tpl-editable-indicator-right ' + boxClass
            }).inject(c),
            bb: new Element('div', {
                'class': 'tpl-editable-indicator-bottom ' + boxClass
            }).inject(c),
            bt: new Element('a', {
                'class': 'tpl-editable-indicator-button ' + boxClass,
                'href': '#',
                'title': __('admin_widget', 'Edit', true)
            }).adopt(new Element('span', {
                'class': 'tpl-editable-indicator-button-icon'
            })).inject(c),
            dd: null
        };
        var zIndex = this.element.getStyle('z-index');
        if (parseInt(zIndex) > 0) {
            [this.editBox.tb, this.editBox.lb, this.editBox.rb, this.editBox.bb, this.editBox.bt].each(function(el) {
                el.setStyle('z-index', parseInt(zIndex) + 1);
            });
        }
        this.positionEditBox();
        if (this.options.dropdown == true && (this.options.editable == true || this.options.deletable == true)) {
            this.editBox.dd = new OptionsDropdownUI(this.editBox.bt, this.getEditableDropdownOptions());
            this.addEditableDropdownItems();
        }
        [this.editBox.tb, this.editBox.lb, this.editBox.rb, this.editBox.bb, this.editBox.bt].each(function(el) {
            var event = this.editableElementMouseEnter.bind(this, el);
            el.store('event:editableElementMouseEnter', event).addEvent('mouseenter', event);
            var event = this.editableElementMouseLeave.bind(this, el);
            el.store('event:editableElementMouseLeave', event).addEvent('mouseleave', event);
        }, this);
        var event = this.editableButtonClick.bind(this);
        this.editBox.bt.store('event:editableButtonClick', event).addEvent('click', event);
        window.addEvent('resize', this.bound.windowResize);
        $('PageWrapper').addEvent('scroll', this.bound.wrapperScroll);
    },
    hideEditBox: function() {
        if (this.editBoxTimer) {
            clearTimeout(this.editBoxTimer);
            this.editBoxTimer = null;
        }
        if (this.editBox && this.editBoxFrozen == false) {
            this.editBox.bt.removeEvent('click', this.editBox.bt.retrieve('event:editableButtonClick')).eliminate('event:editableButtonClick');
            if (this.editBox.dd) {
                this.editBox.dd.destroy();
            }
            [this.editBox.tb, this.editBox.lb, this.editBox.rb, this.editBox.bb, this.editBox.bt].each(function(el) {
                el.removeEvent('mouseenter', el.retrieve('event:editableElementMouseEnter')).eliminate('event:editableElementMouseEnter');
                el.removeEvent('mouseleave', el.retrieve('event:editableElementMouseLeave')).eliminate('event:editableElementMouseLeave');
                el.destroy();
            }, this);
            this.editBox = null;
            window.removeEvent('resize', this.bound.windowResize);
            $('PageWrapper').removeEvent('scroll', this.bound.wrapperScroll);
        }
    },
    getEditableDropdownOptions: function() {
        var self = this;
        return {
            container: $('PageContent'),
            alignment: 'right',
            positionRelativeTarget: $('PageWrapper'),
            selectable: false,
            listOffset: {
                x: -4,
                y: -4
            },
            onListMouseEnter: function() {
                self.bInsideBox = true;
            },
            onListMouseLeave: function() {
                self.bInsideBox = false;
            },
            onShow: function(button, list) {
                var focused = $(document.body).getElement('*:focus');
                if (focused != button) {
                    if (focused) {
                        focused.blur();
                    }
                    if (button.tagName.toLowerCase() == 'a') {
                        button.focus();
                    }
                }
                button.addClass('tpl-expanded');
                self.editBoxFrozen = true;
            },
            onHide: function(button, list) {
                button.removeClass('tpl-expanded');
                self.editBoxFrozen = false;
                if (self.bInsideBox == false) {
                    self.hideEditBox();
                }
            },
            onItemClick: this.editableDropdownItemClick.bind(this),
            classes: {
                dropdown: 'ui-dropdown-box ui-object-actions clearfix'
            }
        };
    },
    positionEditBox: function() {
        if (this.editBox) {
            var c = $('PageContent');
            var s = (this instanceof LayoutWidget ? this.element.getElement('.tpl-widget-separator') : null);
            var pos = this.element.getCoordinates(c);
            if (s) {
                var ss = s.getComputedSize({
                    mode: 'vertical',
                    styles: ['border', 'padding', 'margin']
                });
                pos.height -= ss.totalHeight;
                pos.bottom -= ss.totalHeight;
            }
            this.editBox.tb.setStyles({
                top: pos.top,
                left: pos.left,
                width: pos.width
            });
            this.editBox.lb.setStyles({
                top: pos.top,
                left: pos.left,
                height: pos.height
            });
            this.editBox.rb.setStyles({
                top: pos.top,
                left: pos.right,
                height: pos.height
            });
            this.editBox.bb.setStyles({
                top: pos.bottom,
                left: pos.left,
                width: pos.width
            });
            this.editBox.bt.setStyles({
                top: pos.top,
                left: pos.right
            });
        }
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetContent: function() {
        if (this.options.editable == false) {
            return;
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
    },
    deleteWidget: function() {
        if (this.options.deletable == false) {
            return;
        }
        var opts = {
            url: '/admin_core_widgets_ui/delete_widget/',
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this),
            onRequest: function() {
                opts.onAjaxRequest.apply();
                opts.onDetachParent.apply();
            },
            onFailure: function() {
                opts.onAjaxComplete.apply();
                new IWindowUI.Error(__('admin_core', 'Error communicating with the server', true), __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true), {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        opts.onAttachParent.apply();
                    }
                });
            },
            onError: function(text, error) {
                opts.onAjaxComplete.apply();
                new IWindowUI.Error(__('admin_core', 'Error communicating with the server', true), __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true), {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        opts.onAttachParent.apply();
                    }
                });
            }.bind(this),
            onSuccess: function(response) {
                opts.onAjaxComplete.apply();
                if (this.website.hasAccess(response, {
                        frontendRequest: false,
                        showLoginWindow: true,
                        showWarningWindow: true,
                        onLoginSuccess: function() {
                            opts.onAttachParent.apply();
                            fn.apply();
                        },
                        onLoginFailure: function() {
                            opts.onAttachParent.apply();
                        },
                        onWarningWindowHide: function() {
                            opts.onAttachParent.apply();
                        }
                    }) == false) {
                    return;
                }
                if (this.website.isError(response, {
                        frontendRequest: false,
                        showWarningWindow: true,
                        onWarningWindowHide: function() {
                            opts.onAttachParent.apply();
                        }
                    }) == true) {
                    return;
                }
                if (Object.getFromPath(response, 'deleted') && response.deleted == true) {
                    var elId = this.element.get('id');
                    this.destroy();
                    if (this.page.widgets[elId]) {
                        Object.erase(this.page.widgets, elId);
                    }
                    opts.onAttachParent.apply();
                    this.website.toolbar.clearPagesList();
                    if (this.website.options.auto_publishing == false && this.website.statusBar && typeof(response.status_bar_unpublished_count) != 'undefined' && typeof(response.status_bar_publish_type) != 'undefined' && typeof(response.status_bar_text) != 'undefined' && typeof(response.status_bar_button_text) != 'undefined' && typeof(response.status_bar_radio_current_text) != 'undefined' && typeof(response.status_bar_radio_all_text) != 'undefined') {
                        if (response.status_bar_unpublished_count > 0) {
                            this.website.statusBar.show({
                                unpublished: response.status_bar_unpublished_count,
                                publish_type: response.status_bar_publish_type,
                                text: response.status_bar_text,
                                button_text: response.status_bar_button_text,
                                radio_current_text: response.status_bar_radio_current_text,
                                radio_all_text: response.status_bar_radio_all_text
                            });
                        } else {
                            this.website.statusBar.hide();
                        }
                    }
                } else {
                    new IWindowUI.Error(__('admin_core', 'Error', true), __('admin_core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later.", true), {
                        onShow: function() {
                            this.element.getElement('input[type=button]').focus();
                        },
                        onHide: function() {
                            opts.onAttachParent.apply();
                        }
                    });
                }
            }.bind(this)
        };
        var data = {
            data: {
                Request: {
                    page_id: Object.getFromPath(this.page, 'id'),
                    current_page_id: Object.getFromPath(this.page, 'id'),
                    url: Object.getFromPath(this.page, 'options.page.here_url'),
                    widget_id: this.id,
                    common: 0
                }
            }
        };
        var fn = (function() {
            opts = Object.merge(opts, {
                data: Object.toQueryString(data)
            });
            new Request.JSON(opts).send();
        }).bind(this);
        var self = this;
        var windowTitle = __('admin_widget', 'Delete widget?', true);
        var windowMsg = __('admin_widget', 'Are you sure you want to delete this widget?', true);
        var windowOptions = {
            buttons: [{
                text: __('admin_core', 'Yes', true),
                properties: {
                    'class': 'ui-window-button-small ui-ok-button'
                }
            }, {
                text: __('admin_core', 'No', true),
                properties: {
                    'class': 'ui-window-button-small ui-cancel-button'
                }
            }],
            classes: {
                icon: 'ui-delete'
            },
            pin: true,
            positionOnResize: true,
            modal: true,
            draggable: true,
            destroyOnClose: true,
            closeOnEsc: true,
            onShow: function() {
                self.website.detach();
                this.element.getElement('input.ui-cancel-button').focus();
            },
            onConfirm: function() {
                this.runOnHide = true;
                this.hide(true);
            },
            onCancel: function() {
                this.hide(true);
            },
            onHide: function() {
                self.website.attach();
                if (this.runOnHide) {
                    fn.apply();
                }
            }
        };
        if (this.options.common == true) {
            windowTitle = __('admin_widget', 'Delete from all pages?', true);
            windowMsg = __('admin_widget', 'Do you want to delete this widget from all pages or only from the current one?', true);
            windowOptions = Object.merge(windowOptions, {
                width: 480,
                buttons: [{
                    text: __('admin_widget', 'Yes, from all pages', true),
                    properties: {
                        'class': 'ui-window-button-wide ui-ok-button'
                    }
                }, {
                    text: __('admin_widget', 'No, only from this page', true),
                    properties: {
                        'class': 'ui-window-button-wide ui-cancel-button'
                    }
                }, {
                    text: __('admin_core', 'Cancel', true),
                    properties: {
                        'class': 'ui-window-button-simple ui-window-closable'
                    }
                }],
                onInitialize: function() {
                    var cancel = this.content.getElement('.ui-window-close-buttons .ui-window-button-simple');
                    if (cancel) {
                        new Element('span', {
                            'class': 'ui-window-button-prefix',
                            'html': __('admin_core', 'or', true)
                        }).inject(cancel, 'before');
                    }
                },
                onShow: function() {
                    self.website.detach();
                    this.element.getElement('input.ui-window-button-simple').focus();
                },
                onConfirm: function() {
                    this.runOnHide = true;
                    data.data.Request.common = 1;
                    this.hide(true);
                },
                onCancel: function() {
                    this.runOnHide = true;
                    this.hide(true);
                }
            });
        }
        var win = new IWindowUI.Confirm(windowTitle, windowMsg, windowOptions);
    },
    getValidatorOptions: function(options) {
        var options = Object.merge({
            onRequestComplete: false,
            onWidgetInit: false
        }, options);
        var elementId = (this.element ? this.element.get('id') : null);
        var self = this;
        return {
            classes: {
                errorsListContent: 'tpl-message-text',
                errorsListMultilineContent: 'tpl-multiline',
                errorsListItem: 'tpl-message-item'
            },
            display: {
                listErrorsAtTop: true,
                errorsLocation: 0,
                indicateErrors: 2,
                scrollableElement: (self.admin || self.preview ? $('PageWrapper') : window)
            },
            getScrollPosition: function(obj) {
                var top = -1;
                var bottom = -1;
                if (obj.tagName.toLowerCase() == 'input' && obj.get('type') == 'hidden') {
                    obj = obj.getParent();
                }
                if (self.admin || self.preview) {
                    var coords = obj.getRelativeCoordinates($('PageWrapper'));
                    top = coords.top - 10;
                    bottom = coords.bottom + 10;
                } else {
                    var coords = obj.measure(function() {
                        return this.getCoordinates()
                    });
                    top = coords.top - 10;
                    bottom = coords.bottom + 10;
                }
                if (this.options.display.listErrorsAtTop == false && this.options.display.errorsLocation == 1 && obj.element) {
                    var objTop = obj.measure(function() {
                        return this.getCoordinates().top
                    });
                    var elTop = obj.element.measure(function() {
                        return this.getCoordinates().top
                    });
                    if (elTop < objTop) {
                        if (self.admin || self.preview) {
                            var coords = obj.element.getRelativeCoordinates($('PageWrapper'));
                            top = coords.top - 10;
                        } else {
                            var coords = obj.element.measure(function() {
                                return this.getCoordinates()
                            });
                            top = coords.top - 10;
                        }
                    }
                }
                return {
                    top: top,
                    bottom: bottom
                };
            },
            onFormValid: function() {
                if ((self.admin || self.preview) && Browser.ie && Math.round(Browser.version) < 8) {
                    Browser.redraw();
                }
                this.form.getElements('.tpl-form-row.tpl-invalid').removeClass('tpl-invalid');
                self.elementResized();
            },
            onFormInvalid: function() {
                if ((self.admin || self.preview) && Browser.ie && Math.round(Browser.version) < 8) {
                    Browser.redraw();
                }
                self.elementResized();
            },
            onInputValid: function(input) {
                var row = input.getParent('.tpl-form-row');
                if (row && row.hasClass('tpl-invalid')) {
                    var inputs = row.getElements('input,select').erase(input);
                    var bRemove = true;
                    inputs.each(function(i) {
                        if (this.validations.contains(i) && i.isOk == false) {
                            bRemove = false;
                        }
                    }, this);
                    if (bRemove) {
                        row.removeClass('tpl-invalid');
                    }
                }
            },
            onInputInvalid: function(input) {
                if (this.options.display.errorsListContainer && this.options.display.errorsListContainer.hasClass('tpl-success')) {
                    this.options.display.errorsListContainer.removeClass('tpl-success');
                    this.options.display.errorsListContainer.addClass('tpl-error');
                }
                var row = input.getParent('.tpl-form-row');
                if (row && !row.hasClass('tpl-invalid')) {
                    row.addClass('tpl-invalid');
                }
                var focused = $(document.body).getElement('*:focus');
                if (focused && focused != input) {
                    focused.blur();
                }
            },
            onAjaxRequest: function() {
                self.setBusy(true);
                self.website.loadingBox(true);
            },
            onAjaxFailure: function() {
                new IWindow.Error(__('core', 'Error'), __('core', 'An error has occurred while communicating with the server. Please try again.'), {
                    pin: true,
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    }
                });
                self.setBusy(false);
                self.website.loadingBox(false);
            },
            onAjaxError: function() {
                new IWindow.Error(__('core', 'Error'), __('core', 'An error has occurred while communicating with the server. Please try again.'), {
                    pin: true,
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    }
                });
                self.setBusy(false);
                self.website.loadingBox(false);
            },
            onAjaxSuccess: function(response) {
                self.setBusy(false);
                if (self.website.websiteRequestSuccess(response) == false) {
                    return;
                }
                if (Object.getFromPath(response, 'widget_content') && Object.getFromPath(response, 'widget_content').length > 0 && Object.getFromPath(response, 'css_assets') && Object.getFromPath(response, 'js_assets')) {
                    self.page.queueWidgetInsert(elementId, response, true, false, {
                        onInit: options.onWidgetInit
                    });
                    if (Object.getFromPath(response, 'notifications') && response.notifications.length > 0) {
                        self.website.notifier.empty();
                        response.notifications.each(function(notification) {
                            if (Object.getFromPath(notification, 'type') && Object.getFromPath(notification, 'title') && Object.getFromPath(notification, 'msg')) {
                                var options = Object.merge(Object.clone(self.website.options.notifierOptions), {
                                    duration: 10000,
                                    hideOnClick: false,
                                    classes: {
                                        item: 'tpl-roar tpl-roar-' + notification.type
                                    }
                                });
                                self.website.notify(notification.title, notification.msg, options);
                            }
                        });
                    }
                    if (Object.getFromPath(response, 'app_error') && Object.getFromPath(response, 'app_error') == true) {
                        var title = __('core', 'Error');
                        var msg = __('core', 'An error has occurred while communicating with the server. Please try again.');
                        if (Object.getFromPath(response, 'app_title') && Object.getFromPath(response, 'app_title').length > 0) {
                            title = Object.getFromPath(response, 'app_title');
                        }
                        if (Object.getFromPath(response, 'app_msg') && Object.getFromPath(response, 'app_msg').length > 0) {
                            msg = Object.getFromPath(response, 'app_msg');
                        }
                        new IWindow.Error(title, msg, {
                            pin: true,
                            onShow: function() {
                                this.element.getElement('input[type=button]').focus();
                            }
                        });
                    }
                    if (options.onRequestComplete) {
                        options.onRequestComplete.apply(null, [response, self]);
                    }
                } else {
                    new IWindow.Error(__('core', 'Error'), __('core', 'An error has occurred while communicating with the server. Please try again.'), {
                        pin: true,
                        onShow: function() {
                            this.element.getElement('input[type=button]').focus();
                        }
                    });
                }
            }
        };
    },
    destroy: function() {
        this.detach();
        if (this.admin == true && this.editBox) {
            this.editBoxFrozen = false;
            this.hideEditBox();
        }
        if (Object.getFromPath(this.page.options.page_widgets, this.element.get('id'))) {
            Object.erase(this.page.options.page_widgets, this.element.get('id'));
        }
        if (this.element) {
            this.element.destroy();
        }
    },
    set: function(name, value) {
        this[name] = value;
        return this;
    }
});
var LayoutWidget = new Class({
    Extends: Widget,
    options: {
        widget_placement: null,
        sortable: false,
        common: false,
        widget_data: {}
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.addEvent('createComplete', this.createComplete.bind(this));
    },
    attachAdminUI: function() {
        this.parent();
        if (this.options.sortable == true && this.element.getElement('.tpl-widget-drag-handle')) {
            this.attachSortable();
        }
    },
    attachSortable: function() {
        if (this.sortable) {
            this.sortable.attach();
        } else if (this.options.widget_placement) {
            var allowed = [];
            switch (this.options.widget_placement) {
                case WGT_COL_1:
                    {
                        if ($('Col_1')) {
                            allowed.push($('Col_1'));
                        }
                        break;
                    }
                case WGT_COL_2:
                    {
                        if ($('Col_2')) {
                            allowed.push($('Col_2'));
                        }
                        break;
                    }
                case WGT_COL_3:
                    {
                        if ($('Col_3')) {
                            allowed.push($('Col_3'));
                        }
                        break;
                    }
                case WGT_COL_1_2:
                    {
                        if ($('Col_1')) {
                            allowed.push($('Col_1'));
                        }
                        if ($('Col_2')) {
                            allowed.push($('Col_2'));
                        }
                        break;
                    }
                case WGT_COL_1_3:
                    {
                        if ($('Col_1')) {
                            allowed.push($('Col_1'));
                        }
                        if ($('Col_3')) {
                            allowed.push($('Col_3'));
                        }
                        break;
                    }
                case WGT_COL_2_3:
                    {
                        if ($('Col_2')) {
                            allowed.push($('Col_2'));
                        }
                        if ($('Col_3')) {
                            allowed.push($('Col_3'));
                        }
                        break;
                    }
                case WGT_COL_ANY:
                    {
                        if ($('Col_1')) {
                            allowed.push($('Col_1'));
                        }
                        if ($('Col_2')) {
                            allowed.push($('Col_2'));
                        }
                        if ($('Col_3')) {
                            allowed.push($('Col_3'));
                        }
                        break;
                    }
            }
            this.sortable = new SortableWidgetUI(this.element, {
                caption: (Object.getFromPath(this.options, 'widget_data.title') ? Object.getFromPath(this.options, 'widget_data.title') : (Object.getFromPath(this.options, 'name') ? __('admin_widget', Object.getFromPath(this.options, 'name'), true) : __('admin_widget', 'Widget', true))),
                container: $('AdminWrapper'),
                droppableIndicatorContainer: $('PageContent'),
                body: $('PageWrapper'),
                allowedContainers: allowed,
                onStart: this.startDrag.bind(this),
                onComplete: this.sortComplete.bind(this)
            });
        }
    },
    detachAdminUI: function() {
        this.parent();
        if (this.options.sortable == true) {
            this.detachSortable();
        }
    },
    detachSortable: function() {
        if (this.sortable) {
            this.sortable.detach();
        }
    },
    createComplete: function() {},
    elementMoved: function(prevCol, newCol) {},
    startDrag: function(el, ev) {
        this.website.hideTips();
        var self = this;
        Object.each(this.page.widgets, function(w) {
            if (w == self) {
                self.hideEditBox();
            }
            if (w.options.editable == true || w.options.deletable == true) {
                w.detachHover();
            }
        });
        if (this.website.options.layout_designing_tips == true && !this.sortable.tip) {
            this.website.notifyAdmin(__('admin_core', 'How to move a widget to a different location?', true), __('admin_core', 'Drag the selected widget into one of the columns with a dashed borders and drop it at the desired location in the column. The current drop position is indicated by a by a horizontal bar.', true), {
                width: 450,
                duration: 0,
                hideOnClick: false,
                closeButton: true,
                classes: {
                    title: '',
                    icon: 'ui-tip'
                },
                onHide: function(item, length) {
                    if (this.website.tips.contains(item)) {
                        this.website.tips.erase(item);
                    }
                    this.sortable.tip = null;
                }.bind(this),
                onClose: this.website.confirmHiddingTips.bind(this.website)
            });
            this.sortable.tip = this.website.adminNotifier.items.getLast();
            this.website.tips.push(this.sortable.tip);
        }
    },
    sortComplete: function(bMoved, sorted, prevCol, newCol) {
        Object.each(this.page.widgets, function(w) {
            if (w.options.editable == true || w.options.deletable == true) {
                w.attachHover();
            }
        });
        if (bMoved == true && sorted) {
            if (prevCol != newCol) {
                this.elementMoved(prevCol, newCol);
            }
            var sortedData = {};
            sorted.each(function(col) {
                var colNbr = false;
                var colId = col.droppable.get('id');
                if (colId && colId.indexOf('_') > -1) {
                    colNbr = parseInt(colId.split('_')[1]);
                }
                if (colNbr) {
                    sortedData[colNbr] = [];
                    col.elements.each(function(el, idx) {
                        var wgtId = (el.get('id') && el.get('id').indexOf('_') > -1 ? parseInt(el.get('id').split('_')[1]) : false);
                        if (wgtId) {
                            sortedData[colNbr].push(wgtId);
                        }
                    });
                }
            });
            this.updateWidgetsOrder(sortedData, prevCol, newCol);
        }
    },
    updateWidgetsOrder: function(sorted, prevCol, newCol) {
        this.page.updateWidgetsOrder({
            refresh: false,
            widget: this,
            sorted: sorted
        });
    }
});
var SearchWidget = new Class({
    updateSearchText: function(text) {
        if (this.searchInput) {
            this.searchInput.set('value', text);
        }
    }
});
var SlideshowCommonWidget = new Class({
    initSlideshow: function() {
        this.slideshow = null;
        this.slideshowZindex = 0;
        this.bound = Object.merge(this.bound, {
            resizeSlideshow: this.resizeSlideshow.bind(this)
        });
    },
    attachSlideshow: function() {
        if (this.slideshow) {
            this.slideshow.attach();
            window.addEvent('resize', this.bound.resizeSlideshow);
        } else {
            this.page.requirePluginAssets({
                js: ['slideshow.min.js'],
                onLoad: function() {
                    if (typeof(Slideshow) != 'undefined') {
                        var box = this.element.getElement('.tpl-slideshow');
                        var items = this.element.getElements('.tpl-slide');
                        var handlesContainer = this.element.getElement('.tpl-slideshow-handles');
                        var handles = (handlesContainer ? handlesContainer.getElements('span') : null);
                        var settings = (this.element.get('data-settings') && this.element.get('data-settings').length > 0 ? JSON.decode(this.element.get('data-settings')) : {});
                        if (box && items) {
                            var s = {
                                box: box,
                                items: items,
                                fade: false,
                                mode: 'horizontal',
                                interval: 5000,
                                autoPlay: true,
                                hoverPause: true,
                                swipe: true,
                                handles: handles,
                                onWalk: function(item, handle) {
                                    this.items.removeClass('tpl-active');
                                    if (item) {
                                        item.addClass('tpl-active');
                                    }
                                    if (this.handles && this.handles.length > 0) {
                                        this.handles.removeClass('tpl-active');
                                        if (handle) {
                                            handle.addClass('tpl-active');
                                        }
                                    }
                                }
                            };
                            if (typeof(settings.fade) != 'undefined') {
                                s.fade = settings.fade;
                            }
                            if (typeof(settings.mode) != 'undefined') {
                                s.mode = settings.mode;
                            }
                            if (typeof(settings.interval) != 'undefined') {
                                s.interval = settings.interval;
                            }
                            if (typeof(settings.autoPlay) != 'undefined') {
                                s.autoPlay = settings.autoPlay;
                            }
                            if (typeof(settings.hoverPause) != 'undefined') {
                                s.hoverPause = settings.hoverPause;
                            }
                            if (typeof(settings.playStop) != 'undefined') {
                                s.playStop = settings.playStop;
                            }
                            var size = this.element.getElement('.tpl-slideshow-container').getComputedSize({
                                styles: ['border', 'padding', 'margin']
                            });
                            switch (s.mode) {
                                case 'vertical':
                                    s.size = size.height;
                                    break;
                                case 'horizontal':
                                    s.size = size.width;
                                    break;
                            }
                            items.setStyles({
                                width: size.width,
                                height: size.height
                            });
                            box.setStyles({
                                position: 'absolute',
                                top: 0,
                                left: 0
                            });
                            var buttons = {};
                            previousButtons = this.element.getElements('.tpl-previous');
                            if (previousButtons && previousButtons.length > 0) {
                                buttons.previous = previousButtons;
                            }
                            nextButtons = this.element.getElements('.tpl-next');
                            if (previousButtons && previousButtons.length > 0) {
                                buttons.next = nextButtons;
                            }
                            playStopButtons = this.element.getElements('.tpl-play');
                            if (playStopButtons && playStopButtons.length > 0) {
                                buttons.play = playStopButtons;
                            }
                            if (Object.getLength(buttons) > 0) {
                                s.buttons = buttons;
                            }
                            this.slideshow = new Slideshow(s);
                            [previousButtons, nextButtons, playStopButtons].clean().each(function(item) {
                                zIndex = parseInt(item.getStyle('z-index'));
                                if (zIndex > 0 && zIndex > this.slideshowZindex) {
                                    this.slideshowZindex = zIndex;
                                }
                            }, this);
                            items.each(function(item) {
                                zIndex = parseInt(item.getStyle('z-index'));
                                if (zIndex > 0 && zIndex > this.slideshowZindex) {
                                    this.slideshowZindex = zIndex;
                                }
                            }, this);
                            if (handlesContainer) {
                                zIndex = parseInt(handlesContainer.getStyle('z-index'));
                                if (zIndex > 0 && zIndex > this.slideshowZindex) {
                                    this.slideshowZindex = zIndex;
                                }
                            }
                            window.addEvent('resize', this.bound.resizeSlideshow);
                        }
                    }
                }.bind(this)
            });
        }
    },
    resizeSlideshow: function() {},
    detachSlideshow: function() {
        if (this.slideshow) {
            this.slideshow.detach();
            window.removeEvent('resize', this.bound.resizeSlideshow);
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    setZindex: function() {
        if (this.slideshowZindex > 0) {
            var items = [this.editBox.tb, this.editBox.lb, this.editBox.rb, this.editBox.bb, this.editBox.bt];
            if (this.options.dropdown == true && this.editBox.dd) {
                items.push(this.editBox.dd.list);
            }
            items.each(function(el) {
                el.setStyle('z-index', this.slideshowZindex + 1);
            }, this);
        }
    }
});
var WebshopWidget = new Class({
    attachProductDetailsBox: function(entry) {
        var eId = entry.get('data-eid');
        if (!eId) {
            return;
        }
        var details = entry.getElement('.tpl-product-additional-info');
        if (!details) {
            return;
        }
        entry.getElements('.tpl-tabs li a').each(function(tab) {
            var event = this.productDetailsTabClick.bind(this, tab);
            tab.store('event:productDetailsTabClick', event).addEvent('click', event);
        }, this);
        if (typeof(this.galleryTypes[eId]) != 'undefined') {
            switch (this.galleryTypes[eId]) {
                case GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE:
                    {
                        if (typeof(this.galleries[eId]) != 'undefined') {
                            this.galleries[eId].attach();
                        } else {
                            var fn = (function() {
                                var wrapper = details.getElement('.tpl-photo-gallery-wrapper');
                                if (wrapper) {
                                    var carouselSize = IPG_CAROUSEL_SIZE_SMALL;
                                    var carousel = wrapper.getElement('.tpl-photo-gallery-carousel');
                                    if (carousel && carousel.hasClass('tpl-photo-gallery-carousel-large')) {
                                        carouselSize = IPG_CAROUSEL_SIZE_LARGE;
                                    }
                                    var self = this;
                                    this.galleries[eId] = new InlinePhotoGallery(wrapper, {
                                        carouselSize: carouselSize,
                                        onShowStage: function(options) {
                                            self.elementResized();
                                            var scrollY = self.scrollableElement.getScroll().y;
                                            var viewportSize = self.viewportElement.getSize();
                                            var wrapperCoords = null;
                                            var stageCoords = null;
                                            if (self.admin || self.preview) {
                                                wrapperCoords = wrapper.getRelativeCoordinates($('PageWrapper'));
                                                stageCoords = this.stage.getRelativeCoordinates($('PageWrapper'));
                                            } else {
                                                wrapperCoords = wrapper.getCoordinates();
                                                stageCoords = this.stage.getCoordinates();
                                            }
                                            if (viewportSize.y > wrapperCoords.height + 20 && wrapperCoords.bottom > viewportSize.y + scrollY) {
                                                self.scrollFx.start(0, wrapperCoords.bottom - viewportSize.y + 10);
                                            } else if (viewportSize.y < wrapperCoords.height + 20 || scrollY > stageCoords.top || (viewportSize.y < wrapperCoords.height + 20 && scrollY < wrapperCoords.top)) {
                                                self.scrollFx.start(0, wrapperCoords.top - 10);
                                            }
                                        },
                                        onLoadPhotoIntoStage: function(options) {
                                            self.elementResized();
                                        }
                                    });
                                    this.website.preload(['/main_img/progress_indicator_alt.gif'], ASSET_TPL);
                                }
                            }).bind(this);
                            if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                                fn.apply();
                            } else {
                                window.addEvent('load', fn);
                            }
                        }
                        break;
                    }
                case GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX:
                    {
                        if (typeof(this.galleries[eId]) != 'undefined') {
                            this.galleries[eId].attach();
                        } else {
                            var fn = (function() {
                                var wrapper = details.getElement('.tpl-photo-gallery-wrapper');
                                if (wrapper) {
                                    var carouselSize = SPG_CAROUSEL_SIZE_SMALL;
                                    var carousel = wrapper.getElement('.tpl-photo-gallery-carousel');
                                    if (carousel && carousel.hasClass('tpl-photo-gallery-carousel-large')) {
                                        carouselSize = SPG_CAROUSEL_SIZE_LARGE;
                                    }
                                    this.galleries[eId] = new ScrollerPhotoGallery(wrapper, {
                                        carouselSize: carouselSize
                                    });
                                }
                            }).bind(this);
                            if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                                fn.apply();
                            } else {
                                window.addEvent('load', fn);
                            }
                        }
                        if (typeof(this.lightboxes[eId]) != 'undefined') {
                            this.lightboxes[eId].attach();
                        } else {
                            var fn = (function() {
                                var container = details.getElement('.tpl-photo-gallery-wrapper');
                                if (container) {
                                    var self = this;
                                    this.lightboxes[eId] = new Lightbox(container, {
                                        text: {
                                            close: __('core', 'Close')
                                        },
                                        getItems: function(container) {
                                            return container.getElements('.tpl-photo-gallery-carousel-slide a[href]');
                                        },
                                        getItem: function(item) {
                                            return item.getParent('.tpl-photo-gallery-carousel-slide');
                                        },
                                        parseItem: function(item) {
                                            var data = (item.get('data-image') && item.get('data-image').length > 0 ? JSON.decode(item.get('data-image')) : null);
                                            return {
                                                element: item,
                                                src: item.get('href'),
                                                description: (typeof(data.description) != 'undefined' ? data.description : '')
                                            };
                                        },
                                        onLoadPhoto: function(options) {
                                            var previous = container.getElement('.tpl-photo-gallery-carousel-slide.tpl-current');
                                            var current = this.getItem(options.element);
                                            if (current != previous) {
                                                previous.removeClass('tpl-current');
                                                if (!current.hasClass('tpl-current')) {
                                                    current.addClass('tpl-current');
                                                }
                                            }
                                            if (self.galleries[eId]) {
                                                self.galleries[eId].scrollToSlide(current, self.galleries[eId].currentSlide, true);
                                            }
                                        }
                                    });
                                }
                            }).bind(this);
                            if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                                fn.apply();
                            } else {
                                window.addEvent('load', fn);
                            }
                        }
                        break;
                    }
                case GALLERY_DISPLAY_TYPE_THUMBS_GRID:
                    {
                        if (typeof(this.lightboxes[eId]) != 'undefined') {
                            this.lightboxes[eId].attach();
                        } else {
                            var fn = (function() {
                                var container = details.getElement('.tpl-photo-gallery-grid');
                                if (container) {
                                    this.lightboxes[eId] = new Lightbox(container, {
                                        text: {
                                            close: __('core', 'Close')
                                        },
                                        getItems: function(container) {
                                            return container.getElements('.tpl-photo-gallery-grid-item a[href]');
                                        },
                                        getItem: function(item) {
                                            return item.getParent('.tpl-photo-gallery-grid-item');
                                        },
                                        parseItem: function(item) {
                                            var data = (item.get('data-image') && item.get('data-image').length > 0 ? JSON.decode(item.get('data-image')) : null);
                                            return {
                                                element: item,
                                                src: item.get('href'),
                                                description: (typeof(data.description) != 'undefined' ? data.description : '')
                                            };
                                        },
                                        onLoadPhoto: function(options) {
                                            var previous = container.getElement('.tpl-photo-gallery-grid-item.tpl-current');
                                            var current = this.getItem(options.element);
                                            if (current != previous) {
                                                previous.removeClass('tpl-current');
                                                if (!current.hasClass('tpl-current')) {
                                                    current.addClass('tpl-current');
                                                }
                                            }
                                        }
                                    });
                                }
                            }).bind(this);
                            if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                                fn.apply();
                            } else {
                                window.addEvent('load', fn);
                            }
                        }
                        break;
                    }
            }
        }
        entry.getElements('.tpl-reviews a.tpl-new-review').each(function(link) {
            var event = this.newProductReviewLinkClick.bind(this, link);
            link.store('event:newProductReviewLinkClick', event).addEvent('click', event);
        }, this);
        entry.getElements('.tpl-reviews .tpl-product-review a.tpl-delete').each(function(link) {
            var event = this.deleteProductReviewLinkClick.bind(this, link);
            link.store('event:deleteProductReviewLinkClick', event).addEvent('click', event);
        }, this);
        entry.getElements('.tpl-reviews .tpl-pager-links a:not(.tpl-disabled)').each(function(link) {
            var event = this.productReviewsPagerLinkClick.bind(this, link);
            link.store('event:productReviewsPagerLinkClick', event).addEvent('click', event);
        }, this);
        entry.getElements('.tpl-new-review-form form').each(function(form) {
            if (form.validator) {
                form.validator.attach();
            } else {
                var self = this;
                var msgBox = form.getElement('.tpl-message');
                var elementId = (this.element ? this.element.get('id') : null);
                var customElAlerts = {};
                form.getElements('[class*=validate]').each(function(input) {
                    var lbl = input.getParent('.tpl-form-row').getElement('.tpl-form-label');
                    if (lbl) {
                        customElAlerts[input.get('id')] = __('form_check', 'Field "%0" is required.').replace('%0', lbl.get('html').replace(/[\:]+$/g, '').trim());
                    }
                });
                var uri = new URI(Object.getFromPath(this.page, 'options.page.here_url')).set('data', {
                    'tab': 'reviews'
                });
                var url = uri.get('directory') + uri.get('file') + '?' + uri.get('query')
                var options = Object.merge(this.getValidatorOptions(), {
                    submitByAjax: true,
                    ajaxSubmitAction: '/ajax_core_widgets_ui/request/',
                    ajaxData: {
                        'data[Request][widget_id]': this.id,
                        'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                        'data[Request][url]': url,
                        'data[Request][render]': 1,
                        'data[Request][process]': 1
                    },
                    display: {
                        errorsListContainer: msgBox,
                        customElAlerts: customElAlerts
                    },
                    onFormValid: function() {
                        if ((self.admin || self.preview) && Browser.ie && Math.round(Browser.version) < 8) {
                            Browser.redraw();
                        }
                        var sysMsg = $('SystemMessage');
                        if (sysMsg) {
                            sysMsg.hide();
                        }
                        this.form.getElements('.tpl-product-cart-option-row.tpl-invalid').removeClass('tpl-invalid');
                        self.elementResized();
                    }
                });
                form.validator = new FormCheck(form, options);
                Object.each(form.validator.options.alerts, function(msg, idx) {
                    form.validator.options.alerts[idx] = __('form_check', msg);
                });
            }
            form.getElements('.tpl-rating-box .tpl-star').each(function(link) {
                var event = this.productRatingStarLinkMouseEnter.bind(this, link);
                link.store('event:productRatingStarLinkMouseEnter', event).addEvent('mouseenter', event);
                var event = this.productRatingStarLinkMouseLeave.bind(this, link);
                link.store('event:productRatingStarLinkMouseLeave', event).addEvent('mouseleave', event);
                var event = this.productRatingStarLinkClick.bind(this, link);
                link.store('event:productRatingStarLinkClick', event).addEvent('click', event);
            }, this);
            var cancelLink = form.getElement('.tpl-cancel a');
            if (cancelLink) {
                var event = this.productRatingFormCancelLinkClick.bind(this, cancelLink);
                cancelLink.store('event:productRatingFormCancelLinkClick', event).addEvent('click', event);
            }
        }, this);
    },
    detachProductDetailsBox: function(entry) {
        var eId = entry.get('data-eid');
        if (!eId) {
            return;
        }
        var details = entry.getElement('.tpl-product-additional-info');
        if (!details) {
            return;
        }
        entry.getElements('.tpl-tabs li a').each(function(tab) {
            tab.removeEvent('click', tab.retrieve('event:productDetailsTabClick')).eliminate('event:productDetailsTabClick');
        });
        if (typeof(this.galleryTypes[eId]) != 'undefined') {
            switch (this.galleryTypes[eId]) {
                case GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE:
                    {
                        if (typeof(this.galleries[eId]) != 'undefined') {
                            this.galleries[eId].detach();
                        }
                        break;
                    }
                case GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX:
                    {
                        if (typeof(this.galleries[eId]) != 'undefined') {
                            this.galleries[eId].detach();
                        }
                        if (typeof(this.lightboxes[eId]) != 'undefined') {
                            this.lightboxes[eId].detach();
                        }
                        break;
                    }
                case GALLERY_DISPLAY_TYPE_THUMBS_GRID:
                    {
                        if (typeof(this.lightboxes[eId]) != 'undefined') {
                            this.lightboxes[eId].detach();
                        }
                        break;
                    }
            }
        }
        entry.getElements('.tpl-reviews a.tpl-new-review').each(function(link) {
            link.removeEvent('click', link.retrieve('event:newProductReviewLinkClick')).eliminate('event:newProductReviewLinkClick');
        });
        entry.getElements('.tpl-reviews .tpl-product-review a.tpl-delete').each(function(link) {
            link.removeEvent('click', link.retrieve('event:deleteProductReviewLinkClick')).eliminate('event:deleteProductReviewLinkClick');
        });
        entry.getElements('.tpl-reviews .tpl-pager-links a:not(.tpl-disabled)').each(function(link) {
            link.removeEvent('click', link.retrieve('event:productReviewsPagerLinkClick')).eliminate('event:productReviewsPagerLinkClick');
        });
        entry.getElements('.tpl-new-review-form form').each(function(form) {
            if (form.validator) {
                form.validator.detach();
            }
            form.getElements('.tpl-rating-box .tpl-star').each(function(link) {
                link.removeEvent('mouseenter', link.retrieve('event:productRatingStarLinkMouseEnter')).eliminate('event:productRatingStarLinkMouseEnter');
                link.removeEvent('mouseleave', link.retrieve('event:productRatingStarLinkMouseLeave')).eliminate('event:productRatingStarLinkMouseLeave');
                link.removeEvent('click', link.retrieve('event:productRatingStarLinkClick')).eliminate('event:productRatingStarLinkClick');
            });
            var cancelLink = form.getElement('.tpl-cancel a');
            if (cancelLink) {
                cancelLink.removeEvent('click', cancelLink.retrieve('event:productRatingFormCancelLinkClick')).eliminate('event:productRatingFormCancelLinkClick');
            }
        });
    },
    quantityInputFocus: function(input, ev) {
        input.store('input:qty', input.get('value'));
    },
    quantityInputBlur: function(input, ev) {
        if (!/^[1-9][0-9]*$/.test(input.get('value'))) {
            var value = input.retrieve('input:qty') || 1;
            input.set('value', value);
        }
        input.eliminate('input:qty');
    },
    quantityInputKeydown: function(input, ev) {
        if (ev.control && !ev.alt) {
            return;
        }
        var isSpecial = (ev.alt || ev.meta || ev.shift ? true : false);
        if ((isSpecial || (ev.code > 31 && (ev.code < 48 || ev.code > 57) && (ev.code < 96 || ev.code > 105) && (ev.code < 112 || ev.code > 123))) && !['left', 'right', 'delete', 'backspace', 'tab', 'enter'].contains(ev.key)) {
            ev.stop();
        }
    },
    quantityInputKeyup: function(input, ev) {
        if (input.get('value').length > 0 && !/^[1-9][0-9]*$/.test(input.get('value'))) {
            input.set('value', 1);
        }
    },
    productCartFormSubmit: function(form, ev) {
        ev.preventDefault();
        if (this.isBusyForm(form)) {
            return;
        }
        var qtyInput = form.getElement('.tpl-product-cart-qty');
        if (qtyInput && qtyInput.get('value').length == 0) {
            return;
        }
        var data = Object.merge(form.toQueryString().parseQueryString(), {
            'data[Request][widget_id]': this.id,
            'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
            'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
            'data[Request][render]': 0,
            'data[Request][process]': 1,
            'data[Widget][id]': this.id
        });
        this.website.request({
            url: '/ajax_core_widgets_ui/request/',
            data: data,
            onRequest: function() {
                this.setBusyForm(form, true);
                this.website.websiteRequest();
            }.bind(this),
            onFailure: function() {
                this.setBusyForm(form, false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onError: function(text, error) {
                this.setBusyForm(form, false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onSuccess: function(response, options) {
                this.setBusyForm(form, false);
                if (this.website.websiteRequestSuccess(response, options) == false) {
                    return;
                }
                if (typeof(response.success) != 'undefined') {
                    var duration = 8000;
                    if (Object.getFromPath(response, 'notifications') && response.notifications.length > 0) {
                        duration = 12000;
                    }
                    this.website.notifier.empty();
                    if (response.success == true && typeof(response.product) != 'undefined' && typeof(response.product.name) != 'undefined' && typeof(response.product.quantity) != 'undefined' && typeof(response.product.display_price) != 'undefined' && typeof(response.product.currency) != 'undefined' && typeof(response.product.show_zero_price) != 'undefined' && typeof(response.product.checkout_url) != 'undefined') {
                        var options = Object.merge(Object.clone(this.website.options.notifierOptions), {
                            duration: duration,
                            hideOnClick: false,
                            classes: {
                                item: 'tpl-roar tpl-roar-box'
                            },
                            onShow: function(item, length) {
                                item.getElements('.tpl-roar-box-buttons input').each(function(button) {
                                    var event = (function() {
                                        this.remove(item);
                                    }).bind(this);
                                    switch (true) {
                                        case button.hasClass('tpl-checkout-button'):
                                            {
                                                event = (function() {
                                                    window.location = response.product.checkout_url;
                                                }).bind(this);
                                                break;
                                            }
                                    }
                                    button.store('event:roarButtonClick', event).addEvent('click', event);
                                }, this);
                            },
                            onHide: function(item, length) {
                                item.getElements('.tpl-roar-box-buttons input').each(function(button) {
                                    button.removeEvent('click', button.retrieve('event:roarButtonClick')).eliminate('event:roarButtonClick');
                                }, this);
                            }
                        });
                        var price = parseFloat(response.product.display_price.replace(/,/gi, '.'));
                        var content = new Element('div').adopt(new Element('div', {
                            'class': 'tpl-roar-box-header clearfix',
                            'html': response.msg
                        }), new Element('div', {
                            'class': 'tpl-roar-box-body clearfix'
                        }).adopt(new Element('div', {
                            'class': 'tpl-roar-box-description'
                        }).adopt(new Element('div', {
                            'class': 'tpl-roar-box-label',
                            'html': response.product.name
                        }), new Element('div', {
                            'html': (price > 0 || response.product.show_zero_price == true ? response.product.quantity + ' x ' + response.product.display_price + ' ' + response.product.currency : __('core', 'Qty:') + ' ' + response.product.quantity)
                        }))), new Element('div', {
                            'class': 'tpl-roar-box-separator clearfix'
                        }), new Element('div', {
                            'class': 'tpl-roar-box-buttons clearfix'
                        }).adopt(new Element('input', {
                            'type': 'button',
                            'class': 'tpl-float-left',
                            'value': __('core', 'Continue shopping')
                        }), new Element('input', {
                            'type': 'button',
                            'class': 'tpl-float-right tpl-alt-button tpl-checkout-button',
                            'value': __('core', 'Show cart') + ' ' + String.fromCharCode(0x203a)
                        })));
                        var body = content.getElement('.tpl-roar-box-body');
                        if (typeof(response.product.image_url) != 'undefined' && response.product.image_url.length > 0 && typeof(response.product.image_width) != 'undefined' && typeof(response.product.image_height) != 'undefined') {
                            new Element('div', {
                                'class': 'tpl-roar-box-thumb'
                            }).adopt(new Element('img', {
                                'src': response.product.image_url,
                                'width': response.product.image_width,
                                'height': response.product.image_height,
                                'alt': response.product.name
                            })).inject(body, 'top');
                            body.getElement('.tpl-roar-box-description').addClass('tpl-roar-box-description-indent');
                        } else {
                            new Element('div', {
                                'class': 'tpl-roar-box-thumb'
                            }).adopt(new Element('span', {
                                'class': 'tpl-product-default-image'
                            })).inject(body, 'top');
                            body.getElement('.tpl-roar-box-description').addClass('tpl-roar-box-description-indent');
                        }
                        this.website.notificationBox(content, options);
                    }
                    if (Object.getFromPath(response, 'notifications') && response.notifications.length > 0) {
                        response.notifications.each(function(notification) {
                            if (Object.getFromPath(notification, 'type') && Object.getFromPath(notification, 'title') && Object.getFromPath(notification, 'msg')) {
                                var options = Object.merge(Object.clone(this.website.options.notifierOptions), {
                                    duration: duration,
                                    hideOnClick: false,
                                    classes: {
                                        item: 'tpl-roar tpl-roar-' + notification.type
                                    }
                                });
                                this.website.notify(notification.title, notification.msg, options);
                            }
                        }, this);
                    }
                    if (response.success == true) {
                        this.page.refreshCart();
                    }
                    return;
                }
                new IWindow.Error(__('core', 'Error'), __('core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later."), {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    }
                });
            }.bind(this)
        });
    },
    contactFormLinkClick: function(link, entry, ev) {
        ev.preventDefault();
        var win = null;
        var pid = entry.get('data-pid');
        var width = link.get('data-width') || 600,
            height = link.get('data-height') || 450,
            minHeight = 200,
            maxHeight = 650;
        var portViewSize = $(document.body).getSize();
        if (portViewSize.y > maxHeight) {
            height = maxHeight - 10;
        } else if (portViewSize.y > height || height > portViewSize.y) {
            height = portViewSize.y - 10;
        }
        if (height < minHeight) {
            height = minHeight;
        }
        if (this.isBusy() == true) {
            return;
        }
        var data = {
            'data[Request][widget_id]': pid,
            'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
            'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
            'data[Request][render]': 1,
            'data[Request][process]': 1,
            'data[Request][static]': 1,
            'data[Request][widget_name]': 'product_contact_form',
            'data[Widget][id]': pid,
            'data[Product][id]': pid
        };
        this.website.request({
            url: '/ajax_core_widgets_ui/request/',
            data: data,
            onRequest: function() {
                this.setBusy(true);
                this.website.websiteRequest();
            }.bind(this),
            onFailure: function() {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onError: function(text, error) {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onSuccess: function(response, options) {
                this.setBusy(false);
                if (this.website.websiteRequestSuccess(response, options) == false) {
                    return;
                }
                if (Object.getFromPath(response, 'widget_content') && Object.getFromPath(response, 'widget_content').length > 0 && Object.getFromPath(response, 'css_assets') && Object.getFromPath(response, 'js_assets')) {
                    var self = this;
                    win = new IWindow(__('widget', 'Ask a question'), response.widget_content, {
                        pin: true,
                        width: width,
                        height: height,
                        modal: true,
                        draggable: true,
                        closeOnEsc: true,
                        destroyOnClose: true,
                        positionOnResize: true,
                        onInitialize: function() {
                            var onInitialize = (function() {
                                this.form = this.content.getElement('form');
                                if (this.form) {
                                    var captchaType = (this.form.get('data-ct') ? this.form.get('data-ct') : false);
                                    var captchaData = (this.form.get('data-cd') ? JSON.decode(this.form.get('data-cd')) : false);
                                    var onCustomSubmit = null;
                                    var onContactFormError = null;
                                    if (captchaType) {
                                        switch (captchaType) {
                                            case 'rc':
                                            case 'irc':
                                                {
                                                    var fn = (function() {
                                                        var existing = $$('script[src]');
                                                        var rcScript = null;
                                                        var rcAsset = 'https://www.google.com/recaptcha/api.js?render=explicit&onload=renderReCaptchaElements&hl=' + Object.getFromPath(self.page, 'options.page.language_code');
                                                        existing.each(function(a) {
                                                            if (!rcScript && rcAsset == a.get('src')) {
                                                                rcScript = a;
                                                            }
                                                        });
                                                        var onScriptLoad = function() {
                                                            this.form.getElements('.g-recaptcha').each(function(el) {
                                                                if (typeof(grecaptcha) != 'undefined' && typeof(grecaptcha.render) != 'undefined') {
                                                                    var elData = {
                                                                        'sitekey': el.get('data-sitekey'),
                                                                        'callback': el.get('data-callback'),
                                                                        'size': el.get('data-size')
                                                                    };
                                                                    var wId = grecaptcha.render(el, elData);
                                                                    el.set('data-wid', wId);
                                                                } else {
                                                                    self.page.queueReCaptchaElement(el);
                                                                }
                                                            }, this);
                                                        }.bind(this);
                                                        if (!rcScript) {
                                                            rcScript = new Element('script', {
                                                                'src': rcAsset,
                                                                'type': 'text/javascript',
                                                                'async': '',
                                                                'defer': ''
                                                            });
                                                            if (typeof rcScript.onreadystatechange != 'undefined') {
                                                                rcScript.addEvent('readystatechange', function() {
                                                                    if (['loaded', 'complete'].contains(this.readyState)) {
                                                                        rcScript.set('data-loaded', 'true');
                                                                        onScriptLoad.apply();
                                                                    }
                                                                });
                                                            } else {
                                                                rcScript.addEvent('load', function() {
                                                                    rcScript.set('data-loaded', 'true');
                                                                    onScriptLoad.apply();
                                                                });
                                                            }
                                                            rcScript.inject(document.body);
                                                        } else {
                                                            if (rcScript.get('data-loaded') == 'true') {
                                                                onScriptLoad.apply();
                                                            } else {
                                                                if (typeof rcScript.onreadystatechange != 'undefined') {
                                                                    rcScript.addEvent('readystatechange', function() {
                                                                        if (['loaded', 'complete'].contains(this.readyState)) {
                                                                            onScriptLoad.apply();
                                                                        }
                                                                    });
                                                                } else {
                                                                    rcScript.addEvent('load', function() {
                                                                        onScriptLoad.apply();
                                                                    });
                                                                }
                                                            }
                                                        }
                                                    }).bind(this);
                                                    if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                                                        fn.apply();
                                                    } else {
                                                        window.addEvent('load', fn);
                                                    }
                                                    break;
                                                }
                                            case 'rc_v3':
                                                {
                                                    var fn = (function() {
                                                        if (!captchaData || typeof(captchaData.sitekey) == 'undefined' || typeof(captchaData.action) == 'undefined') {
                                                            return;
                                                        }
                                                        var existing = $$('script[src]');
                                                        var rcScript = null;
                                                        var rcAsset = 'https://www.google.com/recaptcha/api.js?render=' + captchaData.sitekey;
                                                        existing.each(function(a) {
                                                            if (!rcScript && rcAsset == a.get('src')) {
                                                                rcScript = a;
                                                            }
                                                        });
                                                        if (!rcScript) {
                                                            rcScript = new Element('script', {
                                                                'src': rcAsset,
                                                                'type': 'text/javascript',
                                                                'async': '',
                                                                'defer': ''
                                                            });
                                                            if (typeof rcScript.onreadystatechange != 'undefined') {
                                                                rcScript.addEvent('readystatechange', function() {
                                                                    if (['loaded', 'complete'].contains(this.readyState)) {
                                                                        rcScript.set('data-loaded', 'true');
                                                                    }
                                                                });
                                                            } else {
                                                                rcScript.addEvent('load', function() {
                                                                    rcScript.set('data-loaded', 'true');
                                                                });
                                                            }
                                                            rcScript.inject(document.body);
                                                        }
                                                    }).bind(this);
                                                    if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                                                        fn.apply();
                                                    } else {
                                                        window.addEvent('load', fn);
                                                    }
                                                    break;
                                                }
                                        }
                                        switch (captchaType) {
                                            case 'irc':
                                            case 'rc_v3':
                                                {
                                                    onCustomSubmit = (function() {
                                                        var onSubmit = (function() {
                                                            this.form.submit();
                                                        }).bind(this);
                                                        if (this.validator) {
                                                            onSubmit = (function() {
                                                                if (typeof(this.submitting) != 'undefined' && this.submitting == true) {
                                                                    return;
                                                                } else {
                                                                    this.submitting = true;
                                                                }
                                                                self.website.loadingBox(false);
                                                                var url = (this.options.ajaxSubmitAction.length > 0) ? this.options.ajaxSubmitAction : this.form.getProperty('action');
                                                                this.fireEvent('ajaxRequest');
                                                                var data = this.form.toQueryString();
                                                                if (this.options.ajaxData) {
                                                                    var ajaxData = (typeOf(this.options.ajaxData) == 'string' ? this.options.ajaxData.parseQueryString() : this.options.ajaxData);
                                                                    if (ajaxData && typeOf(ajaxData) == 'object' && Object.getLength(ajaxData) > 0) {
                                                                        var dataObj = data.parseQueryString();
                                                                        Object.each(dataObj, function(v, k) {
                                                                            if (k.substr(k.length - 2) == '[]' && typeOf(v) == 'array') {
                                                                                Object.erase(dataObj, k);
                                                                                dataObj[k.replace(/\[\]$/, '')] = v;
                                                                            }
                                                                        });
                                                                        data = Object.toQueryString(Object.merge(dataObj, ajaxData));
                                                                    }
                                                                }
                                                                new Request.JSON({
                                                                    url: url,
                                                                    method: this.form.getProperty('method'),
                                                                    data: data,
                                                                    onFailure: function(instance) {
                                                                        this.submitting = false;
                                                                        this.fireEvent('ajaxFailure', [instance]);
                                                                    }.bind(this),
                                                                    onError: function(text, error) {
                                                                        this.submitting = false;
                                                                        this.fireEvent('ajaxError', [text, error]);
                                                                    }.bind(this),
                                                                    onSuccess: function(result) {
                                                                        this.submitting = false;
                                                                        this.fireEvent('ajaxSuccess', [result]);
                                                                    }.bind(this)
                                                                }).send();
                                                            }).bind(this.validator);
                                                        }
                                                        onSubmit.apply();
                                                    }).bind(this);onContactFormError = (function() {
                                                        self.website.loadingBox(false);
                                                    });
                                                    break;
                                                }
                                        }
                                        switch (captchaType) {
                                            case 'irc':
                                                {
                                                    window['onProductContactForm' + pid + 'Submit'] = onCustomSubmit;window['onProductContactForm' + pid + 'Error'] = onContactFormError;
                                                    break;
                                                }
                                        }
                                    }
                                    var refreshLink = this.form.getElement('.tpl-refresh-captcha');
                                    if (refreshLink) {
                                        var event = (function(ev) {
                                            ev.preventDefault();
                                            var img = refreshLink.getParent('.tpl-form-row').getElement('.tpl-captcha-code');
                                            var src = (img ? img.get('src') : false);
                                            if (src && src.length > 0) {
                                                img.set('src', new URI(src).setData('rnd', Date.now()).toString());
                                            }
                                        });
                                        refreshLink.store('event:refreshCaptchaClick', event).addEvent('click', event);
                                    }
                                    var cancelLink = this.form.getElement('.tpl-cancel a');
                                    if (cancelLink) {
                                        var event = (function(ev) {
                                            ev.preventDefault();
                                            win.hide(true);
                                        });
                                        cancelLink.store('event:cancelLinkClick', event).addEvent('click', event);
                                    }
                                }
                                if (this.form && typeof(window['FormCheck']) != 'undefined') {
                                    var customElAlerts = {};
                                    customElAlerts['ProductContactFormName_' + pid] = __('form_check', 'Please enter a valid name.');
                                    customElAlerts['ProductContactFormEmail_' + pid] = __('form_check', 'Please enter a valid e-mail.');
                                    customElAlerts['ProductContactFormPhone_' + pid] = __('form_check', 'Please enter a valid phone number.');
                                    customElAlerts['ProductContactFormMessage_' + pid] = __('form_check', 'Please enter a message.');
                                    customElAlerts['ProductContactFormCaptchaCode_' + pid] = __('form_check', 'Please enter the text from the picture.');
                                    var msgBox = this.content.getElement('.tpl-message');
                                    var options = Object.merge(self.getValidatorOptions(), {
                                        submitByAjax: true,
                                        ajaxSubmitAction: '/ajax_core_widgets_ui/request/',
                                        ajaxData: data,
                                        display: {
                                            errorsListContainer: msgBox,
                                            customElAlerts: customElAlerts,
                                            scrollableElement: this.body.getElement('.tpl-form-container')
                                        },
                                        getScrollPosition: function(obj) {
                                            var top = -1;
                                            var bottom = -1;
                                            if (obj.tagName.toLowerCase() == 'input' && obj.get('type') == 'hidden') {
                                                obj = obj.getParent();
                                            }
                                            var relObj = obj.getOffsetParent();
                                            if (obj.getStyle('display') == 'none') {
                                                obj.show();
                                                relObj = obj.getOffsetParent();
                                                obj.hide();
                                            }
                                            var coords = obj.getRelativeCoordinates(relObj);
                                            top = coords.top - 10;
                                            bottom = coords.bottom + 10;
                                            return {
                                                top: top,
                                                bottom: bottom
                                            };
                                        },
                                        onFormValid: function() {
                                            this.form.getElements('.tpl-form-row.tpl-invalid').removeClass('tpl-invalid');
                                            window.fireEvent('resize');
                                        },
                                        onFormInvalid: function() {
                                            window.fireEvent('resize');
                                        },
                                        onInputValid: function(input) {
                                            var row = input.getParent('.tpl-form-row');
                                            if (row && row.hasClass('tpl-invalid')) {
                                                var inputs = row.getElements('input,select').erase(input);
                                                var bRemove = true;
                                                inputs.each(function(i) {
                                                    if (this.validations.contains(i) && i.isOk == false) {
                                                        bRemove = false;
                                                    }
                                                }, this);
                                                if (bRemove) {
                                                    row.removeClass('tpl-invalid');
                                                }
                                            }
                                        },
                                        onInputInvalid: function(input) {
                                            if (this.options.display.errorsListContainer && this.options.display.errorsListContainer.hasClass('tpl-success')) {
                                                this.options.display.errorsListContainer.removeClass('tpl-success');
                                                this.options.display.errorsListContainer.addClass('tpl-error');
                                            }
                                            var row = input.getParent('.tpl-form-row');
                                            if (row && !row.hasClass('tpl-invalid')) {
                                                row.addClass('tpl-invalid');
                                            }
                                            var focused = $(document.body).getElement('*:focus');
                                            if (focused && focused != input) {
                                                focused.blur();
                                            }
                                        },
                                        onAjaxRequest: function() {
                                            self.website.loadingBox(true);
                                            $('LoadingBox').setStyle('z-index', parseInt(win.element.getStyle('z-index')) + 1);
                                            this.form.getElements('input[type=submit]').set('disabled', true);
                                        },
                                        onAjaxFailure: function() {
                                            new IWindow.Error(__('core', 'Error'), __('core', 'An error has occurred while communicating with the server. Please try again.'), {
                                                parent: win,
                                                pin: true,
                                                onShow: function() {
                                                    this.element.getElement('input[type=button]').focus();
                                                }
                                            });
                                            $('LoadingBox').setStyle('z-index', null);
                                            self.website.loadingBox(false);
                                            this.form.getElements('input[type=submit]').set('disabled', false);
                                        },
                                        onAjaxError: function() {
                                            new IWindow.Error(__('core', 'Error'), __('core', 'An error has occurred while communicating with the server. Please try again.'), {
                                                parent: win,
                                                pin: true,
                                                onShow: function() {
                                                    this.element.getElement('input[type=button]').focus();
                                                }
                                            });
                                            $('LoadingBox').setStyle('z-index', null);
                                            self.website.loadingBox(false);
                                            this.form.getElements('input[type=submit]').set('disabled', false);
                                        },
                                        onAjaxSuccess: function(response) {
                                            this.form.getElements('input[type=submit]').set('disabled', false);
                                            $('LoadingBox').setStyle('z-index', null);
                                            if (self.website.websiteRequestSuccess(response, {
                                                    parentWin: win
                                                }) == false) {
                                                return;
                                            }
                                            if (Object.getFromPath(response, 'close') != 'undefined' && Object.getFromPath(response, 'widget_content')) {
                                                if (Object.getFromPath(response, 'widget_content').length > 0) {
                                                    if (win.validator) {
                                                        win.validator.detach();
                                                    }
                                                    if (win.form) {
                                                        var refreshLink = win.form.getElement('.tpl-refresh-captcha');
                                                        if (refreshLink) {
                                                            refreshLink.removeEvent('click', refreshLink.retrieve('event:refreshCaptchaClick')).eliminate('event:refreshCaptchaClick');
                                                        }
                                                        var cancelLink = win.form.getElement('.tpl-cancel a');
                                                        if (cancelLink) {
                                                            cancelLink.removeEvent('click', cancelLink.retrieve('event:cancelLinkClick')).eliminate('event:cancelLinkClick');
                                                        }
                                                    }
                                                    win.setContent(null, response.widget_content);
                                                    onInitialize.apply();
                                                }
                                                if (response.close == true) {
                                                    win.hide(true);
                                                }
                                                if (Object.getFromPath(response, 'notifications') && response.notifications.length > 0) {
                                                    self.website.notifier.empty();
                                                    response.notifications.each(function(notification) {
                                                        if (Object.getFromPath(notification, 'type') && Object.getFromPath(notification, 'title') && Object.getFromPath(notification, 'msg')) {
                                                            var options = Object.merge(Object.clone(self.website.options.notifierOptions), {
                                                                duration: 10000,
                                                                hideOnClick: false,
                                                                classes: {
                                                                    item: 'tpl-roar tpl-roar-' + notification.type
                                                                }
                                                            });
                                                            self.website.notify(notification.title, notification.msg, options);
                                                        }
                                                    });
                                                }
                                                if (Object.getFromPath(response, 'app_error') && Object.getFromPath(response, 'app_error') == true) {
                                                    var title = __('core', 'Error');
                                                    var msg = __('core', 'An error has occurred while communicating with the server. Please try again.');
                                                    if (Object.getFromPath(response, 'app_title') && Object.getFromPath(response, 'app_title').length > 0) {
                                                        title = Object.getFromPath(response, 'app_title');
                                                    }
                                                    if (Object.getFromPath(response, 'app_msg') && Object.getFromPath(response, 'app_msg').length > 0) {
                                                        msg = Object.getFromPath(response, 'app_msg');
                                                    }
                                                    new IWindow.Error(title, msg, {
                                                        pin: true,
                                                        parent: (response.close == false ? win : false),
                                                        onShow: function() {
                                                            this.element.getElement('input[type=button]').focus();
                                                        }
                                                    });
                                                }
                                            } else {
                                                new IWindow.Error(__('core', 'Error'), __('core', 'An error has occurred while communicating with the server. Please try again.'), {
                                                    pin: true,
                                                    parent: win,
                                                    onShow: function() {
                                                        this.element.getElement('input[type=button]').focus();
                                                    }
                                                });
                                            }
                                        }
                                    });
                                    switch (captchaType) {
                                        case 'irc':
                                            {
                                                options = Object.merge(options, {
                                                    customSubmit: true,
                                                    submitByAjax: false,
                                                    onCustomSubmit: function(ev) {
                                                        self.website.loadingBox(true);
                                                        var captchaEl = this.form.getElement('.g-recaptcha[data-wid]');
                                                        if (captchaEl && typeof(grecaptcha) != 'undefined') {
                                                            grecaptcha.execute(captchaEl.get('data-wid'));
                                                        } else {
                                                            onCustomSubmit.apply();
                                                        }
                                                    }
                                                });
                                                break;
                                            }
                                        case 'rc_v3':
                                            {
                                                options = Object.merge(options, {
                                                    customSubmit: true,
                                                    submitByAjax: false,
                                                    onCustomSubmit: function(ev) {
                                                        self.website.loadingBox(true);
                                                        var form = this.form;
                                                        if (typeof(grecaptcha) != 'undefined') {
                                                            grecaptcha.ready(function() {
                                                                if (captchaData && typeof(captchaData.sitekey) != 'undefined' && typeof(captchaData.action) != 'undefined') {
                                                                    grecaptcha.execute(captchaData.sitekey, {
                                                                        action: captchaData.action
                                                                    }).then(function(token) {
                                                                        new Element('input', {
                                                                            'type': 'hidden',
                                                                            'name': 'g-recaptcha-response',
                                                                            'value': token
                                                                        }).inject(form);
                                                                        onCustomSubmit.apply();
                                                                    }).catch(function() {
                                                                        onContactFormError.apply();
                                                                    });
                                                                } else {
                                                                    onCustomSubmit.apply();
                                                                }
                                                            });
                                                        } else {
                                                            onCustomSubmit.apply();
                                                        }
                                                    }
                                                });
                                                break;
                                            }
                                    }
                                    this.validator = new FormCheck(this.form, options);
                                    Object.each(this.validator.options.alerts, function(msg, idx) {
                                        this.validator.options.alerts[idx] = __('form_check', msg);
                                    }, this);
                                }
                            }).bind(this);
                            onInitialize.apply();
                        },
                        onShow: function() {
                            if (self.website.notifier && this.modalizer) {
                                self.website.notifier.body.store('style:zIndex', self.website.notifier.body.getStyle('z-index'));
                                self.website.notifier.body.setStyle('z-index', parseInt(this.modalizer.element.getStyle('z-index')) + 2);
                            }
                        },
                        onHide: function() {
                            if (self.website.notifier && this.modalizer) {
                                var zIndex = self.website.notifier.body.retrieve('style:zIndex');
                                if (zIndex) {
                                    self.website.notifier.body.setStyle('z-index', zIndex).eliminate('style:zIndex');
                                }
                            }
                        },
                        onBeforeDestroy: function() {
                            if (this.validator) {
                                this.validator.detach();
                            }
                            if (this.form) {
                                var captchaType = (this.form.get('data-ct') ? this.form.get('data-ct') : false);
                                switch (captchaType) {
                                    case 'irc':
                                        {
                                            window['onProductContactForm' + pid + 'Submit'] = undefined;window['onProductContactForm' + pid + 'Error'] = undefined;
                                            break;
                                        }
                                }
                                var refreshLink = this.form.getElement('.tpl-refresh-captcha');
                                if (refreshLink) {
                                    refreshLink.removeEvent('click', refreshLink.retrieve('event:refreshCaptchaClick')).eliminate('event:refreshCaptchaClick');
                                }
                                var cancelLink = this.form.getElement('.tpl-cancel a');
                                if (cancelLink) {
                                    cancelLink.removeEvent('click', cancelLink.retrieve('event:cancelLinkClick')).eliminate('event:cancelLinkClick');
                                }
                            }
                        }
                    });
                    win.body.setStyle('position', 'relative');
                    if (Object.getFromPath(response, 'notifications') && response.notifications.length > 0) {
                        this.website.notifier.empty();
                        var duration = 5000;
                        response.notifications.each(function(notification) {
                            if (Object.getFromPath(notification, 'type') && Object.getFromPath(notification, 'title') && Object.getFromPath(notification, 'msg')) {
                                var options = Object.merge(Object.clone(this.website.options.notifierOptions), {
                                    duration: duration,
                                    hideOnClick: false,
                                    classes: {
                                        item: 'tpl-roar tpl-roar-' + notification.type
                                    }
                                });
                                this.website.notify(notification.title, notification.msg, options);
                            }
                        }, this);
                    }
                    if (Object.getFromPath(response, 'app_error') && Object.getFromPath(response, 'app_error') == true) {
                        var title = __('core', 'Error');
                        var msg = __('core', 'An error has occurred while communicating with the server. Please try again.');
                        if (Object.getFromPath(response, 'app_title') && Object.getFromPath(response, 'app_title').length > 0) {
                            title = Object.getFromPath(response, 'app_title');
                        }
                        if (Object.getFromPath(response, 'app_msg') && Object.getFromPath(response, 'app_msg').length > 0) {
                            msg = Object.getFromPath(response, 'app_msg');
                        }
                        new IWindow.Error(title, msg, {
                            pin: true,
                            onShow: function() {
                                this.element.getElement('input[type=button]').focus();
                            }
                        });
                    }
                    return;
                }
                new IWindow.Error(__('core', 'Error'), __('core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later."), {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    }
                });
            }.bind(this)
        });
    },
    productDetailsTabClick: function(tab, ev) {
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        var tabItem = tab.getParent('li');
        var oldTabItem = tab.getParent('ul').getElement('.tpl-active');
        if (tabItem == oldTabItem) {
            return;
        }
        var i = tab.getParent('ul').getChildren().indexOf(tabItem);
        if (i > -1) {
            if (History.push(History.toRelativeUrl(tab.get('href')), null, {
                    a: 'widget',
                    m: 'showProductDetailsTab',
                    w: this.element.get('id')
                }) == false) {
                this.showProductDetailsTab({
                    url: tab.get('href')
                });
            }
        }
    },
    newProductReviewLinkClick: function(el, ev) {
        ev.preventDefault();
        var form = el.getParent('.tpl-tab-content').getElement('.tpl-new-review-form');
        if (form) {
            form.toggle();
            this.elementResized();
        }
    },
    deleteProductReviewLinkClick: function(link, ev) {
        var parsed = new URI(link.get('href'));
        var data = (parsed ? parsed.get('data') : null);
        var action = (data && typeof(data.action) != 'undefined' ? data.action : false);
        var id = (data && typeof(data.id) != 'undefined' ? data.id : false);
        var pid = (data && typeof(data.pid) != 'undefined' ? data.pid : false);
        var url = (data && typeof(data.redirect_url) != 'undefined' ? data.redirect_url : Object.getFromPath(this.page, 'options.page.here_url'));
        if (!action || !id || !pid) {
            return;
        }
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        var elementId = (this.element ? this.element.get('id') : null);
        this.website.request({
            url: '/ajax_core_widgets_ui/request/',
            data: {
                'data[Request][widget_id]': this.id,
                'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                'data[Request][url]': url,
                'data[Request][render]': 1,
                'data[Request][process]': 1,
                'data[Widget][id]': this.id,
                'data[Widget][action]': action,
                'data[ProductReview][id]': id,
                'data[ProductReview][pid]': pid
            },
            onRequest: function() {
                this.setBusy(true);
                this.website.websiteRequest();
            }.bind(this),
            onFailure: function() {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onError: function(text, error) {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onSuccess: function(response, options) {
                this.setBusy(false);
                if (this.website.websiteRequestSuccess(response, options) == false) {
                    return;
                }
                if (Object.getFromPath(response, 'widget_content') && Object.getFromPath(response, 'widget_content').length > 0 && Object.getFromPath(response, 'css_assets') && Object.getFromPath(response, 'js_assets')) {
                    this.page.queueWidgetInsert(elementId, response, true);
                    if (Object.getFromPath(response, 'notifications') && response.notifications.length > 0) {
                        this.website.notifier.empty();
                        var duration = 5000;
                        response.notifications.each(function(notification) {
                            if (Object.getFromPath(notification, 'type') && Object.getFromPath(notification, 'title') && Object.getFromPath(notification, 'msg')) {
                                var options = Object.merge(Object.clone(this.website.options.notifierOptions), {
                                    duration: duration,
                                    hideOnClick: false,
                                    classes: {
                                        item: 'tpl-roar tpl-roar-' + notification.type
                                    }
                                });
                                this.website.notify(notification.title, notification.msg, options);
                            }
                        }, this);
                    }
                    if (Object.getFromPath(response, 'app_error') && Object.getFromPath(response, 'app_error') == true) {
                        var title = __('core', 'Error');
                        var msg = __('core', 'An error has occurred while communicating with the server. Please try again.');
                        if (Object.getFromPath(response, 'app_title') && Object.getFromPath(response, 'app_title').length > 0) {
                            title = Object.getFromPath(response, 'app_title');
                        }
                        if (Object.getFromPath(response, 'app_msg') && Object.getFromPath(response, 'app_msg').length > 0) {
                            msg = Object.getFromPath(response, 'app_msg');
                        }
                        new IWindow.Error(title, msg, {
                            pin: true,
                            onShow: function() {
                                this.element.getElement('input[type=button]').focus();
                            }
                        });
                    }
                    return;
                }
                new IWindow.Error(__('core', 'Error'), __('core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later."), {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    }
                });
            }.bind(this)
        });
    },
    productReviewsPagerLinkClick: function(link, ev) {
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        if (History.push(History.toRelativeUrl(link.get('href')), null, {
                a: 'widget',
                m: 'getProductReviews',
                w: this.element.get('id')
            }) == false) {
            this.getProductReviews({
                data: {
                    'data[Request][url]': History.toRelativeUrl(link.get('href'))
                }
            });
        }
    },
    productRatingStarLinkMouseEnter: function(el, ev) {
        var box = el.getParent('.tpl-rating-box');
        var children = (box ? box.getChildren() : null);
        var i = (children ? children.indexOf(el) : false);
        if (i !== false) {
            var input = el.getParent('.tpl-form-input').getElement('input[name="data[ProductReview][rating]"]');
            if (input) {
                var value = (input.get('value') && input.get('value').length > 0 ? parseInt(input.get('value')) : null);
                box.store('rating:value', value);
            }
            children.each(function(c, j) {
                if (c.hasClass('tpl-active')) {
                    c.removeClass('tpl-active');
                }
                if (j <= i && !c.hasClass('tpl-over')) {
                    c.addClass('tpl-over');
                }
            });
        }
    },
    productRatingStarLinkMouseLeave: function(el, ev) {
        var box = el.getParent('.tpl-rating-box');
        var children = (box ? box.getChildren() : null);
        var i = (children ? children.indexOf(el) : false);
        if (i !== false) {
            var value = box.retrieve('rating:value', null);
            box.eliminate('rating:value');
            children.each(function(c, j) {
                if (value !== null && j < value && !c.hasClass('tpl-active')) {
                    c.addClass('tpl-active');
                }
                if (j <= i && c.hasClass('tpl-over')) {
                    c.removeClass('tpl-over');
                }
            });
        }
    },
    productRatingStarLinkClick: function(el, ev) {
        ev.preventDefault();
        var box = el.getParent('.tpl-rating-box');
        var children = (box ? box.getChildren() : null);
        var i = (children ? children.indexOf(el) : false);
        if (i !== false) {
            box.eliminate('rating:value');
            children.each(function(c, j) {
                if (j <= i && !c.hasClass('tpl-active')) {
                    c.addClass('tpl-active');
                } else if (j > i && c.hasClass('tpl-active')) {
                    c.removeClass('tpl-active');
                }
            });
            var input = el.getParent('.tpl-form-input').getElement('input[name="data[ProductReview][rating]"]');
            if (input) {
                input.set('value', i + 1);
            }
        }
    },
    productRatingFormCancelLinkClick: function(el, ev) {
        ev.preventDefault();
        var form = el.getParent('.tpl-tab-content').getElement('.tpl-new-review-form');
        if (form) {
            form.toggle();
            this.elementResized();
        }
    },
    shoppingCartFormSubmit: function(form, ev) {
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        var elementId = (this.element ? this.element.get('id') : null);
        var widgetsToRefresh = this.page.getCartWidgetsToRefresh([this.id]);
        form.getElements('.tpl-shopping-cart-qty').each(function(input) {
            if (input.get('value').length == 0) {
                input.set('value', input.retrieve('input:qty') || 1);
            }
        });
        var data = Object.merge(form.toQueryString().parseQueryString(), {
            'data[Request][widget_id]': this.id,
            'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
            'data[Request][refresh_widgets_id]': widgetsToRefresh,
            'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
            'data[Request][render]': 1,
            'data[Request][process]': 1,
            'data[Widget][id]': this.id
        });
        this.website.request({
            url: '/ajax_core_widgets_ui/request/',
            data: data,
            onRequest: function() {
                this.setBusy(true);
                this.website.websiteRequest();
            }.bind(this),
            onFailure: function() {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onError: function(text, error) {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onSuccess: function(response, options) {
                this.setBusy(false);
                if (this.website.websiteRequestSuccess(response, options) == false) {
                    return;
                }
                if (Object.getFromPath(response, 'widget_content') && Object.getFromPath(response, 'widget_content').length > 0 && Object.getFromPath(response, 'css_assets') && Object.getFromPath(response, 'js_assets')) {
                    this.page.queueWidgetInsert(elementId, response, true);
                    var notifications = [];
                    if (Object.getFromPath(response, 'notifications') && response.notifications.length > 0) {
                        notifications = response.notifications;
                    }
                    if (Object.getFromPath(response, 'widgets') && Object.getLength(response.widgets) > 0) {
                        Object.each(response.widgets, function(widget, elementId) {
                            if (this.website.isError(widget) == true || this.website.preprocessResponse(widget) == false) {
                                return;
                            }
                            this.page.queueWidgetInsert(elementId, widget, true);
                            if (Object.getFromPath(widget, 'notifications') && widget.notifications.length > 0) {
                                notifications.append(widget.notifications);
                            }
                        }, this);
                    }
                    if (notifications.length > 0) {
                        var duration = 8000;
                        if (notifications.length > 1) {
                            duration = 12000;
                        }
                        this.website.notifier.empty();
                        notifications.each(function(notification) {
                            if (Object.getFromPath(notification, 'type') && Object.getFromPath(notification, 'title') && Object.getFromPath(notification, 'msg')) {
                                var options = Object.merge(Object.clone(this.website.options.notifierOptions), {
                                    duration: duration,
                                    hideOnClick: false,
                                    classes: {
                                        item: 'tpl-roar tpl-roar-' + notification.type
                                    }
                                });
                                this.website.notify(notification.title, notification.msg, options);
                            }
                        }, this);
                    }
                    if (Object.getFromPath(response, 'app_error') && Object.getFromPath(response, 'app_error') == true) {
                        var title = __('core', 'Error');
                        var msg = __('core', 'An error has occurred while communicating with the server. Please try again.');
                        if (Object.getFromPath(response, 'app_title') && Object.getFromPath(response, 'app_title').length > 0) {
                            title = Object.getFromPath(response, 'app_title');
                        }
                        if (Object.getFromPath(response, 'app_msg') && Object.getFromPath(response, 'app_msg').length > 0) {
                            msg = Object.getFromPath(response, 'app_msg');
                        }
                        new IWindow.Error(title, msg, {
                            pin: true,
                            onShow: function() {
                                this.element.getElement('input[type=button]').focus();
                            }
                        });
                    }
                    return;
                }
                new IWindow.Error(__('core', 'Error'), __('core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later."), {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    }
                });
            }.bind(this)
        });
    },
    deleteCartProductLinkClick: function(link, ev) {
        var form = link.getParent('form');
        var parsed = new URI(link.get('href'));
        var data = (parsed ? parsed.get('data') : null);
        var action = (data && typeof(data.action) != 'undefined' ? data.action : false);
        var id = (data && typeof(data.id) != 'undefined' ? data.id : false);
        if (!form || !action || !id) {
            return;
        }
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        var elementId = (this.element ? this.element.get('id') : null);
        var widgetsToRefresh = this.page.getCartWidgetsToRefresh([this.id]);
        this.website.request({
            url: '/ajax_core_widgets_ui/request/',
            data: {
                'data[Request][widget_id]': this.id,
                'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                'data[Request][refresh_widgets_id]': widgetsToRefresh,
                'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
                'data[Request][render]': 1,
                'data[Request][process]': 1,
                'data[Widget][id]': this.id,
                'data[Widget][action]': action,
                'data[CartProduct][id]': id
            },
            onRequest: function() {
                this.setBusy(true);
                this.website.websiteRequest();
            }.bind(this),
            onFailure: function() {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onError: function(text, error) {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onSuccess: function(response, options) {
                this.setBusy(false);
                if (this.website.websiteRequestSuccess(response, options) == false) {
                    return;
                }
                if (Object.getFromPath(response, 'widget_content') && Object.getFromPath(response, 'widget_content').length > 0 && Object.getFromPath(response, 'css_assets') && Object.getFromPath(response, 'js_assets')) {
                    this.page.queueWidgetInsert(elementId, response, true);
                    var notifications = [];
                    if (Object.getFromPath(response, 'notifications') && response.notifications.length > 0) {
                        notifications = response.notifications;
                    }
                    if (Object.getFromPath(response, 'widgets') && Object.getLength(response.widgets) > 0) {
                        Object.each(response.widgets, function(widget, elementId) {
                            if (this.website.isError(widget) == true || this.website.preprocessResponse(widget) == false) {
                                return;
                            }
                            this.page.queueWidgetInsert(elementId, widget, true);
                            if (Object.getFromPath(widget, 'notifications') && widget.notifications.length > 0) {
                                notifications.append(widget.notifications);
                            }
                        }, this);
                    }
                    if (notifications.length > 0) {
                        this.website.notifier.empty();
                        var duration = 5000;
                        notifications.each(function(notification) {
                            if (Object.getFromPath(notification, 'type') && Object.getFromPath(notification, 'title') && Object.getFromPath(notification, 'msg')) {
                                var options = Object.merge(Object.clone(this.website.options.notifierOptions), {
                                    duration: duration,
                                    hideOnClick: false,
                                    classes: {
                                        item: 'tpl-roar tpl-roar-' + notification.type
                                    }
                                });
                                this.website.notify(notification.title, notification.msg, options);
                            }
                        }, this);
                    }
                    if (Object.getFromPath(response, 'app_error') && Object.getFromPath(response, 'app_error') == true) {
                        var title = __('core', 'Error');
                        var msg = __('core', 'An error has occurred while communicating with the server. Please try again.');
                        if (Object.getFromPath(response, 'app_title') && Object.getFromPath(response, 'app_title').length > 0) {
                            title = Object.getFromPath(response, 'app_title');
                        }
                        if (Object.getFromPath(response, 'app_msg') && Object.getFromPath(response, 'app_msg').length > 0) {
                            msg = Object.getFromPath(response, 'app_msg');
                        }
                        new IWindow.Error(title, msg, {
                            pin: true,
                            onShow: function() {
                                this.element.getElement('input[type=button]').focus();
                            }
                        });
                    }
                    return;
                }
                new IWindow.Error(__('core', 'Error'), __('core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later."), {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    }
                });
            }.bind(this)
        });
    },
    showProductDetailsTab: function(options) {
        var tab = new URI(this.page.options.page.here_url).getData('tab') || false;
        var idx = false;
        var tabs = this.element.getElements('.tpl-tabs li');
        var tabContents = this.element.getElements('.tpl-product-details .tpl-tab-content');
        if (tabs.length == 0 || tabContents.length == 0) {
            return;
        }
        if (tab !== false) {
            var re = 'tpl-' + tab;
            tabs.each(function(t, i) {
                if (new RegExp(re, 'i').test(t.get('class'))) {
                    idx = i;
                }
            });
        } else {
            idx = 0;
        }
        if (idx === false) {
            return;
        }
        tabContents.hide();
        tabs.each(function(tab) {
            if (tab.hasClass('tpl-active')) {
                tab.removeClass('tpl-active');
            }
        });
        if (!tabs[idx].hasClass('tpl-active')) {
            tabs[idx].addClass('tpl-active');
        }
        tabContents[idx].setStyles({
            display: null
        });
        if (Browser.ie && Math.round(Browser.version) < 8) {
            Browser.redraw();
        }
        var tabsEl = this.element.getElement('.tpl-tabs');
        if (tabsEl) {
            var scrollY = this.scrollableElement.getScroll().y;
            var viewportSize = this.viewportElement.getSize();
            var coords = null;
            if (this.admin || this.preview) {
                coords = tabsEl.getRelativeCoordinates($('PageWrapper'));
            } else {
                coords = tabsEl.getCoordinates();
            }
            if (scrollY > coords.top) {
                this.scrollFx.start(0, coords.top - 10);
            }
        }
        this.elementResized();
    },
    getProductReviews: function(options) {
        var data = {
            'data[Request][url]': this.page.options.page.here_url
        };
        if (options && typeof(options.data) != 'undefined') {
            data = Object.merge(data, options.data);
        }
        var options = Object.merge({
            onInit: function(widget) {
                var tabsEl = widget.element.getElement('.tpl-tabs');
                if (tabsEl) {
                    var scrollY = widget.scrollableElement.getScroll().y;
                    var viewportSize = widget.viewportElement.getSize();
                    var coords = null;
                    if (widget.admin || widget.preview) {
                        coords = tabsEl.getRelativeCoordinates($('PageWrapper'));
                    } else {
                        coords = tabsEl.getCoordinates();
                    }
                    if (scrollY > coords.top) {
                        widget.scrollFx.start(0, coords.top - 10);
                    }
                }
            }
        }, options);
        this.GETRequest(data, options);
    },
    numberFormat: function(number, decimals, dec_point, thousands_sep) {
        number = (number + '').replace(/[^0-9+\-Ee.]/g, '');
        var n = !isFinite(+number) ? 0 : +number,
            prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
            sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
            dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
            s = '',
            toFixedFix = function(n, prec) {
                var k = Math.pow(10, prec);
                return '' + Math.round(n * k) / k;
            };
        s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
        if (s[0].length > 3) {
            s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
        }
        if ((s[1] || '').length < prec) {
            s[1] = s[1] || '';
            s[1] += new Array(prec - s[1].length + 1).join('0');
        }
        return s.join(dec);
    }
});
var BottomMenuWidget = new Class({
    Extends: Widget,
    options: {
        name: 'Bottom menu',
        short_name: 'bottom_menu',
        editable: true
    },
    initVariables: function() {
        this.menu = null;
    },
    attach: function() {
        this.parent();
        if (this.element.hasClass('tpl-bottom-menu-multi-level')) {
            this.attachDropdownMenu();
        }
    },
    detach: function() {
        this.parent();
        if (this.element.hasClass('tpl-bottom-menu-multi-level')) {
            this.detachDropdownMenu();
        }
    },
    attachDropdownMenu: function() {
        if (this.menu) {
            this.menu.attach();
        } else {
            this.page.requirePluginAssets({
                js: ['menumatic.min.js'],
                css: ['menumatic.css'],
                onLoad: function() {
                    var list = this.element.getElement('.tpl-main-menu ul');
                    if (list) {
                        this.menu = new MenuMatic(list, {
                            hideDelay: 1000,
                            container: $('PageContent'),
                            positionTarget: $('PageWrapper'),
                            scrollableElement: (this.admin || this.preview ? $('PageWrapper') : window),
                            viewportElement: (this.admin || this.preview ? $('PageWrapper') : document),
                            direction: {
                                x: 'right',
                                y: 'up'
                            }
                        });
                    }
                }.bind(this)
            });
        }
    },
    detachDropdownMenu: function() {
        if (this.menu) {
            this.menu.detach();
        }
    },
    editWidgetContent: function() {
        if (this.options.editable == false) {
            return;
        }
        new MenuEditorWindowUI({
            menuEditorOptions: {
                navigation: {
                    currentPage: Object.getFromPath(this.page, 'id')
                },
                view: {
                    showMenuVisibility: PG_BOTTOM_MENU
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website);
    }
});
var CalendarWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Calendar',
        short_name: 'calendar',
        dropdown: true
    },
    initVariables: function() {
        this.calendar = null;
    },
    attach: function() {
        this.parent();
        if (this.calendar) {
            this.calendar.attach();
        } else {
            this.page.requirePluginAssets({
                js: ['calendar.min.js'],
                onLoad: function() {
                    if (typeof(Calendar) != 'undefined') {
                        var element = this.element.getElement('.tpl-calendar');
                        if (element) {
                            var options = {
                                relativeParentElement: $('PageContent'),
                                scrollableElement: this.scrollableElement,
                                onResize: this.elementResized.bind(this)
                            };
                            if (element.get('data-options') && element.get('data-options').length > 0) {
                                options = Object.merge(options, JSON.decode(element.get('data-options')));
                            }
                            this.calendar = new Calendar(element, options);
                        }
                    }
                }.bind(this)
            });
        }
    },
    detach: function() {
        this.parent();
        if (this.calendar) {
            this.calendar.detach();
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    documentResized: function() {
        if (this.calendar) {
            this.calendar.reinitialize();
            Object.each(this.calendar.tooltips, function(t, k) {
                if (t.displayed == true) {
                    var cell = this.calendar.element.getElement('.' + this.calendar.options.classes.dayScheduled.replace(/ /gi, '.') + '[data-day=' + k + ']')
                    if (cell) {
                        this.calendar.positionTooltip(t, cell);
                    }
                }
            }, this);
        }
    },
    elementMoved: function(prevCol, newCol) {
        if (this.calendar) {
            this.calendar.reinitialize();
        }
    },
    startDrag: function(el, ev) {
        this.parent(el, ev);
        if (this.calendar) {
            this.calendar.hideAllTooltips();
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new CalendarWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var CHECKOUT_STYLE_MULTI_STEP_ONE_PAGE = 1;
var CHECKOUT_STYLE_MULTI_STEP = 2;
var CHECKOUT_STYLE_KLARNA_CHECKOUT = 4;
var CHECKOUT_ACCOUNT_TYPE_LOGGED_IN = -1;
var CHECKOUT_ACCOUNT_TYPE_GUEST = 1;
var CHECKOUT_ACCOUNT_TYPE_EXISTING_ACCOUNT = 2;
var CHECKOUT_ACCOUNT_TYPE_NEW_ACCOUNT = 3;
var CheckoutFormWidget = new Class({
    Extends: LayoutWidget,
    Implements: WebshopWidget,
    options: {
        name: 'Checkout form',
        short_name: 'checkout_form',
        dropdown: true
    },
    initVariables: function() {
        this.parent();
        this.scrollDelta = 5;
        this.viewType = false;
        this.currentSection = this.element.getElement('.tpl-section-content.tpl-current');
        var view = this.element.getElement('.tpl-view-content');
        if (view) {
            switch (true) {
                case (view.hasClass('tpl-multi-step-one-page-checkout')):
                    {
                        this.viewType = CHECKOUT_STYLE_MULTI_STEP_ONE_PAGE;this.scrollDelta = 0;
                        break;
                    }
                case (view.hasClass('tpl-multi-step-checkout')):
                    {
                        this.viewType = CHECKOUT_STYLE_MULTI_STEP;
                        break;
                    }
                case (view.hasClass('tpl-klarna-checkout')):
                    {
                        this.viewType = CHECKOUT_STYLE_KLARNA_CHECKOUT;this.form = this.element.getElement('.tpl-checkout-details-form');this.validator = null;
                        break;
                    }
            }
        }
        this.subtotalPrice = 0.00;
        this.discountAmount = 0.00;
        this.shippingPrice = 0.00;
        this.bShortPrice = false;
        this.decimalPoint = '.';
        this.thousandsSeparator = '';
        this.currencySymbol = null;
        var summaryForm = this.element.getElement('.tpl-summary-form');
        if (summaryForm) {
            var subtotalEl = summaryForm.getElement('.tpl-products-price');
            var discountEl = summaryForm.getElement('.tpl-discount-amount');
            var shippingEl = summaryForm.getElement('.tpl-shipping-price');
            var shortPriceEl = summaryForm.getElement('.tpl-short-price');
            var decimalPointEl = summaryForm.getElement('.tpl-decimal-point');
            var thousandsSeparatorEl = summaryForm.getElement('.tpl-thousands-separator');
            var currencySymbolEl = summaryForm.getElement('.tpl-currency');
            if (subtotalEl) {
                this.subtotalPrice = subtotalEl.get('value');
            }
            if (discountEl) {
                this.discountAmount = (parseFloat(discountEl.get('value')) > 0 ? '-' + discountEl.get('value') : discountEl.get('value'));
            }
            if (shippingEl) {
                this.shippingPrice = shippingEl.get('value');
            }
            if (shortPriceEl) {
                this.bShortPrice = (parseInt(shortPriceEl.get('value')) > 0 ? true : false);
            }
            if (decimalPointEl) {
                this.decimalPoint = decimalPointEl.get('value');
            }
            if (thousandsSeparatorEl) {
                this.thousandsSeparator = thousandsSeparatorEl.get('value');
            }
            if (currencySymbolEl) {
                this.currencySymbol = currencySymbolEl.get('value');
            }
        }
    },
    attach: function() {
        this.parent();
        switch (this.viewType) {
            case CHECKOUT_STYLE_MULTI_STEP_ONE_PAGE:
            case CHECKOUT_STYLE_MULTI_STEP:
                {
                    this.attachSectionHeaders();
                    if (this.currentSection) {
                        this.attachStepSection(this.currentSection);
                    }
                    break;
                }
            case CHECKOUT_STYLE_KLARNA_CHECKOUT:
                {
                    var container = this.element.getElement('[data-gui-snippet]');
                    if (container) {
                        var content = container.get('data-gui-snippet');
                        var scripts = '';
                        content = content.replace(/<script[^>]*>([\s\S]*?)<\/script>/gi, function(all, code) {
                            scripts += code + '\n';
                            return '';
                        });
                        container.set('data-gui-snippet', null).set('html', content);
                        Browser.exec(scripts);
                    }
                    this.attachKlarnaCheckoutForm();
                    break;
                }
        }
    },
    attachSectionHeaders: function() {
        this.element.getElements('.tpl-section-header .tpl-edit-section').each(function(el) {
            var event = this.editSectionLinkClick.bind(this, el);
            el.store('event:editSectionLinkClick', event).addEvent('click', event);
        }, this);
    },
    attachStepSection: function(section) {
        switch (true) {
            case (section.hasClass('tpl-account')):
                {
                    var wrappers = section.getElements('.tpl-form-wrapper').filter(function(el) {
                        return el.isDisplayed();
                    });
                    var visible = (wrappers.length > 0 ? wrappers.shift() : false);
                    if (visible) {
                        switch (true) {
                            case (visible.hasClass('tpl-logged-in-form-wrapper')):
                                {
                                    var form = visible.getElement('form');
                                    if (form) {
                                        this.attachAccountStepSimpleForm(form);
                                    }
                                    break;
                                }
                            case (visible.hasClass('tpl-guest-form-wrapper')):
                                {
                                    var form = visible.getElement('form');
                                    if (form) {
                                        this.attachAccountStepSimpleForm(form);
                                    }
                                    break;
                                }
                            case (visible.hasClass('tpl-login-form-wrapper')):
                                {
                                    var form = visible.getElement('form');
                                    if (form) {
                                        this.attachAccountStepLoginForm(form);
                                    }
                                    break;
                                }
                            case (visible.hasClass('tpl-registration-form-wrapper')):
                                {
                                    var form = visible.getElement('form');
                                    if (form) {
                                        this.attachAccountStepRegistrationForm(form);
                                    }
                                    break;
                                }
                        }
                    }
                    break;
                }
            case (section.hasClass('tpl-address')):
                {
                    var form = section.getElement('form');
                    if (form) {
                        this.attachAddressStepForm(form);
                    }
                    break;
                }
            case (section.hasClass('tpl-shipping')):
                {
                    var form = section.getElement('form');
                    if (form) {
                        this.attachShippingStepForm(form);
                    }
                    break;
                }
            case (section.hasClass('tpl-payment')):
                {
                    var form = section.getElement('form');
                    if (form) {
                        this.attachPaymentStepForm(form);
                    }
                    break;
                }
            case (section.hasClass('tpl-review')):
                {
                    var form = section.getElement('form');
                    if (form) {
                        this.attachReviewStepForm(form);
                    }
                    break;
                }
        }
    },
    attachAccountStepSimpleForm: function(form) {
        if (form.validator) {
            form.validator.attach();
        } else if (typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            var at = form.getElements('input[type=radio][name="data[Checkout][account][account_type]"]');
            if (at && at.length > 0) {
                at = at.shift();
                customElAlerts[at.get('id')] = __('form_check', 'Please select the account type.');
            }
            var msgBox = form.getElement('.tpl-message');
            var validatorOptions = this.getValidatorOptions({
                onWidgetInit: function(widget) {
                    if (widget.currentSection) {
                        widget.updateOrderSummary();
                        var top = widget.currentSection;
                        var bottom = widget.currentSection;
                        switch (widget.viewType) {
                            case CHECKOUT_STYLE_MULTI_STEP_ONE_PAGE:
                                {
                                    top = widget.currentSection.getPrevious('.tpl-section-header');
                                    break;
                                }
                        }
                        widget.scrollToSections(top, bottom);
                    }
                }
            });
            var options = Object.merge(validatorOptions, {
                submitByAjax: true,
                ajaxSubmitAction: '/ajax_core_widgets_ui/request/',
                ajaxData: {
                    'data[Request][widget_id]': this.id,
                    'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                    'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
                    'data[Request][render]': 1,
                    'data[Request][process]': 1
                },
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                }
            });
            form.validator = new FormCheck(form, options);
            Object.each(form.validator.options.alerts, function(msg, idx) {
                form.validator.options.alerts[idx] = __('form_check', msg);
            });
        }
        form.getElements('input[type=radio][name="data[Checkout][account][account_type]"]').each(function(el) {
            var event = this.checkoutAccountTypeRadioChange.bind(this, el);
            el.store('event:checkoutAccountTypeRadioChange', event).addEvent('change', event);
        }, this);
    },
    attachAccountStepLoginForm: function(form) {
        if (form.validator) {
            form.validator.attach();
        } else if (typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            customElAlerts['UserEmail_' + this.id] = __('form_check', 'Please enter a valid e-mail.');
            customElAlerts['UserPasswd_' + this.id] = __('form_check', 'Please enter a password containing at least 5 characters.');
            var msgBox = form.getElement('.tpl-message');
            var options = Object.merge(this.getValidatorOptions(), {
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                }
            });
            form.validator = new FormCheck(form, options);
            Object.each(form.validator.options.alerts, function(msg, idx) {
                form.validator.options.alerts[idx] = __('form_check', msg);
            });
        }
        form.getElements('input[type=radio][name="data[Checkout][account][account_type]"]').each(function(el) {
            var event = this.checkoutAccountTypeRadioChange.bind(this, el);
            el.store('event:checkoutAccountTypeRadioChange', event).addEvent('change', event);
        }, this);
    },
    attachAccountStepRegistrationForm: function(form) {
        if (form.validator) {
            form.validator.attach();
        } else if (typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            customElAlerts['CheckoutAccountNewUserEmail_' + this.id] = __('form_check', 'Please enter a valid e-mail.');
            customElAlerts['CheckoutAccountNewUserNewPasswd_' + this.id] = __('form_check', 'Please enter a password containing at least 5 characters.');
            customElAlerts['CheckoutAccountNewUserConfirmNewPasswd_' + this.id] = __('form_check', 'The password does not match the confirmation password.');
            customElAlerts['CheckoutAccountNewUserCaptchaCode_' + this.id] = __('form_check', 'Please enter the text from the picture.');
            var msgBox = form.getElement('.tpl-message');
            var validatorOptions = this.getValidatorOptions({
                onWidgetInit: function(widget) {
                    if (widget.currentSection) {
                        widget.updateOrderSummary();
                        var top = widget.currentSection;
                        var bottom = widget.currentSection;
                        switch (widget.viewType) {
                            case CHECKOUT_STYLE_MULTI_STEP_ONE_PAGE:
                                {
                                    top = widget.currentSection.getPrevious('.tpl-section-header');
                                    break;
                                }
                        }
                        widget.scrollToSections(top, bottom);
                    }
                }
            });
            var options = Object.merge(validatorOptions, {
                submitByAjax: true,
                ajaxSubmitAction: '/ajax_core_widgets_ui/request/',
                ajaxData: {
                    'data[Request][widget_id]': this.id,
                    'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                    'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
                    'data[Request][render]': 1,
                    'data[Request][process]': 1
                },
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                }
            });
            form.validator = new FormCheck(form, options);
            Object.each(form.validator.options.alerts, function(msg, idx) {
                form.validator.options.alerts[idx] = __('form_check', msg);
            });
        }
        form.getElements('input[type=radio][name="data[Checkout][account][account_type]"]').each(function(el) {
            var event = this.checkoutAccountTypeRadioChange.bind(this, el);
            el.store('event:checkoutAccountTypeRadioChange', event).addEvent('change', event);
        }, this);
        var link = form.getElement('.tpl-refresh-captcha');
        if (link) {
            var event = this.refreshCaptchaClick.bind(this, link);
            link.store('event:refreshCaptchaClick', event).addEvent('click', event);
        }
    },
    attachAddressStepForm: function(form) {
        if (form.validator) {
            form.validator.attach();
        } else if (typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            var at = form.getElements('input[type=radio][name="data[Checkout][address][account_type]"]');
            if (at && at.length > 0) {
                at = at.shift();
                customElAlerts[at.get('id')] = __('form_check', 'Please select the account type.');
            }
            customElAlerts['CheckoutAddressBillingCompanyName_' + this.id] = __('form_check', 'Please enter a valid company name.');
            customElAlerts['CheckoutAddressBillingFirstName_' + this.id] = __('form_check', 'Please enter a valid first name.');
            customElAlerts['CheckoutAddressBillingLastName_' + this.id] = __('form_check', 'Please enter a valid last name.');
            customElAlerts['CheckoutAddressBillingStreet_' + this.id] = __('form_check', 'Please enter a valid street address.');
            customElAlerts['CheckoutAddressBillingPostalCode_' + this.id] = __('form_check', 'Please enter a valid postal code.');
            customElAlerts['CheckoutAddressBillingTown_' + this.id] = __('form_check', 'Please enter a valid town.');
            customElAlerts['CheckoutAddressBillingCountryId_' + this.id] = __('form_check', 'Please select a country.');
            customElAlerts['CheckoutAddressBillingEmail_' + this.id] = __('form_check', 'Please enter a valid e-mail.');
            customElAlerts['CheckoutAddressBillingRegularPhone_' + this.id] = __('form_check', 'Please enter a valid regular phone number.');
            customElAlerts['CheckoutAddressBillingMobilePhone_' + this.id] = __('form_check', 'Please enter a valid mobile phone number.');
            customElAlerts['CheckoutAddressBillingVatNumber_' + this.id] = __('form_check', 'Please enter a valid VAT identification number.');
            customElAlerts['CheckoutAddressBillingCompanyName_' + this.id] = __('form_check', 'Please enter a valid company name.');
            customElAlerts['CheckoutAddressShippingFirstName_' + this.id] = __('form_check', 'Please enter a valid first name.');
            customElAlerts['CheckoutAddressShippingLastName_' + this.id] = __('form_check', 'Please enter a valid last name.');
            customElAlerts['CheckoutAddressShippingStreet_' + this.id] = __('form_check', 'Please enter a valid street address.');
            customElAlerts['CheckoutAddressShippingPostalCode_' + this.id] = __('form_check', 'Please enter a valid postal code.');
            customElAlerts['CheckoutAddressShippingTown_' + this.id] = __('form_check', 'Please enter a valid town.');
            customElAlerts['CheckoutAddressShippingCountryId_' + this.id] = __('form_check', 'Please select a country.');
            customElAlerts['CheckoutAddressShippingRegularPhone_' + this.id] = __('form_check', 'Please enter a valid regular phone number.');
            customElAlerts['CheckoutAddressShippingMobilePhone_' + this.id] = __('form_check', 'Please enter a valid mobile phone number.');
            var msgBox = form.getElement('.tpl-message');
            var validatorOptions = this.getValidatorOptions({
                onWidgetInit: function(widget) {
                    if (widget.currentSection) {
                        widget.updateOrderSummary();
                        var top = widget.currentSection;
                        var bottom = widget.currentSection;
                        switch (widget.viewType) {
                            case CHECKOUT_STYLE_MULTI_STEP_ONE_PAGE:
                                {
                                    top = widget.currentSection.getPrevious('.tpl-section-header');
                                    break;
                                }
                        }
                        widget.scrollToSections(top, bottom);
                    }
                }
            });
            var options = Object.merge(validatorOptions, {
                submitByAjax: true,
                ajaxSubmitAction: '/ajax_core_widgets_ui/request/',
                ajaxData: {
                    'data[Request][widget_id]': this.id,
                    'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                    'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
                    'data[Request][render]': 1,
                    'data[Request][process]': 1
                },
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                }
            });
            form.validator = new FormCheck(form, options);
            Object.each(form.validator.options.alerts, function(msg, idx) {
                form.validator.options.alerts[idx] = __('form_check', msg);
            });
        }
        form.getElements('input[type=radio][name="data[Checkout][address][account_type]"]').each(function(input) {
            var event = this.accountTypeRadioChange.bind(this, input);
            input.store('event:accountTypeRadioChange', event).addEvent('click', event);
        }, this);
        form.getElements('input[type=radio][name="data[Checkout][address][shipping_use_billing]"]').each(function(input) {
            var event = this.useBillingAddressRadioChange.bind(this, input);
            input.store('event:useBillingAddressRadioChange', event).addEvent('click', event);
        }, this);
        var selectedAccountTypeInput = form.getElement('input[name="data[Checkout][address][account_type]"]:checked');
        var selectedUseBillingInput = form.getElement('input[name="data[Checkout][address][shipping_use_billing]"]:checked');
        if (selectedAccountTypeInput) {
            var type = parseInt(selectedAccountTypeInput.get('value'));
            switch (type) {
                case ACCOUNT_TYPE_COMPANY:
                    {
                        this.showCompanyInputs(form);this.attachCompanyInputs(form);
                        break;
                    }
                default:
                    {
                        this.hideCompanyInputs(form);
                        break;
                    }
            }
            this.elementResized();
        }
        if (selectedUseBillingInput) {
            var bUseBillingAddress = (parseInt(selectedUseBillingInput.get('value')) == 1 ? true : false);
            if (bUseBillingAddress == true) {
                this.disableShippingAddressInputs(form);
            } else {
                this.enableShippingAddressInputs(form);
                this.attachShippingAddressInputs(form);
            }
        }
        form.getElements('.tpl-back a').each(function(el) {
            var event = this.editSectionLinkClick.bind(this, el);
            el.store('event:editSectionLinkClick', event).addEvent('click', event);
        }, this);
    },
    attachCompanyInputs: function(form) {
        if (form.validator) {
            var v = form.validator.validations;
            form.getElements('input.tpl-company-required').each(function(input) {
                if (v.contains(input) && typeof(input.validation) != 'undefined' && !input.validation.contains('required')) {
                    input.validation.push('required');
                }
            });
            form.validator.reinitialize();
        }
    },
    attachShippingAddressInputs: function(form) {
        var container = form.getElement('.tpl-shipping-address-rows');
        if (container && form.validator) {
            var v = form.validator.validations;
            var c = "validate['required']";
            container.getElements('input[type=text].tpl-required,select.tpl-required').each(function(input) {
                switch (input.tagName.toLowerCase()) {
                    case 'input':
                        {
                            if (v.contains(input) && typeof(input.validation) != 'undefined' && !input.validation.contains('required')) {
                                input.validation.push('required');
                            }
                            break;
                        }
                    case 'select':
                        {
                            if (!input.hasClass(c)) {
                                input.addClass(c);
                            }
                            form.validator.registerElement(input);
                            break;
                        }
                }
            });
            form.validator.reinitialize();
        }
    },
    attachShippingStepForm: function(form) {
        if (form.validator) {
            form.validator.attach();
        } else if (typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            var radio = form.getElement('input[type=radio][name="data[Checkout][shipping][webshop_shipping_option_id]"]');
            if (radio) {
                customElAlerts[radio.get('id')] = __('form_check', 'Please select a shipping option.');
            }
            var msgBox = form.getElement('.tpl-message');
            var validatorOptions = this.getValidatorOptions({
                onWidgetInit: function(widget) {
                    if (widget.currentSection) {
                        widget.updateOrderSummary();
                        var top = widget.currentSection;
                        var bottom = widget.currentSection;
                        switch (widget.viewType) {
                            case CHECKOUT_STYLE_MULTI_STEP_ONE_PAGE:
                                {
                                    top = widget.currentSection.getPrevious('.tpl-section-header');
                                    break;
                                }
                        }
                        widget.scrollToSections(top, bottom);
                    }
                }
            });
            var options = Object.merge(validatorOptions, {
                submitByAjax: true,
                ajaxSubmitAction: '/ajax_core_widgets_ui/request/',
                ajaxData: {
                    'data[Request][widget_id]': this.id,
                    'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                    'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
                    'data[Request][render]': 1,
                    'data[Request][process]': 1
                },
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                },
                onInputValid: function(input) {
                    this.form.getElements('input[type=radio][name="' + input.get('name') + '"]').each(function(el) {
                        var row = el.getParent('.tpl-form-row');
                        if (row && row.hasClass('tpl-invalid')) {
                            row.removeClass('tpl-invalid');
                        }
                    });
                },
                onInputInvalid: function(input) {
                    if (this.options.display.errorsListContainer && this.options.display.errorsListContainer.hasClass('tpl-success')) {
                        this.options.display.errorsListContainer.removeClass('tpl-success');
                        this.options.display.errorsListContainer.addClass('tpl-error');
                    }
                    this.form.getElements('input[type=radio][name="' + input.get('name') + '"]').each(function(el) {
                        var row = el.getParent('.tpl-form-row');
                        if (row && !row.hasClass('tpl-invalid')) {
                            row.addClass('tpl-invalid');
                        }
                    });
                    var row = input.getParent('.tpl-form-row');
                    if (row && !row.hasClass('tpl-invalid')) {
                        row.addClass('tpl-invalid');
                    }
                    var focused = $(document.body).getElement('*:focus');
                    if (focused && focused != input) {
                        focused.blur();
                    }
                }
            });
            form.validator = new FormCheck(form, options);
            Object.each(form.validator.options.alerts, function(msg, idx) {
                form.validator.options.alerts[idx] = __('form_check', msg);
            });
        }
        form.getElements('input[type=radio][name="data[Checkout][shipping][webshop_shipping_option_id]"]').each(function(el) {
            var event = this.shippingOptionRadioChange.bind(this, el);
            el.store('event:shippingOptionRadioChange', event).addEvent('change', event);
        }, this);
        form.getElements('.tpl-back a').each(function(el) {
            var event = this.editSectionLinkClick.bind(this, el);
            el.store('event:editSectionLinkClick', event).addEvent('click', event);
        }, this);
        var selectedShippingOptionInput = form.getElement('input[name="data[Checkout][shipping][webshop_shipping_option_id]"]:checked');
        if (selectedShippingOptionInput) {
            var handler = selectedShippingOptionInput.getParent().getElement('.tpl-shipping-handler');
            if (handler) {
                this.attachShippingHandlerInputs(handler);
            }
        }
    },
    attachShippingHandlerInputs: function(handler) {
        var form = (handler ? handler.getParent('form') : null);
        if (form && form.validator) {
            var v = form.validator.validations;
            var c = "validate['required']";
            handler.getElements('input[type=text].tpl-required,select.tpl-required').each(function(input) {
                switch (input.tagName.toLowerCase()) {
                    case 'input':
                        {
                            if (v.contains(input) && typeof(input.validation) != 'undefined' && !input.validation.contains('required')) {
                                input.validation.push('required');
                            } else if (!v.contains(input)) {
                                if (!input.hasClass(c)) {
                                    input.addClass(c);
                                }
                                form.validator.registerElement(input);
                            }
                            break;
                        }
                    case 'select':
                        {
                            if (!input.hasClass(c)) {
                                input.addClass(c);
                            }
                            form.validator.registerElement(input);
                            break;
                        }
                }
                if (input.get('data-validation-message') && input.get('id')) {
                    form.validator.options.display.customElAlerts[input.get('id')] = input.get('data-validation-message');
                }
            });
            form.validator.reinitialize();
        }
        if (handler) {
            handler.getElements('.tpl-parcel-locker-chooser').each(function(b) {
                var input = b.getParent().getElement('input[type="hidden"]');
                var label = b.getPrevious('.tpl-form-input-value');
                var event = this.parcelLockerChooserClick.bind(this, b, input, label);
                b.store('event:parcelLockerChooserClick', event).addEvent('click', event);
            }, this);
        }
    },
    attachPaymentStepForm: function(form) {
        if (form.validator) {
            form.validator.attach();
        } else if (typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            var radio = form.getElement('input[type=radio][name="data[Checkout][payment][webshop_payment_method_id]"]');
            if (radio) {
                customElAlerts[radio.get('id')] = __('form_check', 'Please select a payment method.');
            }
            var msgBox = form.getElement('.tpl-message');
            var validatorOptions = this.getValidatorOptions({
                onWidgetInit: function(widget) {
                    if (widget.currentSection) {
                        widget.updateOrderSummary();
                        var top = widget.currentSection;
                        var bottom = widget.currentSection;
                        switch (widget.viewType) {
                            case CHECKOUT_STYLE_MULTI_STEP_ONE_PAGE:
                                {
                                    top = widget.currentSection.getPrevious('.tpl-section-header');
                                    break;
                                }
                        }
                        widget.scrollToSections(top, bottom);
                    }
                }
            });
            var options = Object.merge(validatorOptions, {
                submitByAjax: true,
                ajaxSubmitAction: '/ajax_core_widgets_ui/request/',
                ajaxData: {
                    'data[Request][widget_id]': this.id,
                    'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                    'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
                    'data[Request][render]': 1,
                    'data[Request][process]': 1
                },
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                },
                onInputValid: function(input) {
                    this.form.getElements('input[type=radio][name="' + input.get('name') + '"]').each(function(el) {
                        var row = el.getParent('.tpl-form-row');
                        if (row && row.hasClass('tpl-invalid')) {
                            row.removeClass('tpl-invalid');
                        }
                    });
                },
                onInputInvalid: function(input) {
                    if (this.options.display.errorsListContainer && this.options.display.errorsListContainer.hasClass('tpl-success')) {
                        this.options.display.errorsListContainer.removeClass('tpl-success');
                        this.options.display.errorsListContainer.addClass('tpl-error');
                    }
                    this.form.getElements('input[type=radio][name="' + input.get('name') + '"]').each(function(el) {
                        var row = el.getParent('.tpl-form-row');
                        if (row && !row.hasClass('tpl-invalid')) {
                            row.addClass('tpl-invalid');
                        }
                    });
                    var focused = $(document.body).getElement('*:focus');
                    if (focused && focused != input) {
                        focused.blur();
                    }
                }
            });
            form.validator = new FormCheck(form, options);
            Object.each(form.validator.options.alerts, function(msg, idx) {
                form.validator.options.alerts[idx] = __('form_check', msg);
            });
        }
        form.getElements('input[type=radio][name="data[Checkout][payment][webshop_payment_method_id]"]').each(function(el) {
            var event = this.paymentMethodRadioChange.bind(this, el);
            el.store('event:paymentMethodRadioChange', event).addEvent('change', event);
        }, this);
        form.getElements('.tpl-back a').each(function(el) {
            var event = this.editSectionLinkClick.bind(this, el);
            el.store('event:editSectionLinkClick', event).addEvent('click', event);
        }, this);
    },
    attachReviewStepForm: function(form) {
        if (form.validator) {
            form.validator.attach();
        } else if (typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            var maxCommentLength = 10000;
            var notesInput = form.getElement('#CheckoutReviewCustomerNotes_' + this.id);
            if (notesInput) {
                notesInput.getProperty('class').split(' ').each(function(classX) {
                    if (classX.match(/^validate(\[.+\])$/)) {
                        var validators = eval(classX.match(/^validate(\[.+\])$/)[1]);
                        for (var i = 0; i < validators.length; i++) {
                            ruleMethod = validators[i].split('[')[0];
                            if (ruleMethod == 'length') {
                                ruleArgs = eval(validators[i].match(/^.+(\[.+\])$/)[1].replace(/([A-Z0-9\._-]+)/i, "'$1'"));
                                if (ruleArgs.length == 1) {
                                    maxCommentLength = ruleArgs[0];
                                }
                            }
                        }
                    }
                });
            }
            customElAlerts['CheckoutReviewCustomerNotes_' + this.id] = __('form_check', 'The length of the comment is incorrect, it must be at max %0.').replace('%0', maxCommentLength);
            var self = this;
            var msgBox = form.getElement('.tpl-message');
            var validatorOptions = this.getValidatorOptions({
                onRequestComplete: function(response, widget) {
                    if (response && typeof(response.refresh_cart) != 'undefined' && response.refresh_cart == true) {
                        self.page.refreshCart({
                            exclude: [widget.id]
                        });
                    }
                },
                onWidgetInit: function(widget) {
                    if (widget.currentSection) {
                        widget.updateOrderSummary();
                        var top = widget.currentSection;
                        var bottom = widget.currentSection;
                        switch (widget.viewType) {
                            case CHECKOUT_STYLE_MULTI_STEP_ONE_PAGE:
                                {
                                    top = widget.currentSection.getPrevious('.tpl-section-header');
                                    break;
                                }
                        }
                        widget.scrollToSections(top, bottom);
                    }
                }
            });
            var options = Object.merge(validatorOptions, {
                submitByAjax: true,
                ajaxSubmitAction: '/ajax_core_widgets_ui/request/',
                ajaxData: {
                    'data[Request][widget_id]': this.id,
                    'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                    'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
                    'data[Request][render]': 1,
                    'data[Request][process]': 1
                },
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                }
            });
            form.validator = new FormCheck(form, options);
            Object.each(form.validator.options.alerts, function(msg, idx) {
                form.validator.options.alerts[idx] = __('form_check', msg);
            });
        }
        form.getElements('.tpl-data-preview-toggler a').each(function(el) {
            var event = this.editSectionLinkClick.bind(this, el);
            el.store('event:editSectionLinkClick', event).addEvent('click', event);
        }, this);
        var link = form.getElement('.tpl-terms-link');
        if (link) {
            var event = this.termsLinkClick.bind(this, link);
            link.store('event:termsLinkClick', event).addEvent('click', event);
        }
        var link = form.getElement('.tpl-privacy-link');
        if (link) {
            var event = this.privacyLinkClick.bind(this, link);
            link.store('event:privacyLinkClick', event).addEvent('click', event);
        }
    },
    attachKlarnaCheckoutForm: function() {
        if (!this.form) {
            return;
        }
        if (this.validator) {
            this.validator.attach();
        } else if (typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            var countrySelect = this.form.getElement('select[name="data[Checkout][address][country_id]"]');
            if (countrySelect) {
                customElAlerts[countrySelect.get('id')] = __('form_check', 'Please select a country.');
            }
            var shippingOptionRadio = this.form.getElement('input[type=radio][name="data[Checkout][shipping][webshop_shipping_option_id]"]');
            if (shippingOptionRadio) {
                customElAlerts[shippingOptionRadio.get('id')] = __('form_check', 'Please select a shipping option.');
            }
            var msgBox = this.form.getElement('.tpl-message');
            var self = this;
            var validatorOptions = this.getValidatorOptions({
                onRequestComplete: function(response, widget) {
                    if (response && typeof(response.refresh_cart) != 'undefined' && response.refresh_cart == true) {
                        self.page.refreshCart({
                            exclude: [widget.id]
                        });
                    }
                },
                onWidgetInit: function(widget) {
                    widget.updateOrderSummary();
                }
            });
            var options = Object.merge(validatorOptions, {
                submitByAjax: true,
                ajaxSubmitAction: '/ajax_core_widgets_ui/request/',
                ajaxData: {
                    'data[Request][widget_id]': this.id,
                    'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                    'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
                    'data[Request][render]': 1,
                    'data[Request][process]': 1
                },
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                },
                onInputValid: function(input) {
                    this.form.getElements('input[type=radio][name="' + input.get('name') + '"]').each(function(el) {
                        var row = el.getParent('.tpl-form-row');
                        if (row && row.hasClass('tpl-invalid')) {
                            row.removeClass('tpl-invalid');
                        }
                    });
                },
                onInputInvalid: function(input) {
                    if (this.options.display.errorsListContainer && this.options.display.errorsListContainer.hasClass('tpl-success')) {
                        this.options.display.errorsListContainer.removeClass('tpl-success');
                        this.options.display.errorsListContainer.addClass('tpl-error');
                    }
                    this.form.getElements('input[type=radio][name="' + input.get('name') + '"]').each(function(el) {
                        var row = el.getParent('.tpl-form-row');
                        if (row && !row.hasClass('tpl-invalid')) {
                            row.addClass('tpl-invalid');
                        }
                    });
                    var row = input.getParent('.tpl-form-row');
                    if (row && !row.hasClass('tpl-invalid')) {
                        row.addClass('tpl-invalid');
                    }
                    var focused = $(document.body).getElement('*:focus');
                    if (focused && focused != input) {
                        focused.blur();
                    }
                }
            });
            this.validator = this.form.validator = new FormCheck(this.form, options);
            Object.each(this.validator.options.alerts, function(msg, idx) {
                this.validator.options.alerts[idx] = __('form_check', msg);
            }, this);
        }
        this.form.getElements('input[type=radio][name="data[Checkout][shipping][webshop_shipping_option_id]"]').each(function(el) {
            var event = this.editSectionShippingOptionRadioChange.bind(this, el);
            el.store('event:editSectionShippingOptionRadioChange', event).addEvent('change', event);
        }, this);
        this.form.getElements('.tpl-edit-toggler, .tpl-cancel a').each(function(el) {
            var event = this.editSectionTogglerClick.bind(this, el);
            el.store('event:editSectionTogglerClick', event).addEvent('click', event);
        }, this);
        var selectedShippingOptionInput = this.form.getElement('input[name="data[Checkout][shipping][webshop_shipping_option_id]"]:checked');
        if (selectedShippingOptionInput) {
            var handler = selectedShippingOptionInput.getParent().getElement('.tpl-shipping-handler');
            if (handler) {
                this.attachShippingHandlerInputs(handler);
            }
        }
    },
    detach: function() {
        this.parent();
        switch (this.viewType) {
            case CHECKOUT_STYLE_MULTI_STEP_ONE_PAGE:
            case CHECKOUT_STYLE_MULTI_STEP:
                {
                    this.detachSectionHeaders();
                    if (this.currentSection) {
                        this.detachStepSection(this.currentSection);
                    }
                    break;
                }
            case CHECKOUT_STYLE_KLARNA_CHECKOUT:
                {
                    this.detachKlarnaCheckoutForm();
                    break;
                }
        }
    },
    detachSectionHeaders: function() {
        this.element.getElements('.tpl-section-header .tpl-edit-section').each(function(el) {
            el.removeEvent('click', el.retrieve('event:editSectionLinkClick')).eliminate('event:editSectionLinkClick');
        });
    },
    detachStepSection: function(section) {
        switch (true) {
            case (section.hasClass('tpl-account')):
                {
                    var wrappers = section.getElements('.tpl-form-wrapper').filter(function(el) {
                        return el.isDisplayed();
                    });
                    var visible = (wrappers.length > 0 ? wrappers.shift() : false);
                    if (visible) {
                        switch (true) {
                            case (visible.hasClass('tpl-logged-in-form-wrapper')):
                                {
                                    var form = visible.getElement('form');
                                    if (form) {
                                        this.detachAccountStepSimpleForm(form);
                                    }
                                    break;
                                }
                            case (visible.hasClass('tpl-guest-form-wrapper')):
                                {
                                    var form = visible.getElement('form');
                                    if (form) {
                                        this.detachAccountStepSimpleForm(form);
                                    }
                                    break;
                                }
                            case (visible.hasClass('tpl-login-form-wrapper')):
                                {
                                    var form = visible.getElement('form');
                                    if (form) {
                                        this.detachAccountStepLoginForm(form);
                                    }
                                    break;
                                }
                            case (visible.hasClass('tpl-registration-form-wrapper')):
                                {
                                    var form = visible.getElement('form');
                                    if (form) {
                                        this.detachAccountStepRegistrationForm(form);
                                    }
                                    break;
                                }
                        }
                    }
                    break;
                }
            case (section.hasClass('tpl-address')):
                {
                    var form = section.getElement('form');
                    if (form) {
                        this.detachAddressStepForm(form);
                    }
                    break;
                }
            case (section.hasClass('tpl-shipping')):
                {
                    var form = section.getElement('form');
                    if (form) {
                        this.detachShippingStepForm(form);
                    }
                    break;
                }
            case (section.hasClass('tpl-payment')):
                {
                    var form = section.getElement('form');
                    if (form) {
                        this.detachPaymentStepForm(form);
                    }
                    break;
                }
            case (section.hasClass('tpl-review')):
                {
                    var form = section.getElement('form');
                    if (form) {
                        this.detachReviewStepForm(form);
                    }
                    break;
                }
        }
    },
    detachAccountStepSimpleForm: function(form) {
        if (form.validator) {
            form.validator.detach();
        }
        form.getElements('input[type=radio][name="data[Checkout][account][account_type]"]').each(function(el) {
            el.removeEvent('change', el.retrieve('event:checkoutAccountTypeRadioChange')).eliminate('event:checkoutAccountTypeRadioChange');
        });
    },
    detachAccountStepLoginForm: function(form) {
        if (form.validator) {
            form.validator.detach();
        }
        form.getElements('input[type=radio][name="data[Checkout][account][account_type]"]').each(function(el) {
            el.removeEvent('change', el.retrieve('event:checkoutAccountTypeRadioChange')).eliminate('event:checkoutAccountTypeRadioChange');
        });
    },
    detachAccountStepRegistrationForm: function(form) {
        if (form.validator) {
            form.validator.detach();
        }
        form.getElements('input[type=radio][name="data[Checkout][account][account_type]"]').each(function(el) {
            el.removeEvent('change', el.retrieve('event:checkoutAccountTypeRadioChange')).eliminate('event:checkoutAccountTypeRadioChange');
        });
        var link = form.getElement('.tpl-refresh-captcha');
        if (link) {
            link.removeEvent('click', link.retrieve('event:refreshCaptchaClick')).eliminate('event:refreshCaptchaClick');
        }
    },
    detachAddressStepForm: function(form) {
        if (form.validator) {
            form.validator.detach();
        }
        form.getElements('input[type=radio][name="data[Checkout][address][account_type]"]').each(function(input) {
            input.removeEvent('change', input.retrieve('event:accountTypeRadioChange')).eliminate('event:accountTypeRadioChange');
        });
        form.getElements('input[type=radio][name="data[Checkout][address][shipping_use_billing]"]').each(function(input) {
            input.removeEvent('change', input.retrieve('event:useBillingAddressRadioChange')).eliminate('event:useBillingAddressRadioChange');
        });
        var selectedAccountTypeInput = form.getElement('input[name="data[Checkout][address][account_type]"]:checked');
        var selectedUseBillingInput = form.getElement('input[name="data[Checkout][address][shipping_use_billing]"]:checked');
        if (selectedAccountTypeInput) {
            var type = parseInt(selectedAccountTypeInput.get('value'));
            switch (type) {
                case ACCOUNT_TYPE_COMPANY:
                    {
                        this.detachCompanyInputs(form);
                        break;
                    }
                default:
                    break;
            }
        }
        if (selectedUseBillingInput) {
            var bUseBillingAddress = (parseInt(selectedUseBillingInput.get('value')) == 1 ? true : false);
            if (bUseBillingAddress == false) {
                this.detachShippingAddressInputs(form);
            }
        }
        form.getElements('.tpl-back a').each(function(el) {
            el.removeEvent('click', el.retrieve('event:editSectionLinkClick')).eliminate('event:editSectionLinkClick');
        });
    },
    detachCompanyInputs: function(form) {
        if (form.validator) {
            var v = form.validator.validations;
            form.getElements('input.tpl-company-required').each(function(input) {
                if (v.contains(input) && typeof(input.validation) != 'undefined' && input.validation.contains('required')) {
                    input.validation.erase('required');
                }
                var row = input.getParent('.tpl-form-row');
                if (input.get('value').length == 0 && row.hasClass('tpl-invalid')) {
                    row.removeClass('tpl-invalid');
                }
            });
            form.validator.reinitialize();
        }
    },
    detachShippingAddressInputs: function(form) {
        var container = form.getElement('.tpl-shipping-address-rows');
        if (container && form.validator) {
            var v = form.validator.validations;
            var c = "validate['required']";
            container.getElements('input[type=text].tpl-required,select.tpl-required').each(function(input) {
                switch (input.tagName.toLowerCase()) {
                    case 'input':
                        {
                            if (v.contains(input) && typeof(input.validation) != 'undefined' && input.validation.contains('required')) {
                                input.validation.erase('required');
                            }
                            break;
                        }
                    case 'select':
                        {
                            if (v.contains(input) && typeof(input.validation) != 'undefined' && input.validation.contains('required')) {
                                input.validation.erase('required');
                                if (input.validation.length == 0) {
                                    form.validator.disposeElement(input);
                                    if (input.hasClass(c)) {
                                        input.removeClass(c);
                                    }
                                }
                            }
                            break;
                        }
                }
            });
            form.validator.reinitialize();
        }
    },
    detachShippingStepForm: function(form) {
        if (form.validator) {
            form.validator.detach();
        }
        form.getElements('input[type=radio][name="data[Checkout][shipping][webshop_shipping_option_id]"]').each(function(el) {
            el.removeEvent('click', el.retrieve('event:shippingOptionRadioChange')).eliminate('event:shippingOptionRadioChange');
        });
        form.getElements('.tpl-back a').each(function(el) {
            el.removeEvent('click', el.retrieve('event:editSectionLinkClick')).eliminate('event:editSectionLinkClick');
        });
        var selectedShippingOptionInput = form.getElement('input[name="data[Checkout][shipping][webshop_shipping_option_id]"]:checked');
        if (selectedShippingOptionInput) {
            var handler = selectedShippingOptionInput.getParent().getElement('.tpl-shipping-handler');
            if (handler) {
                this.detachShippingHandlerInputs(handler);
            }
        }
    },
    detachShippingHandlerInputs: function(handler) {
        var form = (handler ? handler.getParent('form') : null);
        if (form && form.validator) {
            var v = form.validator.validations;
            var c = "validate['required']";
            handler.getElements('input[type=text].tpl-required,select.tpl-required').each(function(input) {
                switch (input.tagName.toLowerCase()) {
                    case 'input':
                    case 'select':
                        {
                            if (v.contains(input) && typeof(input.validation) != 'undefined' && input.validation.contains('required')) {
                                input.validation.erase('required');
                                if (input.validation.length == 0) {
                                    form.validator.disposeElement(input);
                                    if (input.hasClass(c)) {
                                        input.removeClass(c);
                                    }
                                }
                            }
                            break;
                        }
                }
            });
            form.validator.reinitialize();
        }
        if (handler) {
            handler.getElements('.tpl-parcel-locker-chooser').each(function(b) {
                b.removeEvent('click', b.retrieve('event:parcelLockerChooserClick')).eliminate('event:parcelLockerChooserClick');
            });
        }
    },
    detachPaymentStepForm: function(form) {
        if (form.validator) {
            form.validator.detach();
        }
        form.getElements('input[type=radio][name="data[Checkout][payment][webshop_payment_method_id]"]').each(function(el) {
            el.removeEvent('click', el.retrieve('event:paymentMethodRadioChange')).eliminate('event:paymentMethodRadioChange');
        });
        form.getElements('.tpl-back a').each(function(el) {
            el.removeEvent('click', el.retrieve('event:editSectionLinkClick')).eliminate('event:editSectionLinkClick');
        });
    },
    detachReviewStepForm: function(form) {
        if (form.validator) {
            form.validator.detach();
        }
        form.getElements('.tpl-data-preview-toggler a').each(function(el) {
            el.removeEvent('click', el.retrieve('event:editSectionLinkClick')).eliminate('event:editSectionLinkClick');
        });
        var link = form.getElement('.tpl-terms-link');
        if (link) {
            link.removeEvent('click', link.retrieve('event:termsLinkClick')).eliminate('event:termsLinkClick');
        }
        var link = form.getElement('.tpl-privacy-link');
        if (link) {
            link.removeEvent('click', link.retrieve('event:privacyLinkClick')).eliminate('event:privacyLinkClick');
        }
    },
    detachKlarnaCheckoutForm: function() {
        if (!this.form) {
            return;
        }
        if (this.validator) {
            this.validator.detach();
        }
        this.form.getElements('input[type=radio][name="data[Checkout][shipping][webshop_shipping_option_id]"]').each(function(el) {
            el.removeEvent('click', el.retrieve('event:editSectionShippingOptionRadioChange')).eliminate('event:editSectionShippingOptionRadioChange');
        });
        this.form.getElements('.tpl-edit-toggler, .tpl-cancel a').each(function(el) {
            el.removeEvent('click', el.retrieve('event:editSectionTogglerClick')).eliminate('event:editSectionTogglerClick');
        });
        var selectedShippingOptionInput = this.form.getElement('input[name="data[Checkout][shipping][webshop_shipping_option_id]"]:checked');
        if (selectedShippingOptionInput) {
            var handler = selectedShippingOptionInput.getParent().getElement('.tpl-shipping-handler');
            if (handler) {
                this.detachShippingHandlerInputs(handler);
            }
        }
    },
    editSectionLinkClick: function(el, ev) {
        var parsed = new URI(el.get('href'));
        var data = (parsed ? parsed.get('data') : null);
        var action = (data && typeof(data.action) != 'undefined' ? data.action : false);
        var current_step = (data && typeof(data.current_step) != 'undefined' ? data.current_step : false);
        var back = (data && typeof(data.back) != 'undefined' ? data.back : 0);
        if (!action || !current_step) {
            return;
        }
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        var elementId = (this.element ? this.element.get('id') : null);
        this.website.request({
            url: '/ajax_core_widgets_ui/request/',
            data: {
                'data[Request][widget_id]': this.id,
                'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
                'data[Request][render]': 1,
                'data[Request][process]': 1,
                'data[Widget][action]': action,
                'data[Checkout][current_step]': current_step,
                'data[Checkout][back]': back
            },
            onRequest: function() {
                this.setBusy(true);
                this.website.websiteRequest();
            }.bind(this),
            onFailure: function() {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onError: function(text, error) {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onSuccess: function(response, options) {
                this.setBusy(false);
                if (this.website.websiteRequestSuccess(response, options) == false) {
                    return;
                }
                if (Object.getFromPath(response, 'widget_content') && Object.getFromPath(response, 'widget_content').length > 0 && Object.getFromPath(response, 'css_assets') && Object.getFromPath(response, 'js_assets')) {
                    var onInit = function(widget) {
                        widget.updateOrderSummary();
                        var top = widget.currentSection;
                        var bottom = widget.currentSection;
                        switch (widget.viewType) {
                            case CHECKOUT_STYLE_MULTI_STEP_ONE_PAGE:
                                {
                                    top = widget.currentSection.getPrevious('.tpl-section-header');
                                    break;
                                }
                        }
                        widget.scrollToSections(top, bottom);
                    };
                    this.page.queueWidgetInsert(elementId, response, true, false, {
                        onInit: onInit
                    });
                    if (Object.getFromPath(response, 'notifications') && response.notifications.length > 0) {
                        this.website.notifier.empty();
                        var duration = 5000;
                        response.notifications.each(function(notification) {
                            if (Object.getFromPath(notification, 'type') && Object.getFromPath(notification, 'title') && Object.getFromPath(notification, 'msg')) {
                                var options = Object.merge(Object.clone(this.website.options.notifierOptions), {
                                    duration: duration,
                                    hideOnClick: false,
                                    classes: {
                                        item: 'tpl-roar tpl-roar-' + notification.type
                                    }
                                });
                                this.website.notify(notification.title, notification.msg, options);
                            }
                        }, this);
                    }
                    if (Object.getFromPath(response, 'app_error') && Object.getFromPath(response, 'app_error') == true) {
                        var title = __('core', 'Error');
                        var msg = __('core', 'An error has occurred while communicating with the server. Please try again.');
                        if (Object.getFromPath(response, 'app_title') && Object.getFromPath(response, 'app_title').length > 0) {
                            title = Object.getFromPath(response, 'app_title');
                        }
                        if (Object.getFromPath(response, 'app_msg') && Object.getFromPath(response, 'app_msg').length > 0) {
                            msg = Object.getFromPath(response, 'app_msg');
                        }
                        new IWindow.Error(title, msg, {
                            pin: true,
                            onShow: function() {
                                this.element.getElement('input[type=button]').focus();
                            }
                        });
                    }
                    return;
                }
                new IWindow.Error(__('core', 'Error'), __('core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later."), {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    }
                });
            }.bind(this)
        });
    },
    checkoutAccountTypeRadioChange: function(el, ev) {
        var wrappers = el.getParent('.tpl-section-content').getElements('.tpl-form-wrapper').filter(function(el) {
            return el.isDisplayed();
        });
        var oldWrapper = (wrappers.length > 0 ? wrappers.shift() : false);
        var newWrapper = null;
        var newOption = null;
        switch (parseInt(el.get('value'))) {
            case CHECKOUT_ACCOUNT_TYPE_GUEST:
                {
                    newWrapper = el.getParent('.tpl-section-content').getElement('.tpl-guest-form-wrapper');newOption = (newWrapper ? newWrapper.getElement('input[name="data[Checkout][account][account_type]"][value=' + el.get('value') + ']') : null);
                    break;
                }
            case CHECKOUT_ACCOUNT_TYPE_EXISTING_ACCOUNT:
                {
                    newWrapper = el.getParent('.tpl-section-content').getElement('.tpl-login-form-wrapper');newOption = (newWrapper ? newWrapper.getElement('input[name="data[Checkout][account][account_type]"][value=' + el.get('value') + ']') : null);
                    break;
                }
            case CHECKOUT_ACCOUNT_TYPE_NEW_ACCOUNT:
                {
                    newWrapper = el.getParent('.tpl-section-content').getElement('.tpl-registration-form-wrapper');newOption = (newWrapper ? newWrapper.getElement('input[name="data[Checkout][account][account_type]"][value=' + el.get('value') + ']') : null);
                    break;
                }
        }
        if (oldWrapper && newWrapper && newOption) {
            this.detachStepSection(this.currentSection);
            oldWrapper.hide();
            newWrapper.show();
            newWrapper.getElements('input[name="data[Checkout][account][account_type]"]').each(function(at) {
                var label = at.getParent().getElement('label .tpl-option-name');
                if (label) {
                    if (at == newOption) {
                        newOption.checked = true;
                        if (!label.hasClass('tpl-bold')) {
                            label.addClass('tpl-bold');
                        }
                    } else if (label.hasClass('tpl-bold')) {
                        label.removeClass('tpl-bold');
                    }
                }
            });
            this.attachStepSection(this.currentSection);
            this.scrollToSection(this.currentSection);
        }
    },
    accountTypeRadioChange: function(input, ev) {
        var type = parseInt(input.get('value'));
        var form = input.getParent('form');
        switch (type) {
            case ACCOUNT_TYPE_COMPANY:
                {
                    this.showCompanyInputs(form);this.attachCompanyInputs(form);
                    break;
                }
            default:
                {
                    this.detachCompanyInputs(form);this.hideCompanyInputs(form);
                    break;
                }
        }
        this.elementResized();
    },
    useBillingAddressRadioChange: function(input, ev) {
        var bUseBillingAddress = (parseInt(input.get('value')) == 1 ? true : false);
        var form = input.getParent('form');
        if (bUseBillingAddress == true) {
            this.detachShippingAddressInputs(form);
            this.disableShippingAddressInputs(form);
        } else {
            this.enableShippingAddressInputs(form);
            this.attachShippingAddressInputs(form);
            this.scrollToSections(form.getElement('.tpl-data-edit-section-header.tpl-shipping-address'), form.getElement('.tpl-form-buttons'));
        }
    },
    refreshCaptchaClick: function(el, ev) {
        ev.preventDefault();
        var img = el.getParent('.tpl-form-row').getElement('.tpl-captcha-code');
        var src = (img ? img.get('src') : false);
        if (src && src.length > 0) {
            img.set('src', new URI(src).setData('rnd', Date.now()).toString());
        }
    },
    shippingOptionRadioChange: function(el, ev) {
        var bResized = false;
        el.getParent('.tpl-section-content').getElements('input[name="data[Checkout][shipping][webshop_shipping_option_id]"]').each(function(sh) {
            var label = sh.getParent().getElement('label .tpl-option-name');
            if (label) {
                if (sh == el && !label.hasClass('tpl-bold')) {
                    label.addClass('tpl-bold');
                } else if (sh != el && label.hasClass('tpl-bold')) {
                    label.removeClass('tpl-bold');
                }
            }
            var handler = sh.getParent().getElement('.tpl-shipping-handler');
            if (handler) {
                if (sh == el && handler.isDisplayed() == false) {
                    handler.setStyle('display', null);
                    this.attachShippingHandlerInputs(handler);
                } else if (sh != el && handler.isDisplayed() == true) {
                    this.detachShippingHandlerInputs(handler);
                    handler.hide();
                }
                bResized = true;
            }
        }, this);
        var priceElId = 'CheckoutShippingWebshopShippingPrice_' + this.id + '_' + el.get('value');
        var priceEl = el.getParent('form').getElement('#' + priceElId);
        if (priceEl) {
            this.setShippingPrice(priceEl.get('value'), true);
        }
        if (bResized == true) {
            this.elementResized();
        }
    },
    parcelLockerChooserClick: function(el, input, label, ev) {
        ev.preventDefault();
        var options = {
            pin: true,
            positionOnResize: true,
            buttons: [],
            modal: true,
            draggable: true,
            destroyOnClose: true,
            closeOnEsc: true,
            width: 600,
            height: 600,
            onInitialize: function() {
                this.body.setStyle('position', 'relative');
            }
        };
        var portViewSize = $(document.body).getSize();
        if (options.width > portViewSize.x - 100) {
            options.width = portViewSize.x - 100;
        }
        if (options.width < 500) {
            options.width = 500;
        }
        if (options.height > portViewSize.y - 100) {
            options.height = portViewSize.y - 100;
        }
        if (options.height < 400) {
            options.height = 400;
        }
        var defaultLocation = '';
        if (el.get('data-default-location')) {
            var defaultLocationData = JSON.decode(el.get('data-default-location'));
            defaultLocation = defaultLocationData.latitude + ',' + defaultLocationData.longitude;
        }
        window['ParcelLocerSelected_' + this.id] = (function(point) {
            var text = point.address_details.city;
            if (typeof(point.address_details.street) != 'undefined' && point.address_details.street.length > 0) {
                text += ', ' + point.address_details.street + (typeof(point.address_details.building_number) != 'undefined' && point.address_details.building_number.length > 0 ? ' ' + point.address_details.building_number : '');
            }
            label.set('text', text);
            input.set('value', point.name);
            var defaultLocation = point.location;
            el.set('data-default-location', JSON.encode(defaultLocation));
            window['ParcelLocerSelected_' + this.id] = undefined;
            win.hide(true);
        }).bind(this);
        var languageCode = Object.getFromPath(this.website, 'page.options.page.language_code');
        var win = new IWindow(__('widget', 'Choose parcel locker'), '<div class="tpl-shipping-handler-maximized-popup"><iframe src="/inpost/parcel_locker_select_popup/?language=' + languageCode + '&callback=ParcelLocerSelected_' + this.id + '&location=' + defaultLocation + '" /></div>', options);
    },
    paymentMethodRadioChange: function(el, ev) {
        el.getParent('.tpl-section-content').getElements('input[name="data[Checkout][payment][webshop_payment_method_id]"]').each(function(pm) {
            var label = pm.getParent().getElement('label .tpl-option-name');
            if (label) {
                if (pm == el && !label.hasClass('tpl-bold')) {
                    label.addClass('tpl-bold');
                } else if (pm != el && label.hasClass('tpl-bold')) {
                    label.removeClass('tpl-bold');
                }
            }
        });
    },
    termsLinkClick: function(el, ev) {
        ev.preventDefault();
        var options = {
            pin: true,
            positionOnResize: true,
            maximize: true,
            buttons: [{
                text: __('core', 'Close'),
                properties: {
                    'class': 'tpl-window-button-small tpl-window-closable'
                }
            }],
            buttonsType: 'input',
            modal: true,
            draggable: true,
            destroyOnClose: true,
            closeOnEsc: true,
            width: 800,
            height: 600,
            onInitialize: function() {
                this.body.setStyle('position', 'relative');
            }
        };
        var portViewSize = $(document.body).getSize();
        if (options.width > portViewSize.x - 100) {
            options.width = portViewSize.x - 100;
        }
        if (options.width < 500) {
            options.width = 500;
        }
        if (options.height > portViewSize.y - 100) {
            options.height = portViewSize.y - 100;
        }
        if (options.height < 400) {
            options.height = 400;
        }
        var win = new IWindow(__('widget', 'Terms and conditions'), '', options);
        var uri = el.get('href').toURI();
        this.website.request({
            url: '/ajax_page' + uri.get('directory') + uri.get('file') + uri.get('query'),
            parentWin: win,
            onRequest: function() {
                this.setBusy(true);
                this.website.websiteRequest();
            }.bind(this),
            onFailure: function() {
                this.setBusy(false);
                this.website.websiteRequestFailure({
                    onWarningWindowHide: function() {
                        win.hide(true);
                    },
                    parentWin: win
                });
            }.bind(this),
            onError: function(text, error) {
                this.setBusy(false);
                this.website.websiteRequestFailure({
                    onWarningWindowHide: function() {
                        win.hide(true);
                    },
                    parentWin: win
                });
            }.bind(this),
            onWarningWindowHide: function() {
                win.hide(true);
            },
            onSuccess: function(response, options) {
                this.setBusy(false);
                if (this.website.websiteRequestSuccess(response, options) == false) {
                    return;
                }
                if (Object.getFromPath(response, 'content') && response.content.length > 0) {
                    win.body.set('html', '<div class="tpl-window-text">' + response.content + '</div>');
                }
            }.bind(this)
        });
    },
    privacyLinkClick: function(el, ev) {
        ev.preventDefault();
        var options = {
            pin: true,
            positionOnResize: true,
            maximize: true,
            buttons: [{
                text: __('core', 'Close'),
                properties: {
                    'class': 'tpl-window-button-small tpl-window-closable'
                }
            }],
            buttonsType: 'input',
            modal: true,
            draggable: true,
            destroyOnClose: true,
            closeOnEsc: true,
            width: 800,
            height: 600,
            onInitialize: function() {
                this.body.setStyle('position', 'relative');
            }
        };
        var portViewSize = $(document.body).getSize();
        if (options.width > portViewSize.x - 100) {
            options.width = portViewSize.x - 100;
        }
        if (options.width < 500) {
            options.width = 500;
        }
        if (options.height > portViewSize.y - 100) {
            options.height = portViewSize.y - 100;
        }
        if (options.height < 400) {
            options.height = 400;
        }
        var win = new IWindow(__('widget', 'Privacy policy'), '', options);
        var uri = el.get('href').toURI();
        this.website.request({
            url: '/ajax_page' + uri.get('directory') + uri.get('file') + uri.get('query'),
            onRequest: function() {
                this.setBusy(true);
                this.website.websiteRequest();
            }.bind(this),
            onFailure: function() {
                this.setBusy(false);
                this.website.websiteRequestFailure({
                    onWarningWindowHide: function() {
                        win.hide(true);
                    },
                    parentWin: win
                });
            }.bind(this),
            onError: function(text, error) {
                this.setBusy(false);
                this.website.websiteRequestFailure({
                    onWarningWindowHide: function() {
                        win.hide(true);
                    },
                    parentWin: win
                });
            }.bind(this),
            onWarningWindowHide: function() {
                win.hide(true);
            },
            onSuccess: function(response, options) {
                this.setBusy(false);
                if (this.website.websiteRequestSuccess(response, options) == false) {
                    return;
                }
                if (Object.getFromPath(response, 'content') && response.content.length > 0) {
                    win.body.set('html', '<div class="tpl-window-text">' + response.content + '</div>');
                }
            }.bind(this)
        });
    },
    editSectionShippingOptionRadioChange: function(el, ev) {
        var bResized = false;
        el.getParent('.tpl-edit-section').getElements('input[name="data[Checkout][shipping][webshop_shipping_option_id]"]').each(function(sh) {
            var label = sh.getParent().getElement('label .tpl-option-name');
            if (label) {
                if (sh == el && !label.hasClass('tpl-bold')) {
                    label.addClass('tpl-bold');
                } else if (sh != el && label.hasClass('tpl-bold')) {
                    label.removeClass('tpl-bold');
                }
            }
            var handler = sh.getParent().getElement('.tpl-shipping-handler');
            if (handler) {
                if (sh == el && handler.isDisplayed() == false) {
                    handler.setStyle('display', null);
                    this.attachShippingHandlerInputs(handler);
                } else if (sh != el && handler.isDisplayed() == true) {
                    this.detachShippingHandlerInputs(handler);
                    handler.hide();
                }
                bResized = true;
            }
        }, this);
        var priceElId = 'CheckoutShippingWebshopShippingPrice_' + this.id + '_' + el.get('value');
        var priceEl = el.getParent('form').getElement('#' + priceElId);
        if (priceEl) {
            this.setShippingPrice(priceEl.get('value'), true);
        }
        if (bResized == true) {
            this.elementResized();
        }
    },
    editSectionTogglerClick: function(el, ev) {
        ev.preventDefault();
        if (el.getParent().hasClass('tpl-cancel')) {
            var editSection = el.getParent('.tpl-edit-section');
            var previewSection = (editSection ? editSection.getPrevious('.tpl-preview-section') : null);
            if (previewSection && editSection) {
                editSection.hide();
                previewSection.setStyle('display', null);
            }
            var summaryForm = this.element.getElement('.tpl-summary-form');
            if (summaryForm) {
                var shippingEl = summaryForm.getElement('.tpl-shipping-price');
                if (shippingEl) {
                    var shippingPrice = shippingEl.get('value');
                    this.setShippingPrice(shippingPrice, true);
                }
            }
        } else {
            var previewSection = el.getParent('.tpl-preview-section');
            var editSection = (previewSection ? previewSection.getNext('.tpl-edit-section') : null);
            if (previewSection && editSection) {
                previewSection.hide();
                editSection.setStyle('display', null);
            }
            var selectedShippingOptionInput = this.form.getElement('input[name="data[Checkout][shipping][webshop_shipping_option_id]"]:checked');
            if (selectedShippingOptionInput) {
                var priceElId = 'CheckoutShippingWebshopShippingPrice_' + this.id + '_' + selectedShippingOptionInput.get('value');
                var priceEl = this.form.getElement('#' + priceElId);
                if (priceEl) {
                    this.setShippingPrice(priceEl.get('value'), true);
                }
            }
        }
        if (this.validator) {
            this.validator.reinitialize();
        }
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        switch (true) {
            case (el.hasClass('tpl-klarna-checkout-addon-edit')):
                {
                    var r = el.get('data');
                    var settings = (r && r.length > 0 ? JSON.decode(r) : null);
                    if (settings && typeof(settings.type) != 'undefined' && typeof(settings.name) != 'undefined') {
                        switch (settings.type) {
                            case 'backstage':
                                {
                                    if (this.website.backstage) {
                                        this.website.backstage.loadPane(settings);
                                    }
                                    break;
                                }
                        }
                    }
                    break;
                }
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new CheckoutFormWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    },
    scrollToSection: function(section) {
        var scrollY = this.scrollableElement.getScroll().y;
        var viewportSize = this.viewportElement.getSize();
        var coords = null;
        if (this.admin || this.preview) {
            coords = section.getRelativeCoordinates($('PageWrapper'));
        } else {
            coords = section.getCoordinates();
        }
        if (viewportSize.y > coords.height + this.scrollDelta * 2 && coords.bottom > viewportSize.y + scrollY) {
            this.scrollFx.start(0, coords.bottom - viewportSize.y + this.scrollDelta);
        } else if (viewportSize.y < coords.height + this.scrollDelta * 2 || scrollY > coords.top) {
            this.scrollFx.start(0, coords.top - this.scrollDelta);
        }
    },
    scrollToSections: function(top, bottom) {
        var scrollY = this.scrollableElement.getScroll().y;
        var viewportSize = this.viewportElement.getSize();
        var topCoords = null;
        var bottomCoords = null;
        if (this.admin || this.preview) {
            topCoords = top.getRelativeCoordinates($('PageWrapper'));
            bottomCoords = bottom.getRelativeCoordinates($('PageWrapper'));
        } else {
            topCoords = top.getCoordinates();
            bottomCoords = bottom.getCoordinates();
        }
        var height = bottomCoords.bottom - topCoords.top;
        if (viewportSize.y > height + this.scrollDelta * 2 && bottomCoords.bottom > viewportSize.y + scrollY) {
            this.scrollFx.start(0, bottomCoords.bottom - viewportSize.y + this.scrollDelta);
        } else if (viewportSize.y < height + this.scrollDelta * 2 || scrollY > topCoords.top) {
            this.scrollFx.start(0, topCoords.top - this.scrollDelta);
        }
    },
    showCompanyInputs: function(form) {
        form.getElements('.tpl-company-row').each(function(row) {
            if (row.isDisplayed() == false) {
                var input = row.getElement('input[type=text]');
                if (input && input.retrieve('company-input:value')) {
                    input.set('value', input.retrieve('company-input:value')).eliminate('company-input:value');
                }
                row.show();
            }
        });
        if (form.validator) {
            form.validator.reinitialize();
        }
    },
    hideCompanyInputs: function(form) {
        form.getElements('.tpl-company-row').each(function(row) {
            if (row.isDisplayed() == true) {
                var input = row.getElement('input[type=text]');
                if (input) {
                    input.store('company-input:value', input.get('value')).set('value', '');
                }
                row.hide();
            }
        });
        if (form.validator) {
            form.validator.reinitialize();
        }
    },
    enableShippingAddressInputs: function(form) {
        var container = form.getElement('.tpl-shipping-address-rows');
        if (container && container.isDisplayed() == false) {
            container.show();
            container.getElements('input[type=text],select').each(function(input) {
                input.set('value', input.retrieve('shipping-input:value')).eliminate('shipping-input:value');
            });
        }
    },
    disableShippingAddressInputs: function(form) {
        var container = form.getElement('.tpl-shipping-address-rows');
        if (container && container.isDisplayed() == true) {
            container.hide();
            container.getElements('input[type=text],select').each(function(input) {
                var inputRow = input.getParent('.tpl-form-row');
                if (inputRow.hasClass('tpl-invalid')) {
                    inputRow.removeClass('tpl-invalid');
                }
                input.store('shipping-input:value', input.get('value')).set('value', '');
            });
        }
    },
    setShippingPrice: function(shippingPrice, bUpdate) {
        this.shippingPrice = shippingPrice;
        if (bUpdate) {
            this.updateOrderSummary();
        }
    },
    updateOrderSummary: function() {
        if (this.decimalPoint && this.currencySymbol && Object.getFromPath(this, 'page.widgets') && Object.getLength(Object.getFromPath(this, 'page.widgets')) > 0) {
            var subtotal = this.subtotalPrice;
            var discount = this.discountAmount;
            var shipping = this.shippingPrice;
            var total = parseFloat(subtotal) + parseFloat(shipping) + parseFloat(discount);
            if (this.bShortPrice == true) {
                subtotal = this.shortenPrice(subtotal);
                discount = this.shortenPrice(discount);
                shipping = this.shortenPrice(shipping);
                total = this.shortenPrice(total);
            }
            subtotal = this.numberFormat(subtotal, (subtotal.toString().indexOf('.') > -1 || this.bShortPrice == false ? 2 : 0), this.decimalPoint, this.thousandsSeparator) + ' ' + this.currencySymbol;
            discount = this.numberFormat(discount, (discount.toString().indexOf('.') > -1 || this.bShortPrice == false ? 2 : 0), this.decimalPoint, this.thousandsSeparator) + ' ' + this.currencySymbol;
            shipping = this.numberFormat(shipping, (shipping.toString().indexOf('.') > -1 || this.bShortPrice == false ? 2 : 0), this.decimalPoint, this.thousandsSeparator) + ' ' + this.currencySymbol;
            total = this.numberFormat(total, (total.toString().indexOf('.') > -1 || this.bShortPrice == false ? 2 : 0), this.decimalPoint, this.thousandsSeparator) + ' ' + this.currencySymbol;
            Object.each(this.page.widgets, function(widget) {
                if (Object.getFromPath(widget, 'options.short_name') == 'order_summary') {
                    widget.updateSummary(subtotal, discount, shipping, total);
                }
            });
        }
    },
    shortenPrice: function(price) {
        var whole = 0;
        if (parseFloat(price) != 0 && price.toString().indexOf('.') > -1) {
            var splitted = price.toString().split('.');
            whole = splitted[0];
            if (parseInt(splitted[1]) != 0) {
                whole = price;
            }
        } else if (parseFloat(price) != 0) {
            return price;
        }
        return whole;
    }
});
var ContactFormWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Contact form',
        short_name: 'contact_form',
        dropdown: true
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.create.delay(1, this);
    },
    create: function() {
        var mapContainer = this.element.getElement('.tpl-contact-map-container');
        if (mapContainer && mapContainer.get('data')) {
            var data = JSON.decode(mapContainer.get('data'));
            if (data && typeof(data.url) != 'undefined' && data.url.length > 0) {
                var h = (typeof(data.height) != 'undefined' && data.height > 0 ? data.height : 0);
                var fn = (function() {
                    var map = new Element('iframe', {
                        scrolling: 'no',
                        frameborder: '0',
                        src: data.url
                    }).inject(mapContainer, 'top');
                    if (h > 0) {
                        map.setStyle('height', h);
                    }
                    this.elementResized();
                }).bind(this);
                if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                    fn.apply();
                } else {
                    window.addEvent('load', fn);
                }
            }
        }
        if (this.captchaType) {
            switch (this.captchaType) {
                case 'rc':
                case 'irc':
                    {
                        var fn = (function() {
                            var existing = $$('script[src]');
                            var rcScript = null;
                            var rcAsset = 'https://www.google.com/recaptcha/api.js?render=explicit&onload=renderReCaptchaElements&hl=' + Object.getFromPath(this.page, 'options.page.language_code');
                            existing.each(function(a) {
                                if (!rcScript && rcAsset == a.get('src')) {
                                    rcScript = a;
                                }
                            });
                            var onScriptLoad = function() {
                                this.form.getElements('.g-recaptcha').each(function(el) {
                                    if (typeof(grecaptcha) != 'undefined' && typeof(grecaptcha.render) != 'undefined') {
                                        var elData = {
                                            'sitekey': el.get('data-sitekey'),
                                            'callback': el.get('data-callback'),
                                            'size': el.get('data-size')
                                        };
                                        var wId = grecaptcha.render(el, elData);
                                        el.set('data-wid', wId);
                                    } else {
                                        this.page.queueReCaptchaElement(el);
                                    }
                                }, this);
                                this.elementResized();
                            }.bind(this);
                            if (!rcScript) {
                                rcScript = new Element('script', {
                                    'src': rcAsset,
                                    'type': 'text/javascript',
                                    'async': '',
                                    'defer': ''
                                });
                                if (typeof rcScript.onreadystatechange != 'undefined') {
                                    rcScript.addEvent('readystatechange', function() {
                                        if (['loaded', 'complete'].contains(this.readyState)) {
                                            rcScript.set('data-loaded', 'true');
                                            onScriptLoad.apply();
                                        }
                                    });
                                } else {
                                    rcScript.addEvent('load', function() {
                                        rcScript.set('data-loaded', 'true');
                                        onScriptLoad.apply();
                                    });
                                }
                                rcScript.inject(document.body);
                            } else {
                                if (rcScript.get('data-loaded') == 'true') {
                                    onScriptLoad.apply();
                                } else {
                                    if (typeof rcScript.onreadystatechange != 'undefined') {
                                        rcScript.addEvent('readystatechange', function() {
                                            if (['loaded', 'complete'].contains(this.readyState)) {
                                                onScriptLoad.apply();
                                            }
                                        });
                                    } else {
                                        rcScript.addEvent('load', function() {
                                            onScriptLoad.apply();
                                        });
                                    }
                                }
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                        break;
                    }
                case 'rc_v3':
                    {
                        var fn = (function() {
                            if (!this.captchaData || typeof(this.captchaData.sitekey) == 'undefined' || typeof(this.captchaData.action) == 'undefined') {
                                return;
                            }
                            var existing = $$('script[src]');
                            var rcScript = null;
                            var rcAsset = 'https://www.google.com/recaptcha/api.js?render=' + this.captchaData.sitekey;
                            existing.each(function(a) {
                                if (!rcScript && rcAsset == a.get('src')) {
                                    rcScript = a;
                                }
                            });
                            if (!rcScript) {
                                rcScript = new Element('script', {
                                    'src': rcAsset,
                                    'type': 'text/javascript',
                                    'async': '',
                                    'defer': ''
                                });
                                if (typeof rcScript.onreadystatechange != 'undefined') {
                                    rcScript.addEvent('readystatechange', function() {
                                        if (['loaded', 'complete'].contains(this.readyState)) {
                                            rcScript.set('data-loaded', 'true');
                                        }
                                    });
                                } else {
                                    rcScript.addEvent('load', function() {
                                        rcScript.set('data-loaded', 'true');
                                    });
                                }
                                rcScript.inject(document.body);
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                        break;
                    }
            }
        }
    },
    initVariables: function() {
        this.parent();
        this.form = this.element.getElement('.tpl-contact-form-section form');
        this.validator = null;
        this.captchaType = (this.form && this.form.get('data-ct') ? this.form.get('data-ct') : false);
        this.captchaData = (this.form && this.form.get('data-cd') ? JSON.decode(this.form.get('data-cd')) : false);
    },
    attach: function() {
        this.parent();
        switch (this.captchaType) {
            case 'irc':
                {
                    window['onContactForm' + this.id + 'Submit'] = this.manualFormSubmit.bind(this);window['onContactForm' + this.id + 'Error'] = this.contactFormError.bind(this);
                    break;
                }
        }
        if (this.validator) {
            this.validator.attach();
        } else if (this.form && typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            customElAlerts['ContactFormName_' + this.id] = __('form_check', 'Please enter a valid name.');
            customElAlerts['ContactFormEmail_' + this.id] = __('form_check', 'Please enter a valid e-mail.');
            customElAlerts['ContactFormPhone_' + this.id] = __('form_check', 'Please enter a valid phone number.');
            customElAlerts['ContactFormMessage_' + this.id] = __('form_check', 'Please enter a message.');
            customElAlerts['ContactFormCaptchaCode_' + this.id] = __('form_check', 'Please enter the text from the picture.');
            var self = this;
            var msgBox = this.element.getElement('.tpl-message');
            var options = Object.merge(this.getValidatorOptions(), {
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                }
            });
            switch (this.captchaType) {
                case 'irc':
                    {
                        options = Object.merge(options, {
                            customSubmit: true,
                            onCustomSubmit: function(ev) {
                                self.website.loadingBox(true);
                                var captchaEl = this.form.getElement('.g-recaptcha[data-wid]');
                                if (captchaEl && typeof(grecaptcha) != 'undefined') {
                                    grecaptcha.execute(captchaEl.get('data-wid'));
                                } else {
                                    self.manualFormSubmit();
                                }
                            }
                        });
                        break;
                    }
                case 'rc_v3':
                    {
                        options = Object.merge(options, {
                            customSubmit: true,
                            onCustomSubmit: function(ev) {
                                self.website.loadingBox(true);
                                grecaptcha.ready(function() {
                                    if (typeof(grecaptcha) != 'undefined' && self.captchaData && typeof(self.captchaData.sitekey) != 'undefined' && typeof(self.captchaData.action) != 'undefined') {
                                        grecaptcha.execute(self.captchaData.sitekey, {
                                            action: self.captchaData.action
                                        }).then(function(token) {
                                            new Element('input', {
                                                'type': 'hidden',
                                                'name': 'g-recaptcha-response',
                                                'value': token
                                            }).inject(self.form);
                                            self.manualFormSubmit();
                                        }).catch(function() {
                                            self.contactFormError();
                                        });
                                    } else {
                                        self.manualFormSubmit();
                                    }
                                });
                            }
                        });
                        break;
                    }
            }
            this.validator = new FormCheck(this.form, options);
            Object.each(this.validator.options.alerts, function(msg, idx) {
                this.validator.options.alerts[idx] = __('form_check', msg);
            }, this);
        }
        if (this.form) {
            var refreshLink = this.form.getElement('.tpl-refresh-captcha');
            if (refreshLink) {
                var event = this.refreshCaptchaClick.bind(this, refreshLink);
                refreshLink.store('event:refreshCaptchaClick', event).addEvent('click', event);
            }
        }
    },
    detach: function() {
        this.parent();
        switch (this.captchaType) {
            case 'irc':
                {
                    window['onContactForm' + this.id + 'Submit'] = undefined;window['onContactForm' + this.id + 'Error'] = undefined;
                    break;
                }
        }
        if (this.validator) {
            this.validator.detach();
        }
        if (this.form) {
            var refreshLink = this.form.getElement('.tpl-refresh-captcha');
            if (refreshLink) {
                refreshLink.removeEvent('click', refreshLink.retrieve('event:refreshCaptchaClick')).eliminate('event:refreshCaptchaClick');
            }
        }
    },
    manualFormSubmit: function() {
        this.form.submit();
    },
    contactFormError: function() {
        this.website.loadingBox(false);
    },
    refreshCaptchaClick: function(el, ev) {
        ev.preventDefault();
        var img = el.getParent('.tpl-form-row').getElement('.tpl-captcha-code');
        var src = (img ? img.get('src') : false);
        if (src && src.length > 0) {
            img.set('src', new URI(src).setData('rnd', Date.now()).toString());
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    createComplete: function() {
        this.editWidgetSettings({
            requestData: {
                'data[Request][added]': 1
            }
        });
    },
    editWidgetSettings: function(options) {
        if (this.options.editable == false) {
            return;
        }
        var options = Object.merge({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }, options);
        new ContactFormWidgetAdminWindowUI(options).set('website', this.website).set('widget', this);
    }
});
var CookieInfoBarWidget = new Class({
    Extends: Widget,
    options: {
        name: 'Cookie info bar',
        short_name: 'cookie_info_bar',
        editable: true,
        dropdown: true,
        box_class: 'tpl-no-offset'
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.scrollBarWidth = Browser.getScrollBarWidth();
        if (!navigator.cookieEnabled) {
            this.element.hide();
        }
        this.bound = Object.merge(this.bound, {
            positionCookieInfoBar: this.fitBar.bind(this)
        });
    },
    attach: function() {
        this.parent();
        this.element.getElements('.tpl-privacy-link').each(function(el) {
            var event = this.privacyLinkClick.bind(this, el);
            el.store('event:privacyLinkClick', event).addEvent('click', event);
        }, this);
        this.element.getElements('.tpl-close').each(function(el) {
            var event = this.closeBarClick.bind(this, el);
            el.store('event:closeBarClick', event).addEvent('click', event);
        }, this);
        if ((this.admin == true || this.preview == true) && this.element.getStyle('position') == 'fixed') {
            if (this.element.isDisplayed() == true) {
                this.fitBar();
            }
            window.addEvent('resize', this.bound.positionCookieInfoBar);
        }
    },
    detach: function() {
        this.parent();
        this.element.getElements('.tpl-privacy-link').each(function(el) {
            el.removeEvent('click', el.retrieve('event:privacyLinkClick')).eliminate('event:privacyLinkClick');
        });
        this.element.getElements('.tpl-close').each(function(el) {
            el.removeEvent('click', el.retrieve('event:closeBarClick')).eliminate('event:closeBarClick');
        });
        if ((this.admin == true || this.preview == true) && this.element.getStyle('position') == 'fixed') {
            window.removeEvent('resize', this.bound.positionCookieInfoBar);
        }
    },
    fitBar: function() {
        if (this.element.isDisplayed() == false) {
            return;
        }
        var scrollSize = this.scrollableElement.getScrollSize();
        var viewportSize = this.viewportElement.getSize();
        var oldPos = this.element.getStyle('right');
        var newPos = '0px';
        if (scrollSize.y > viewportSize.y) {
            newPos = this.scrollBarWidth + 'px';
        }
        if (newPos != oldPos) {
            this.element.setStyle('right', newPos);
        }
        if (this.admin == true && this.editBox && this.editBox.dd && this.editBox.dd.expanded == true) {
            this.editBox.dd.position.delay(50, this.editBox.dd);
        }
    },
    privacyLinkClick: function(el, ev) {
        ev.preventDefault();
        var options = {
            pin: true,
            positionOnResize: true,
            maximize: true,
            buttons: [{
                text: __('core', 'Close'),
                properties: {
                    'class': 'tpl-window-button-small tpl-window-closable'
                }
            }],
            buttonsType: 'input',
            modal: true,
            draggable: true,
            destroyOnClose: true,
            closeOnEsc: true,
            width: 800,
            height: 600,
            onInitialize: function() {
                this.body.setStyle('position', 'relative');
            }
        };
        var portViewSize = $(document.body).getSize();
        if (options.width > portViewSize.x - 100) {
            options.width = portViewSize.x - 100;
        }
        if (options.width < 500) {
            options.width = 500;
        }
        if (options.height > portViewSize.y - 100) {
            options.height = portViewSize.y - 100;
        }
        if (options.height < 400) {
            options.height = 400;
        }
        var win = new IWindow(__('widget', 'Privacy policy'), '', options);
        var uri = el.get('href').toURI();
        this.website.request({
            url: '/ajax_page' + uri.get('directory') + uri.get('file') + uri.get('query'),
            onRequest: function() {
                this.setBusy(true);
                this.website.websiteRequest();
            }.bind(this),
            onFailure: function() {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onError: function(text, error) {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onSuccess: function(response, options) {
                this.setBusy(false);
                if (this.website.websiteRequestSuccess(response, options) == false) {
                    return;
                }
                if (Object.getFromPath(response, 'content') && response.content.length > 0) {
                    win.body.set('html', '<div class="tpl-window-text">' + response.content + '</div>');
                }
            }.bind(this)
        });
    },
    closeBarClick: function(el, ev) {
        ev.preventDefault();
        this.element.hide();
        this.website.writeCookie('CookieInfoBarClosed', 1, {
            domain: '.' + this.website.options.cookie_domain,
            duration: 3600
        });
    },
    getEditableDropdownOptions: function() {
        var options = this.parent();
        if (this.admin == true && this.element.getStyle('position') == 'fixed') {
            options = Object.merge(options, {
                position: 'fixed',
                positionScrollOffsets: false,
                listOffset: {
                    x: -3,
                    y: 3
                }
            });
            if (this.element.getStyle('bottom') == '0px') {
                options.alignment = 'top-right';
            }
        }
        return options;
    },
    showEditBox: function() {
        this.parent();
        if (this.element.getStyle('position') == 'fixed' && this.editBox.dd.list.getStyle('position') != 'fixed') {
            this.editBox.dd.list.setStyle('position', 'fixed');
        }
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd && this.options.editable == true) {
            this.editBox.dd.addItem({
                html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
            });
            this.editBox.dd.addSeparator();
            this.editBox.dd.addItem({
                html: '<span class="ui-edit">' + __('admin_widget', 'Edit message', true) + '</span>'
            });
        }
    },
    editWidgetContent: function() {
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        var settings = {
            name: 'BackstagePaneUI.Content.Translations',
            options: {
                requestData: {
                    data: {
                        Request: {
                            language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                            item_name: 'cookie_bar_message'
                        }
                    }
                }
            }
        };
        this.website.backstage.loadPane(settings);
    },
    editWidgetSettings: function() {
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        this.website.backstage.load({
            name: 'BackstagePaneUI.Content.Settings'
        }, true);
    }
});
var CustomWidget = new Class({
    Extends: Widget,
    options: {
        name: 'Custom',
        short_name: 'custom',
        editable: true
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editableButtonClick: function(ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new CustomWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var CustomLayoutWidget = new Class({
    Extends: CustomWidget,
    options: {
        name: 'Custom layout',
        short_name: 'custom_layout'
    },
    initVariables: function() {
        this.parent();
        this.editBox = {};
        this.editBoxFrozen = {};
        this.bInsideBox = {};
        this.editBoxTimer = {};
        this.layoutSettings = (this.element.get('data-admin-settings') && this.element.get('data-admin-settings').length > 0 ? JSON.decode(this.element.get('data-admin-settings')) : {});
    },
    attachHover: function() {
        this.element.getElements('.tpl-widget-section').each(function(section) {
            var event = this.sectionMouseEnter.bind(this, section);
            section.store('event:sectionMouseEnter', event).addEvent('mouseenter', event);
            var event = this.sectionMouseLeave.bind(this, section);
            section.store('event:sectionMouseLeave', event).addEvent('mouseleave', event);
        }, this);
    },
    detachHover: function() {
        this.element.getElements('.tpl-widget-section').each(function(section) {
            section.removeEvent('mouseenter', section.retrieve('event:sectionMouseEnter')).eliminate('event:sectionMouseEnter');
            section.removeEvent('mouseleave', section.retrieve('event:sectionMouseLeave')).eliminate('event:sectionMouseLeave');
        });
    },
    sectionMouseEnter: function(section, ev) {
        if (section.get('data-section-id') && typeof(this.editBoxTimer[section.get('data-section-id')]) != 'undefined' && this.editBoxTimer[section.get('data-section-id')] != null) {
            clearTimeout(this.editBoxTimer[section.get('data-section-id')]);
            this.editBoxTimer[section.get('data-section-id')] = null;
        }
        if (section.get('data-section-id')) {
            this.bInsideBox[section.get('data-section-id')] = true;
        }
        this.showEditBox(section);
    },
    sectionMouseLeave: function(section, ev) {
        if (section.get('data-section-id')) {
            this.bInsideBox[section.get('data-section-id')] = false;
            this.editBoxTimer[section.get('data-section-id')] = this.hideEditBox.delay(50, this, [section]);
        }
    },
    showEditBox: function(section) {
        if (!section || section.get('data-section-id') == null || (typeof(this.editBox[section.get('data-section-id')]) != 'undefined' && this.editBox[section.get('data-section-id')] != null)) {
            return;
        }
        var c = $('PageContent');
        var col = this.element.getParent('.tpl-layout-col');
        var boxClass = 'tpl-editable-' + this.options.short_name.replace(/_/gi, '-');
        if (col) {
            boxClass += ' tpl-editable-column-' + col.get('id').replace(/^Col_/i, '');
        }
        if (this.options.box_class.length > 0) {
            boxClass += ' ' + this.options.box_class;
        }
        this.editBox[section.get('data-section-id')] = {
            tb: new Element('div', {
                'class': 'tpl-editable-indicator-top ' + boxClass
            }).inject(c),
            lb: new Element('div', {
                'class': 'tpl-editable-indicator-left ' + boxClass
            }).inject(c),
            rb: new Element('div', {
                'class': 'tpl-editable-indicator-right ' + boxClass
            }).inject(c),
            bb: new Element('div', {
                'class': 'tpl-editable-indicator-bottom ' + boxClass
            }).inject(c),
            bt: new Element('a', {
                'class': 'tpl-editable-indicator-button ' + boxClass,
                'href': '#',
                'title': __('admin_widget', 'Edit', true)
            }).adopt(new Element('span', {
                'class': 'tpl-editable-indicator-button-icon'
            })).inject(c),
            sn: section,
            dd: null,
            re: null,
            se: null
        };
        var zIndex = this.element.getStyle('z-index');
        if (parseInt(zIndex) > 0) {
            [this.editBox[section.get('data-section-id')].tb, this.editBox[section.get('data-section-id')].lb, this.editBox[section.get('data-section-id')].rb, this.editBox[section.get('data-section-id')].bb, this.editBox[section.get('data-section-id')].bt].each(function(el) {
                el.setStyle('z-index', parseInt(zIndex) + 1);
            });
        }
        this.positionEditBox();
        if (this.layoutSettings && typeOf(this.layoutSettings.multi_sections) == 'array') {
            var sectionBaseId = section.get('data-section-id');
            if (sectionBaseId.test(/^(\d+)\.(\d+)$/)) {
                var matched = sectionBaseId.match(/^(\d+)\.(\d+)$/);
                sectionBaseId = matched[1];
            }
            if (this.layoutSettings.multi_sections.contains(sectionBaseId) || this.layoutSettings.multi_sections.contains(parseInt(sectionBaseId))) {
                this.editBox[section.get('data-section-id')].dd = new OptionsDropdownUI(this.editBox[section.get('data-section-id')].bt, this.getEditableDropdownOptions(section));
                this.addEditableDropdownItems(section);
            }
        }
        [this.editBox[section.get('data-section-id')].tb, this.editBox[section.get('data-section-id')].lb, this.editBox[section.get('data-section-id')].rb, this.editBox[section.get('data-section-id')].bb, this.editBox[section.get('data-section-id')].bt].each(function(el) {
            var event = this.editableElementMouseEnter.bind(this, el, section);
            el.store('event:editableElementMouseEnter', event).addEvent('mouseenter', event);
            var event = this.editableElementMouseLeave.bind(this, el, section);
            el.store('event:editableElementMouseLeave', event).addEvent('mouseleave', event);
        }, this);
        var event = this.editableButtonClick.bind(this, section);
        this.editBox[section.get('data-section-id')].bt.store('event:editableButtonClick', event).addEvent('click', event);
        this.editBox[section.get('data-section-id')].re = this.positionEditBox.bind(this);
        window.addEvent('resize', this.editBox[section.get('data-section-id')].re);
        this.editBox[section.get('data-section-id')].se = this.positionEditBox.bind(this);
        $('PageWrapper').addEvent('scroll', this.editBox[section.get('data-section-id')].se);
    },
    hideEditBox: function(section) {
        if (!section || !section.get('data-section-id')) {
            return;
        }
        if (typeof(this.editBoxTimer[section.get('data-section-id')]) != 'undefined' && this.editBoxTimer[section.get('data-section-id')] != null) {
            clearTimeout(this.editBoxTimer[section.get('data-section-id')]);
            this.editBoxTimer[section.get('data-section-id')] = null;
        }
        if (typeof(this.editBox[section.get('data-section-id')]) != 'undefined' && this.editBox[section.get('data-section-id')] != null && (typeof(this.editBoxFrozen[section.get('data-section-id')]) == 'undefined' || this.editBoxFrozen[section.get('data-section-id')] == false)) {
            this.editBox[section.get('data-section-id')].bt.removeEvent('click', this.editBox[section.get('data-section-id')].bt.retrieve('event:editableButtonClick')).eliminate('event:editableButtonClick');
            if (this.editBox[section.get('data-section-id')].dd) {
                this.editBox[section.get('data-section-id')].dd.destroy();
            }
            [this.editBox[section.get('data-section-id')].tb, this.editBox[section.get('data-section-id')].lb, this.editBox[section.get('data-section-id')].rb, this.editBox[section.get('data-section-id')].bb, this.editBox[section.get('data-section-id')].bt].each(function(el) {
                el.removeEvent('mouseenter', el.retrieve('event:editableElementMouseEnter')).eliminate('event:editableElementMouseEnter');
                el.removeEvent('mouseleave', el.retrieve('event:editableElementMouseLeave')).eliminate('event:editableElementMouseLeave');
                el.destroy();
            }, this);
            window.removeEvent('resize', this.editBox[section.get('data-section-id')].re);
            $('PageWrapper').removeEvent('scroll', this.editBox[section.get('data-section-id')].se);
            this.editBox[section.get('data-section-id')] = null;
        }
    },
    getEditableDropdownOptions: function(section) {
        if (!section) {
            return;
        }
        var self = this;
        return {
            container: $('PageContent'),
            alignment: 'right',
            positionRelativeTarget: $('PageWrapper'),
            selectable: false,
            listOffset: {
                x: -4,
                y: -4
            },
            onListMouseEnter: function() {
                if (section.get('data-section-id')) {
                    self.bInsideBox[section.get('data-section-id')] = true;
                }
            },
            onListMouseLeave: function() {
                if (section.get('data-section-id')) {
                    self.bInsideBox[section.get('data-section-id')] = false;
                }
            },
            onShow: function(button, list) {
                var focused = $(document.body).getElement('*:focus');
                if (focused != button) {
                    if (focused) {
                        focused.blur();
                    }
                    if (button.tagName.toLowerCase() == 'a') {
                        button.focus();
                    }
                }
                button.addClass('tpl-expanded');
                if (section.get('data-section-id')) {
                    self.editBoxFrozen[section.get('data-section-id')] = true;
                }
            },
            onHide: function(button, list) {
                button.removeClass('tpl-expanded');
                if (section.get('data-section-id')) {
                    self.editBoxFrozen[section.get('data-section-id')] = false;
                    (function() {
                        if (this.bInsideBox[section.get('data-section-id')] == false) {
                            this.hideEditBox(section);
                        }
                    }).delay(50, self);
                }
            },
            onItemClick: this.editableDropdownItemClick.bind(this, section),
            classes: {
                dropdown: 'ui-dropdown-box ui-object-actions clearfix'
            }
        };
    },
    positionEditBox: function() {
        Object.each(this.editBox, function(editBox) {
            if (editBox == null) {
                return;
            }
            var c = $('PageContent');
            var pos = editBox.sn.getCoordinates(c);
            editBox.tb.setStyles({
                top: pos.top,
                left: pos.left,
                width: pos.width
            });
            editBox.lb.setStyles({
                top: pos.top,
                left: pos.left,
                height: pos.height
            });
            editBox.rb.setStyles({
                top: pos.top,
                left: pos.right,
                height: pos.height
            });
            editBox.bb.setStyles({
                top: pos.bottom,
                left: pos.left,
                width: pos.width
            });
            editBox.bt.setStyles({
                top: pos.top,
                left: pos.right
            });
        });
    },
    addEditableDropdownItems: function(section) {
        if (section && section.get('data-section-id') && typeof(this.editBox[section.get('data-section-id')]) != 'undefined' && this.editBox[section.get('data-section-id')] != null && typeof(this.editBox[section.get('data-section-id')].dd) != 'undefined' && this.editBox[section.get('data-section-id')].dd != null) {
            this.editBox[section.get('data-section-id')].dd.addItem({
                html: '<span class="ui-edit">' + __('admin_widget', 'Edit', true) + '</span>'
            }).addSeparator().addItem({
                html: '<span class="ui-up">' + __('admin_widget', 'Insert a new item before', true) + '</span>'
            }).addSeparator().addItem({
                html: '<span class="ui-down">' + __('admin_widget', 'Insert a new item after', true) + '</span>'
            }).addSeparator().addItem({
                html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
            });
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        var target = $(ev.target);
        var section = (target.hasClass('tpl-widget-section') ? target : target.getParent('.tpl-widget-section'));
        if (section && section.get('data-section-id')) {
            this.hideEditBox(section);
            this.editWidgetSettings(section);
        }
    },
    editableElementMouseEnter: function(el, section, ev) {
        if (section.get('data-section-id') && typeof(this.editBoxTimer[section.get('data-section-id')]) != 'undefined' && this.editBoxTimer[section.get('data-section-id')] != null) {
            clearTimeout(this.editBoxTimer[section.get('data-section-id')]);
            this.editBoxTimer[section.get('data-section-id')] = null;
        }
        if (section.get('data-section-id')) {
            this.bInsideBox[section.get('data-section-id')] = true;
        }
    },
    editableElementMouseLeave: function(el, section, ev) {
        if (section.get('data-section-id')) {
            this.bInsideBox[section.get('data-section-id')] = false;
            this.editBoxTimer[section.get('data-section-id')] = this.hideEditBox.delay(50, this, [section]);
        }
    },
    editableButtonClick: function(section, ev) {
        ev.preventDefault();
        if (section.get('data-section-id')) {
            if (typeof(this.editBox[section.get('data-section-id')]) != 'undefined' && this.editBox[section.get('data-section-id')].dd != null) {
                return;
            }
            this.hideEditBox(section);
            this.editWidgetSettings(section);
        }
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        var section = $(ev.target).getParent('.tpl-widget-section');
        if (section && section.get('data-section-id')) {
            this.hideEditBox(section);
            this.editWidgetSettings(section);
        }
    },
    editableDropdownItemClick: function(section, item) {
        var action = item.getElement('span').get('class');
        this.hideEditBox();
        switch (action) {
            case 'ui-edit':
                {
                    this.editWidgetSettings(section);
                    break;
                }
            case 'ui-up':
                {
                    this.updateWidget('add_section', 'before', section.get('data-section-id'));
                    break;
                }
            case 'ui-down':
                {
                    this.updateWidget('add_section', 'after', section.get('data-section-id'));
                    break;
                }
            case 'ui-delete':
                {
                    this.updateWidget('delete_section', section.get('data-section-id'));
                    break;
                }
        }
    },
    editWidgetSettings: function(section) {
        if (this.options.editable == false || section == null || section.get('data-section-id') == null) {
            return;
        }
        var data = {
            data: {
                Request: {
                    widget_id: this.id,
                    page_id: Object.getFromPath(this.page, 'id'),
                    language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                    url: Object.getFromPath(this.page, 'options.page.here_url'),
                    settings: this.layoutSettings,
                    section_id: section.get('data-section-id')
                }
            }
        };
        new CustomLayoutWidgetAdminWindowUI({
            requestData: data,
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    },
    updateWidget: function() {
        if (!arguments || typeof(arguments[0]) == 'undefined') {
            return;
        }
        var action = arguments[0];
        var data = {
            'data[Request][widget_id]': this.id,
            'data[Request][widget_short_name]': Object.getFromPath(this.options, 'short_name'),
            'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
            'data[Request][current_page_id]': Object.getFromPath(this.page, 'id'),
            'data[Request][language_id]': Object.getFromPath(this.page, 'options.page.language_id'),
            'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
            'data[Request][action]': action,
            'data[Request][settings]': this.layoutSettings
        };
        switch (action) {
            case 'add_section':
                {
                    if (typeof(arguments[1]) != 'undefined' && typeof(arguments[2]) != 'undefined') {
                        data['data[Request][where]'] = arguments[1];
                        data['data[Request][section_id]'] = arguments[2];
                    }
                    break;
                }
            case 'delete_section':
                {
                    if (typeof(arguments[1]) != 'undefined') {
                        data['data[Request][section_id]'] = arguments[1];
                    }
                    break;
                }
        }
        var fn = (function() {
            this.website.request({
                url: '/admin_custom_core_widgets_ui/update_custom_widget_data/',
                method: 'post',
                data: Object.toQueryString(data),
                onRequest: function() {
                    this.setBusy(true);
                    this.website.websiteRequest();
                }.bind(this),
                onFailure: function() {
                    this.setBusy(false);
                    this.website.websiteRequestFailure();
                }.bind(this),
                onError: function(text, error) {
                    this.setBusy(false);
                    this.website.websiteRequestFailure();
                }.bind(this),
                onSuccess: function(response) {
                    this.setBusy(false);
                    this.website.loadingBox(false);
                    if (this.website.hasAccess(response, {
                            frontendRequest: false,
                            showLoginWindow: true,
                            showWarningWindow: true,
                            onLoginSuccess: function() {
                                fn.apply();
                            }
                        }) == false) {
                        return;
                    }
                    if (this.website.isError(response, {
                            frontendRequest: false,
                            showWarningWindow: true
                        }) == true) {
                        return;
                    }
                    if (Object.getFromPath(response, 'updated') && response.updated == true) {
                        if (this.website.options.auto_publishing == false && this.website.statusBar && typeof(response.status_bar_unpublished_count) != 'undefined' && typeof(response.status_bar_publish_type) != 'undefined' && typeof(response.status_bar_text) != 'undefined' && typeof(response.status_bar_button_text) != 'undefined' && typeof(response.status_bar_radio_current_text) != 'undefined' && typeof(response.status_bar_radio_all_text) != 'undefined') {
                            if (response.status_bar_unpublished_count > 0) {
                                this.website.statusBar.show({
                                    unpublished: response.status_bar_unpublished_count,
                                    publish_type: response.status_bar_publish_type,
                                    text: response.status_bar_text,
                                    button_text: response.status_bar_button_text,
                                    radio_current_text: response.status_bar_radio_current_text,
                                    radio_all_text: response.status_bar_radio_all_text
                                });
                            } else {
                                this.website.statusBar.hide();
                            }
                        }
                        if (Object.getFromPath(response, 'page_widget.id') && Object.getFromPath(response, 'widget_content') && Object.getFromPath(response, 'widget_content').length > 0 && Object.getFromPath(response, 'css_assets') && Object.getFromPath(response, 'js_assets')) {
                            var target = null;
                            var where = null;
                            var prevEl = (this.element ? this.element.getPrevious() : null);
                            var nextEl = (this.element ? this.element.getNext() : null);
                            if (prevEl) {
                                target = prevEl;
                                where = 'after';
                            } else if (nextEl) {
                                target = nextEl;
                                where = 'before';
                            } else if (this.element) {
                                target = this.element.getParent();
                                where = 'bottom';
                            }
                            this.website.page.insertWidget({
                                target: target,
                                where: where,
                                page_widget: Object.getFromPath(response, 'page_widget'),
                                widget_content: Object.getFromPath(response, 'widget_content'),
                                css_assets: Object.getFromPath(response, 'css_assets'),
                                js_assets: Object.getFromPath(response, 'js_assets'),
                                onInit: function(widget) {
                                    switch (action) {
                                        case 'add_section':
                                            {
                                                if (Object.getFromPath(response, 'new_section_id') && response.new_section_id !== null) {
                                                    var section = widget.element.getElement('.tpl-widget-section[data-section-id="' + response.new_section_id + '"]');
                                                    if (section) {
                                                        widget.editWidgetSettings.delay(50, widget, [section]);
                                                    }
                                                }
                                                break;
                                            }
                                    }
                                }
                            }, true);
                        }
                    } else {
                        new IWindowUI.Error(__('admin_core', 'Error', true), __('admin_core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later.", true), {
                            onShow: function() {
                                this.element.getElement('input[type=button]').focus();
                            }
                        });
                    }
                }.bind(this)
            });
        }).bind(this);
        switch (action) {
            case 'delete_section':
                {
                    var self = this;new IWindowUI.Confirm(__('admin_widget', 'Delete section?', true), __('admin_widget', 'Are you sure you want to delete this section?', true), {
                        buttons: [{
                            text: __('admin_core', 'Yes', true),
                            properties: {
                                'class': 'ui-window-button-small ui-ok-button'
                            }
                        }, {
                            text: __('admin_core', 'No', true),
                            properties: {
                                'class': 'ui-window-button-small ui-cancel-button'
                            }
                        }],
                        classes: {
                            icon: 'ui-delete'
                        },
                        pin: true,
                        positionOnResize: true,
                        modal: true,
                        draggable: true,
                        destroyOnClose: true,
                        closeOnEsc: true,
                        onShow: function() {
                            self.website.detach();
                            this.element.getElement('input.ui-cancel-button').focus();
                        },
                        onConfirm: function() {
                            this.runOnHide = true;
                            this.hide(true);
                        },
                        onCancel: function() {
                            this.hide(true);
                        },
                        onHide: function() {
                            self.website.attach();
                            if (this.runOnHide) {
                                fn.apply();
                            }
                        }
                    });
                    break;
                }
            default:
                {
                    fn.apply();
                }
        }
    },
    destroy: function() {
        this.detach();
        if (this.admin == true) {
            this.element.getElements('.tpl-widget-section').each(function(section) {
                if (section.get('data-section-id')) {
                    this.editBoxFrozen[section.get('data-section-id')] = false;
                    this.hideEditBox(section);
                }
            }, this);
        }
        if (Object.getFromPath(this.page.options.page_widgets, this.element.get('id'))) {
            Object.erase(this.page.options.page_widgets, this.element.get('id'));
        }
        if (this.element) {
            this.element.destroy();
        }
    }
});
var CustomMenuWidget = new Class({
    Extends: CustomWidget,
    options: {
        name: 'Custom menu',
        short_name: 'custom_menu',
        dropdown: true
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        switch (true) {
            case (el.hasClass('tpl-settings')):
                {
                    this.editWidgetSettings();
                    break;
                }
            default:
                {
                    this.editWidgetContent();
                    break;
                }
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editableButtonClick: function(ev) {
        ev.preventDefault();
        if (this.options.dropdown == false) {
            this.hideEditBox();
            this.editWidgetContent();
        }
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                }).addSeparator().addItem({
                    html: '<span class="ui-edit">' + __('admin_widget', 'Edit menu', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetContent: function() {
        if (this.options.editable == false) {
            return;
        }
        new MenuEditorWindowUI({
            menuEditorOptions: {
                navigation: {
                    currentPage: Object.getFromPath(this.page, 'id')
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website);
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        var settings = (this.element.get('data-admin-settings') && this.element.get('data-admin-settings').length > 0 ? JSON.decode(this.element.get('data-admin-settings')) : {});
        var data = {
            data: {
                Request: {
                    widget_id: this.id,
                    page_id: Object.getFromPath(this.page, 'id'),
                    language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                    url: Object.getFromPath(this.page, 'options.page.here_url')
                }
            }
        };
        if (typeof(settings.pageVisibilityCheck) != 'undefined') {
            data['data[Request][settings][pageVisibilityCheck]'] = settings.pageVisibilityCheck;
        }
        new CustomMenuWidgetAdminWindowUI({
            requestData: data,
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var CustomNewsletterFormWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Custom newsletter form',
        short_name: 'custom_newsletter_form',
        editable: false
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.create.delay(1, this);
    },
    create: function() {
        if (this.captchaType) {
            switch (this.captchaType) {
                case 'rc':
                case 'irc':
                    {
                        var fn = (function() {
                            var existing = $$('script[src]');
                            var rcScript = null;
                            var rcAsset = 'https://www.google.com/recaptcha/api.js?render=explicit&onload=renderReCaptchaElements&hl=' + Object.getFromPath(this.page, 'options.page.language_code');
                            existing.each(function(a) {
                                if (!rcScript && rcAsset == a.get('src')) {
                                    rcScript = a;
                                }
                            });
                            var onScriptLoad = function() {
                                this.form.getElements('.g-recaptcha').each(function(el) {
                                    if (typeof(grecaptcha) != 'undefined' && typeof(grecaptcha.render) != 'undefined') {
                                        var elData = {
                                            'sitekey': el.get('data-sitekey'),
                                            'callback': el.get('data-callback'),
                                            'size': el.get('data-size')
                                        };
                                        var wId = grecaptcha.render(el, elData);
                                        el.set('data-wid', wId);
                                    } else {
                                        this.page.queueReCaptchaElement(el);
                                    }
                                }, this);
                                this.elementResized();
                            }.bind(this);
                            if (!rcScript) {
                                rcScript = new Element('script', {
                                    'src': rcAsset,
                                    'type': 'text/javascript',
                                    'async': '',
                                    'defer': ''
                                });
                                if (typeof rcScript.onreadystatechange != 'undefined') {
                                    rcScript.addEvent('readystatechange', function() {
                                        if (['loaded', 'complete'].contains(this.readyState)) {
                                            rcScript.set('data-loaded', 'true');
                                            onScriptLoad.apply();
                                        }
                                    });
                                } else {
                                    rcScript.addEvent('load', function() {
                                        rcScript.set('data-loaded', 'true');
                                        onScriptLoad.apply();
                                    });
                                }
                                rcScript.inject(document.body);
                            } else {
                                if (rcScript.get('data-loaded') == 'true') {
                                    onScriptLoad.apply();
                                } else {
                                    if (typeof rcScript.onreadystatechange != 'undefined') {
                                        rcScript.addEvent('readystatechange', function() {
                                            if (['loaded', 'complete'].contains(this.readyState)) {
                                                onScriptLoad.apply();
                                            }
                                        });
                                    } else {
                                        rcScript.addEvent('load', function() {
                                            onScriptLoad.apply();
                                        });
                                    }
                                }
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                        break;
                    }
                case 'rc_v3':
                    {
                        var fn = (function() {
                            if (!this.captchaData || typeof(this.captchaData.sitekey) == 'undefined' || typeof(this.captchaData.action) == 'undefined') {
                                return;
                            }
                            var existing = $$('script[src]');
                            var rcScript = null;
                            var rcAsset = 'https://www.google.com/recaptcha/api.js?render=' + this.captchaData.sitekey;
                            existing.each(function(a) {
                                if (!rcScript && rcAsset == a.get('src')) {
                                    rcScript = a;
                                }
                            });
                            if (!rcScript) {
                                rcScript = new Element('script', {
                                    'src': rcAsset,
                                    'type': 'text/javascript',
                                    'async': '',
                                    'defer': ''
                                });
                                if (typeof rcScript.onreadystatechange != 'undefined') {
                                    rcScript.addEvent('readystatechange', function() {
                                        if (['loaded', 'complete'].contains(this.readyState)) {
                                            rcScript.set('data-loaded', 'true');
                                        }
                                    });
                                } else {
                                    rcScript.addEvent('load', function() {
                                        rcScript.set('data-loaded', 'true');
                                    });
                                }
                                rcScript.inject(document.body);
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                        break;
                    }
            }
        }
    },
    initVariables: function() {
        this.parent();
        this.form = this.element.getElement('form');
        this.validator = null;
        this.captchaType = (this.form && this.form.get('data-ct') ? this.form.get('data-ct') : false);
        this.captchaData = (this.form && this.form.get('data-cd') ? JSON.decode(this.form.get('data-cd')) : false);
    },
    attach: function() {
        this.parent();
        switch (this.captchaType) {
            case 'irc':
                {
                    window['onCustomNewsletterForm' + this.id + 'Submit'] = this.manualFormSubmit.bind(this);window['onCustomNewsletterForm' + this.id + 'Error'] = this.newsletterFormError.bind(this);
                    break;
                }
        }
        if (this.validator) {
            this.validator.attach();
        } else if (this.form && typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            customElAlerts['NewsletterSubscriberName_' + this.id] = __('form_check', 'Please enter a valid name.');
            customElAlerts['NewsletterSubscriberEmail_' + this.id] = __('form_check', 'Please enter a valid e-mail.');
            customElAlerts['NewsletterCaptchaCode_' + this.id] = __('form_check', 'Please enter the text from the picture.');
            var self = this;
            var msgBox = this.element.getElement('.tpl-message');
            var options = Object.merge(this.getValidatorOptions(), {
                submitByAjax: true,
                ajaxSubmitAction: '/ajax_core_widgets_ui/request/',
                ajaxData: {
                    'data[Request][widget_id]': this.id,
                    'data[Request][widget_name]': Object.getFromPath(this.options, 'short_name'),
                    'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                    'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
                    'data[Request][render]': 1,
                    'data[Request][process]': 1,
                    'data[Request][static]': 1
                },
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                },
                onBeforeSubmit: function() {
                    this.form.getElements('input[data-placeholder]').each(function(input) {
                        if (input.get('value').toLowerCase() == input.get('data-placeholder').toLowerCase()) {
                            input.set('value', '');
                        }
                    });
                }.bind(this)
            });
            switch (this.captchaType) {
                case 'irc':
                    {
                        options = Object.merge(options, {
                            submitByAjax: false,
                            customSubmit: true,
                            onCustomSubmit: function(ev) {
                                self.website.loadingBox(true);
                                var captchaEl = this.form.getElement('.g-recaptcha[data-wid]');
                                if (captchaEl && typeof(grecaptcha) != 'undefined') {
                                    grecaptcha.execute(captchaEl.get('data-wid'));
                                } else {
                                    self.manualFormSubmit();
                                }
                            }
                        });
                        break;
                    }
                case 'rc_v3':
                    {
                        options = Object.merge(options, {
                            submitByAjax: false,
                            customSubmit: true,
                            onCustomSubmit: function(ev) {
                                self.website.loadingBox(true);
                                grecaptcha.ready(function() {
                                    if (typeof(grecaptcha) != 'undefined' && self.captchaData && typeof(self.captchaData.sitekey) != 'undefined' && typeof(self.captchaData.action) != 'undefined') {
                                        grecaptcha.execute(self.captchaData.sitekey, {
                                            action: self.captchaData.action
                                        }).then(function(token) {
                                            new Element('input', {
                                                'type': 'hidden',
                                                'name': 'g-recaptcha-response',
                                                'value': token
                                            }).inject(self.form);
                                            self.manualFormSubmit();
                                        }).catch(function() {
                                            self.newsletterFormError();
                                        });
                                    } else {
                                        self.manualFormSubmit();
                                    }
                                });
                            }
                        });
                        break;
                    }
            }
            this.validator = new FormCheck(this.form, options);
            Object.each(this.validator.options.alerts, function(msg, idx) {
                this.validator.options.alerts[idx] = __('form_check', msg);
            }, this);
        }
        if (this.form) {
            this.form.getElements('input[data-placeholder]').each(function(input) {
                ['focus', 'blur'].each(function(value) {
                    var event = this['formInput' + value.capitalize()].bind(this, input);
                    input.store('event:formInput' + value.capitalize(), event).addEvent(value, event);
                }, this);
            }, this);
            var refreshLink = this.form.getElement('.tpl-refresh-captcha');
            if (refreshLink) {
                var event = this.refreshCaptchaClick.bind(this, refreshLink);
                refreshLink.store('event:refreshCaptchaClick', event).addEvent('click', event);
            }
        }
    },
    detach: function() {
        this.parent();
        switch (this.captchaType) {
            case 'irc':
                {
                    window['onCustomNewsletterForm' + this.id + 'Submit'] = undefined;window['onCustomNewsletterForm' + this.id + 'Error'] = undefined;
                    break;
                }
        }
        if (this.validator) {
            this.validator.detach();
        }
        if (this.form) {
            this.form.getElements('input[data-placeholder]').each(function(input) {
                ['focus', 'blur'].each(function(value) {
                    input.removeEvent(value, input.retrieve('event:formInput' + value.capitalize())).eliminate('event:formInput' + value.capitalize());
                }, this);
            }, this);
            var refreshLink = this.form.getElement('.tpl-refresh-captcha');
            if (refreshLink) {
                refreshLink.removeEvent('click', refreshLink.retrieve('event:refreshCaptchaClick')).eliminate('event:refreshCaptchaClick');
            }
        }
    },
    formInputFocus: function(input, ev) {
        if (input.get('value').toLowerCase() == input.get('data-placeholder').toLowerCase()) {
            input.set('value', '');
        }
    },
    formInputBlur: function(input, ev) {
        if (input.get('value').length == 0 || input.get('value').toLowerCase() == input.get('data-placeholder').toLowerCase()) {
            input.set('value', input.get('data-placeholder'));
        }
    },
    manualFormSubmit: function() {
        this.website.loadingBox(false);
        this.validator.submitByAjax();
    },
    newsletterFormError: function() {
        this.website.loadingBox(false);
    },
    refreshCaptchaClick: function(el, ev) {
        ev.preventDefault();
        var img = el.getParent('.tpl-form-row').getElement('.tpl-captcha-code');
        var src = (img ? img.get('src') : false);
        if (src && src.length > 0) {
            img.set('src', new URI(src).setData('rnd', Date.now()).toString());
        }
    }
});
var CustomPhotoWidget = new Class({
    Extends: CustomWidget,
    options: {
        name: 'Custom photo',
        short_name: 'custom_photo',
        editable: true,
        dropdown: true
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd && this.options.editable == true) {
            this.editBox.dd.addItem({
                html: '<span class="ui-edit">' + __('admin_widget', 'Select photo', true) + '</span>'
            });
            if (this.element.get('data-photo') && this.element.get('data-photo').length > 0) {
                this.editBox.dd.addSeparator().addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete photo', true) + '</span>'
                });
            }
        }
    },
    editableButtonClick: function(ev) {
        ev.preventDefault();
        if (this.options.dropdown == false) {
            this.hideEditBox();
            this.editWidgetSettings();
        }
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editableDropdownItemClick: function(item) {
        var action = item.getElement('span').get('class');
        this.hideEditBox();
        switch (action) {
            case 'ui-edit':
                {
                    this.editWidgetSettings();
                    break;
                }
            case 'ui-delete':
                {
                    this.deletePhoto();
                    break;
                }
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        var photoData = (this.element.get('data-photo') && this.element.get('data-photo').length > 0 ? JSON.decode(this.element.get('data-photo')) : null);
        var selectedObject = (photoData !== null && typeof(photoData.id) != 'undefined' ? photoData.id : false);
        var openedFolder = (selectedObject == false ? FS_IMAGES_FOLDER : false);
        var fmWin = new FileManagerWindowUI({
            title: __('admin_window_file_manager', 'Choose image', true),
            fileManagerOptions: {
                navigation: {
                    openedFolder: openedFolder
                },
                view: {
                    type: FS_ICONS_VIEW,
                    filters: [{
                        title: __('admin_window_file_manager', 'Images', true),
                        extensions: 'jpg,jpeg,png,gif,bmp,webp'
                    }],
                    selectionMode: FS_SINGLE_SELECTION,
                    selectionType: FS_SELECT_FILES,
                    selectedObject: selectedObject,
                    objectAction: {
                        folder: {
                            title: __('admin_window_file_manager', 'Explore', true),
                            className: 'ui-file-manager-listing-item-clickable',
                            action: {
                                click: 'open'
                            }
                        },
                        filePreview: {
                            title: __('admin_window_file_manager', 'Insert', true),
                            className: 'ui-file-manager-listing-item-clickable',
                            action: {
                                click: 'insert'
                            }
                        },
                        fileNoPreview: {
                            title: __('admin_window_file_manager', 'Insert', true),
                            className: 'ui-file-manager-listing-item-clickable',
                            action: {
                                click: 'insert'
                            }
                        }
                    }
                },
                onInsertObjects: function(objects) {
                    var onHide = false;
                    if (objects && typeOf(objects) == 'array') {
                        var object = objects.shift();
                        if (typeof(object.id) != 'undefined' && typeof(object.name) != 'undefined' && typeof(object.virtual_name) != 'undefined') {
                            onHide = (function() {
                                var data = {
                                    'data[Request][widget_id]': this.id,
                                    'data[Request][widget_short_name]': Object.getFromPath(this.options, 'short_name'),
                                    'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                                    'data[Request][current_page_id]': Object.getFromPath(this.page, 'id'),
                                    'data[Request][language_id]': Object.getFromPath(this.page, 'options.page.language_id'),
                                    'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url')
                                };
                                data['data[Request][file_id]'] = object.id;
                                var opts = {
                                    url: '/admin_custom_core_widgets_ui/update_custom_widget_data/',
                                    data: Object.toQueryString(data),
                                    onFailure: function() {
                                        new IWindowUI.Error(__('admin_core', 'Error communicating with the server', true), __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true), {
                                            onShow: function() {
                                                this.element.getElement('input[type=button]').focus();
                                            }
                                        });
                                    },
                                    onError: function(text, error) {
                                        new IWindowUI.Error(__('admin_core', 'Error communicating with the server', true), __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true), {
                                            onShow: function() {
                                                this.element.getElement('input[type=button]').focus();
                                            }
                                        });
                                    }.bind(this),
                                    onSuccess: function(response) {
                                        if (this.website.hasAccess(response, {
                                                frontendRequest: false,
                                                showLoginWindow: true,
                                                showWarningWindow: true,
                                                onLoginSuccess: function() {
                                                    fn.apply();
                                                }
                                            }) == false) {
                                            return;
                                        }
                                        if (this.website.isError(response, {
                                                frontendRequest: false,
                                                showWarningWindow: true
                                            }) == true) {
                                            return;
                                        }
                                        if (Object.getFromPath(response, 'updated') && response.updated == true) {
                                            if (this.website.options.auto_publishing == false && this.website.statusBar && typeof(response.status_bar_unpublished_count) != 'undefined' && typeof(response.status_bar_publish_type) != 'undefined' && typeof(response.status_bar_text) != 'undefined' && typeof(response.status_bar_button_text) != 'undefined' && typeof(response.status_bar_radio_current_text) != 'undefined' && typeof(response.status_bar_radio_all_text) != 'undefined') {
                                                if (response.status_bar_unpublished_count > 0) {
                                                    this.website.statusBar.show({
                                                        unpublished: response.status_bar_unpublished_count,
                                                        publish_type: response.status_bar_publish_type,
                                                        text: response.status_bar_text,
                                                        button_text: response.status_bar_button_text,
                                                        radio_current_text: response.status_bar_radio_current_text,
                                                        radio_all_text: response.status_bar_radio_all_text
                                                    });
                                                } else {
                                                    this.website.statusBar.hide();
                                                }
                                            }
                                            if (Object.getFromPath(response, 'page_widget.id') && Object.getFromPath(response, 'widget_content') && Object.getFromPath(response, 'widget_content').length > 0 && Object.getFromPath(response, 'css_assets') && Object.getFromPath(response, 'js_assets')) {
                                                var target = null;
                                                var where = null;
                                                var prevEl = (this.element ? this.element.getPrevious() : null);
                                                var nextEl = (this.element ? this.element.getNext() : null);
                                                if (prevEl) {
                                                    target = prevEl;
                                                    where = 'after';
                                                } else if (nextEl) {
                                                    target = nextEl;
                                                    where = 'before';
                                                } else if (this.element) {
                                                    target = this.element.getParent();
                                                    where = 'bottom';
                                                }
                                                this.website.page.insertWidget({
                                                    target: target,
                                                    where: where,
                                                    page_widget: Object.getFromPath(response, 'page_widget'),
                                                    widget_content: Object.getFromPath(response, 'widget_content'),
                                                    css_assets: Object.getFromPath(response, 'css_assets'),
                                                    js_assets: Object.getFromPath(response, 'js_assets')
                                                }, true);
                                            }
                                        } else {
                                            new IWindowUI.Error(__('admin_core', 'Error', true), __('admin_core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later.", true), {
                                                onShow: function() {
                                                    this.element.getElement('input[type=button]').focus();
                                                }
                                            });
                                        }
                                    }.bind(this)
                                };
                                var fn = (function() {
                                    new Request.JSON(opts).send();
                                }).bind(this);
                                fn.apply();
                            }).bind(this);
                        }
                    }
                    if (onHide) {
                        fmWin.win.addEvent('hide', onHide);
                    }
                    fmWin.win.hide(true);
                }.bind(this)
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        (function() {
                            this.website.attach();
                        }).delay(10, this);
                    }.bind(this)
                });
            }.bind(this),
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website);
    },
    deletePhoto: function() {
        var data = {
            'data[Request][widget_id]': this.id,
            'data[Request][widget_short_name]': Object.getFromPath(this.options, 'short_name'),
            'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
            'data[Request][current_page_id]': Object.getFromPath(this.page, 'id'),
            'data[Request][language_id]': Object.getFromPath(this.page, 'options.page.language_id'),
            'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url')
        };
        data['data[Request][file_id]'] = 0;
        var opts = {
            url: '/admin_custom_core_widgets_ui/update_custom_widget_data/',
            data: Object.toQueryString(data),
            onFailure: function() {
                new IWindowUI.Error(__('admin_core', 'Error communicating with the server', true), __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true), {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    }
                });
            },
            onError: function(text, error) {
                new IWindowUI.Error(__('admin_core', 'Error communicating with the server', true), __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true), {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    }
                });
            }.bind(this),
            onSuccess: function(response) {
                if (this.website.hasAccess(response, {
                        frontendRequest: false,
                        showLoginWindow: true,
                        showWarningWindow: true,
                        onLoginSuccess: function() {
                            fn.apply();
                        }
                    }) == false) {
                    return;
                }
                if (this.website.isError(response, {
                        frontendRequest: false,
                        showWarningWindow: true
                    }) == true) {
                    return;
                }
                if (Object.getFromPath(response, 'updated') && response.updated == true) {
                    if (this.website.options.auto_publishing == false && this.website.statusBar && typeof(response.status_bar_unpublished_count) != 'undefined' && typeof(response.status_bar_publish_type) != 'undefined' && typeof(response.status_bar_text) != 'undefined' && typeof(response.status_bar_button_text) != 'undefined' && typeof(response.status_bar_radio_current_text) != 'undefined' && typeof(response.status_bar_radio_all_text) != 'undefined') {
                        if (response.status_bar_unpublished_count > 0) {
                            this.website.statusBar.show({
                                unpublished: response.status_bar_unpublished_count,
                                publish_type: response.status_bar_publish_type,
                                text: response.status_bar_text,
                                button_text: response.status_bar_button_text,
                                radio_current_text: response.status_bar_radio_current_text,
                                radio_all_text: response.status_bar_radio_all_text
                            });
                        } else {
                            this.website.statusBar.hide();
                        }
                    }
                    if (Object.getFromPath(response, 'page_widget.id') && Object.getFromPath(response, 'widget_content') && Object.getFromPath(response, 'widget_content').length > 0 && Object.getFromPath(response, 'css_assets') && Object.getFromPath(response, 'js_assets')) {
                        var target = null;
                        var where = null;
                        var prevEl = (this.element ? this.element.getPrevious() : null);
                        var nextEl = (this.element ? this.element.getNext() : null);
                        if (prevEl) {
                            target = prevEl;
                            where = 'after';
                        } else if (nextEl) {
                            target = nextEl;
                            where = 'before';
                        } else if (this.element) {
                            target = this.element.getParent();
                            where = 'bottom';
                        }
                        this.website.page.insertWidget({
                            target: target,
                            where: where,
                            page_widget: Object.getFromPath(response, 'page_widget'),
                            widget_content: Object.getFromPath(response, 'widget_content'),
                            css_assets: Object.getFromPath(response, 'css_assets'),
                            js_assets: Object.getFromPath(response, 'js_assets')
                        }, true);
                    }
                } else {
                    new IWindowUI.Error(__('admin_core', 'Error', true), __('admin_core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later.", true), {
                        onShow: function() {
                            this.element.getElement('input[type=button]').focus();
                        }
                    });
                }
            }.bind(this)
        };
        var self = this;
        var fn = (function() {
            new Request.JSON(opts).send();
        }).bind(this);
        new IWindowUI.Confirm(__('admin_widget', 'Delete photo?', true), __('admin_widget', 'Are you sure you want to delete the photo from this widget?', true), {
            buttons: [{
                text: __('admin_core', 'Yes', true),
                properties: {
                    'class': 'ui-window-button-small ui-ok-button'
                }
            }, {
                text: __('admin_core', 'No', true),
                properties: {
                    'class': 'ui-window-button-small ui-cancel-button'
                }
            }],
            classes: {
                icon: 'ui-delete'
            },
            pin: true,
            positionOnResize: true,
            modal: true,
            draggable: true,
            destroyOnClose: true,
            closeOnEsc: true,
            onShow: function() {
                self.website.detach();
                this.element.getElement('input.ui-cancel-button').focus();
            },
            onConfirm: function() {
                this.runOnHide = true;
                this.hide(true);
            },
            onCancel: function() {
                this.hide(true);
            },
            onHide: function() {
                self.website.attach();
                if (this.runOnHide) {
                    fn.apply();
                }
            }
        });
    }
});
var CustomPhotoGalleryWidget = new Class({
    Extends: CustomWidget,
    options: {
        name: 'Custom photo gallery',
        short_name: 'custom_photo_gallery',
        editable: true
    },
    initVariables: function() {
        this.parent();
        this.lightbox = null;
    },
    attach: function() {
        this.parent();
        if (this.lightbox) {
            this.lightbox.attach();
        } else {
            var fn = (function() {
                var container = this.element.getElement('.tpl-custom-photo-gallery-wrapper');
                if (container) {
                    var self = this;
                    this.lightbox = new Lightbox(container, {
                        text: {
                            close: __('core', 'Close')
                        },
                        getItems: function(container) {
                            return container.getElements('.tpl-custom-photo-gallery-item a[href]');
                        },
                        getItem: function(item) {
                            return item.getParent('.tpl-custom-photo-gallery-item');
                        },
                        parseItem: function(item) {
                            var data = (item.get('data-image') && item.get('data-image').length > 0 ? JSON.decode(item.get('data-image')) : null);
                            return {
                                element: item,
                                src: item.get('href'),
                                description: (typeof(data.description) != 'undefined' ? data.description : '')
                            };
                        },
                        onLoadPhoto: function(options) {
                            var previous = container.getElement('.tpl-custom-photo-gallery-item.tpl-current');
                            var current = this.getItem(options.element);
                            if (current != previous) {
                                previous.removeClass('tpl-current');
                                if (!current.hasClass('tpl-current')) {
                                    current.addClass('tpl-current');
                                }
                            }
                        }
                    });
                }
            }).bind(this);
            if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                fn.apply();
            } else {
                window.addEvent('load', fn);
            }
        }
    },
    detach: function() {
        this.parent();
        if (this.lightbox) {
            this.lightbox.detach();
        }
    },
    editableButtonClick: function(ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        var settings = (this.element.get('data-admin-settings') && this.element.get('data-admin-settings').length > 0 ? JSON.decode(this.element.get('data-admin-settings')) : {});
        var data = {
            data: {
                Request: {
                    widget_id: this.id,
                    page_id: Object.getFromPath(this.page, 'id'),
                    language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                    url: Object.getFromPath(this.page, 'options.page.here_url'),
                    settings: settings
                }
            }
        };
        new CustomPhotoGalleryWidgetAdminWindowUI({
            requestData: data,
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var CustomSlideshowWidget = new Class({
    Extends: CustomWidget,
    Implements: SlideshowCommonWidget,
    options: {
        name: 'Custom slideshow',
        short_name: 'custom_slideshow',
        editable: true
    },
    initVariables: function() {
        this.parent();
        this.initSlideshow();
    },
    attach: function() {
        this.parent();
        this.attachSlideshow();
    },
    detach: function() {
        this.parent();
        this.detachSlideshow();
    },
    resizeSlideshow: function() {
        if (this.slideshow) {
            this.slideshow.box.setStyles({
                position: 'relative',
                top: 0,
                left: 0
            });
            this.slideshow.items.setStyle('width', null);
            var size = this.element.getElement('.tpl-slideshow-container').getComputedSize({
                styles: ['border', 'padding', 'margin']
            });
            switch (this.slideshow.options.mode) {
                case 'vertical':
                    this.slideshow.setOptions({
                        size: size.height
                    });
                    break;
                case 'horizontal':
                    this.slideshow.setOptions({
                        size: size.width
                    });
                    break;
            }
            this.slideshow.items.setStyles({
                width: size.width,
                height: size.height
            });
            this.slideshow.box.setStyles({
                position: 'absolute',
                top: 0,
                left: 0
            });
            var i = this.slideshow.currentIndex;
            this.slideshow.currentIndex = null;
            this.slideshow.previousIndex = null;
            this.slideshow.nextIndex = null;
            this.slideshow.box.setStyle(this.slideshow.modes[this.slideshow.mode][1], (this.slideshow.options.size * this.slideshow.items.length) + 'px');
            if (this.slideshow.options.fade == true) {
                this.slideshow.fading(i, true, true);
            } else {
                this.slideshow.walk(i, true, true);
            }
        }
    },
    editableButtonClick: function(ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    showEditBox: function() {
        this.parent();
        this.setZindex();
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        var settings = (this.element.get('data-admin-settings') && this.element.get('data-admin-settings').length > 0 ? JSON.decode(this.element.get('data-admin-settings')) : {});
        var data = {
            data: {
                Request: {
                    widget_id: this.id,
                    page_id: Object.getFromPath(this.page, 'id'),
                    language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                    url: Object.getFromPath(this.page, 'options.page.here_url'),
                    settings: settings
                }
            }
        };
        new CustomSlideshowWidgetAdminWindowUI({
            requestData: data,
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var DibsPaymentFormWidget = new Class({
    Extends: Widget,
    options: {
        name: 'DIBS payment form',
        short_name: 'dibs_payment_form'
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.form = this.element.getElement('form');
        if (this.form) {
            this.form.getElements('.tpl-payment-indicator.tpl-js-off').hide();
            this.form.getElements('.tpl-payment-indicator.tpl-js-on').setStyle('visibility', null);
            (function() {
                this.form.submit();
            }).delay(200, this);
        }
    }
});
var DisqusCommentsWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Disqus comments',
        short_name: 'disqus_comments',
        dropdown: true
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.create.delay(1, this);
    },
    initVariables: function() {
        this.parent();
        this.bound = Object.merge(this.bound, {
            modalLayerClick: this.modalLayerClick.bind(this)
        });
    },
    create: function() {
        var fn = (function() {
            var dsqDataEl = this.element.getElement('.tpl-dsq-comments');
            var dsqShortName = (dsqDataEl ? dsqDataEl.get('data-short-name') : false);
            var dsqIdentifier = (dsqDataEl ? dsqDataEl.get('data-identifier') : '');
            var dsqUrl = (dsqDataEl ? dsqDataEl.get('data-href') : '');
            if (!dsqDataEl || !dsqShortName) {
                return;
            }
            var dsqScript = null;
            var dsqAsset = 'http://' + dsqShortName + '.disqus.com/embed.js';
            if (typeof(window.DISQUS) != 'undefined') {
                $$('script[id=disqus-wjs], script[id=disqus-wcfg]').each(function(a) {
                    a.destroy();
                });
                window.DISQUS = undefined;
            }
            var dsqFnName = 'onDsqLoad' + this.id;
            window[dsqFnName] = function() {
                if (this.admin == true && this.editBox && this.bInsideBox == true) {
                    this.positionEditBox();
                }
            }.bind(this);
            dsqCfgScript = new Element('script', {
                'id': 'disqus-wcfg',
                'type': 'text/javascript'
            });
            dsqCfgScript.text = "var disqus_shortname = '" + dsqShortName + "'; " + "var disqus_identifier = '" + dsqIdentifier + "';" + "var disqus_url = '" + dsqUrl + "';" + "var disqus_config = function () { " + " this.language = '" + this.getLanguageCode() + "'; " + " this.callbacks.onReady.push(" + "     window['" + dsqFnName + "']" + " );" + "};"
            dsqCfgScript.inject(document.body);
            dsqScript = new Element('script', {
                'id': 'disqus-wjs',
                'src': dsqAsset,
                'type': 'text/javascript'
            });
            if (typeof dsqScript.onreadystatechange != 'undefined') {
                dsqScript.addEvent('readystatechange', function() {
                    if (['loaded', 'complete'].contains(this.readyState)) {
                        window[dsqFnName].apply();
                    }
                });
            } else {
                dsqScript.addEvent('load', function() {
                    window[dsqFnName].apply();
                });
            }
            dsqScript.inject(document.body);
        }).bind(this);
        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
            fn.apply();
        } else {
            window.addEvent('load', fn);
        }
    },
    attachAdminUI: function() {
        this.parent();
        var modalLayer = this.element.getElement('.tpl-widget-content-overlay');
        if (modalLayer) {
            modalLayer.addEvent('click', this.bound.modalLayerClick);
        }
    },
    detachAdminUI: function() {
        this.parent();
        var modalLayer = this.element.getElement('.tpl-widget-content-overlay');
        if (modalLayer) {
            modalLayer.removeEvent('click', this.bound.modalLayerClick);
        }
    },
    createComplete: function() {
        this.editWidgetSettings({
            requestData: {
                'data[Request][added]': 1
            }
        });
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        this.website.hideTips();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    modalLayerClick: function(ev) {
        this.website.hideTips();
        this.website.notifyAdmin(__('admin_core', 'Administration mode', true), __('admin_core', 'The interaction with this widget is disabled in the administration panel. Click the "Preview" button in the top toolbar, if you want to test the functionality of the widget.', true), {
            width: 450,
            duration: 10000,
            classes: {
                title: '',
                icon: 'ui-tip'
            },
            onHide: function(item, length) {
                if (this.website.tips.contains(item)) {
                    this.website.tips.erase(item);
                }
            }.bind(this)
        });
        this.website.tips.push(this.website.adminNotifier.items.getLast());
    },
    editWidgetSettings: function(options) {
        if (this.options.editable == false) {
            return;
        }
        var options = Object.merge({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }, options);
        new DisqusCommentsWidgetAdminWindowUI(options).set('website', this.website).set('widget', this);
    },
    getLanguageCode: function() {
        var lang = '';
        var locale = Object.getFromPath(this.page, 'options.page.language_locale').replace(/-/gi, '_');
        var parts = locale.toLowerCase().split('_');
        if (typeOf(parts) == 'array' && parts.length == 2) {
            lang = parts[0];
            switch (locale) {
                case 'ca_ES':
                case 'pt_BR':
                case 'es_MX':
                case 'es_ES':
                case 'sv_SE':
                    {
                        lang = locale;
                        break;
                    }
            }
        }
        return lang;
    }
});
var FacebookCommentsWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Facebook comments',
        short_name: 'facebook_comments',
        dropdown: true
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.create.delay(1, this);
    },
    initVariables: function() {
        this.parent();
        this.bound = Object.merge(this.bound, {
            modalLayerClick: this.modalLayerClick.bind(this)
        });
        this.tooltips = [];
    },
    create: function() {
        var fn = (function() {
            var existing = $$('script[src]');
            var bExists = false;
            var fbContainer = this.element.getElement('.tpl-facebook-comments-container');
            var fbScript = null;
            var fbAsset = 'https://connect.facebook.net/' + Object.getFromPath(this.page, 'options.page.language_locale').replace(/-/i, '_') + '/all.js';
            existing.each(function(a) {
                if (bExists == false && fbAsset == a.get('src')) {
                    fbScript = a;
                    bExists = true;
                }
            });
            var onFbLoad = function() {
                FB.XFBML.parse(fbContainer);
                if (this.admin == true && this.editBox && this.bInsideBox == true) {
                    this.positionEditBox();
                }
            }.bind(this);
            if (bExists == false) {
                fbScript = new Element('script', {
                    'id': 'facebook-jssdk',
                    'src': fbAsset,
                    'type': 'text/javascript'
                });
                if (typeof fbScript.onreadystatechange != 'undefined') {
                    fbScript.addEvent('readystatechange', function() {
                        if (['loaded', 'complete'].contains(this.readyState)) {
                            fbScript.set('data-loaded', 'true');
                            onFbLoad.apply();
                        }
                    });
                } else {
                    fbScript.addEvent('load', function() {
                        fbScript.set('data-loaded', 'true');
                        onFbLoad.apply();
                    });
                }
                fbScript.inject(document.body);
            } else {
                if (fbScript.get('data-loaded') == 'true') {
                    onFbLoad.apply();
                } else {
                    if (typeof fbScript.onreadystatechange != 'undefined') {
                        fbScript.addEvent('readystatechange', function() {
                            if (['loaded', 'complete'].contains(this.readyState)) {
                                onFbLoad.apply();
                            }
                        });
                    } else {
                        fbScript.addEvent('load', function() {
                            onFbLoad.apply();
                        });
                    }
                }
            }
        }).bind(this);
        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
            fn.apply();
        } else {
            window.addEvent('load', fn);
        }
    },
    attachAdminUI: function() {
        this.parent();
        var modalLayer = this.element.getElement('.tpl-widget-content-overlay');
        if (modalLayer) {
            modalLayer.addEvent('click', this.bound.modalLayerClick);
        }
        this.element.getElements('.tpl-facebook-tools-link').each(function(el) {
            var event = this.toolbarItemMouseEnter.bind(this, el);
            el.store('event:toolbarItemMouseEnter', event).addEvent('mouseenter', event);
            var event = this.toolbarItemMouseLeave.bind(this, el);
            el.store('event:toolbarItemMouseLeave', event).addEvent('mouseleave', event);
            var event = this.toolbarItemClick.bind(this, el);
            el.store('event:toolbarItemClick', event).addEvent('click', event);
        }, this);
        if (this.tooltips.length > 0) {
            this.tooltips.each(function(t) {
                t.attach();
            });
        } else {
            var self = this;
            this.element.getElements('.tpl-facebook-tools-help span').each(function(el) {
                var title = '';
                var text = el.get('title');
                switch (true) {
                    case el.hasClass('tpl-moderate'):
                        {
                            title = __('admin_widget', 'How to become a moderator?', true);
                            break;
                        }
                    case el.hasClass('tpl-clear-cache'):
                        {
                            title = __('admin_widget', 'Why don\'t I see the moderation tools?', true);
                            break;
                        }
                }
                this.tooltips.push(new FadingTooltipUI(el, {
                    title: title,
                    text: text,
                    textTag: 'span',
                    width: 350,
                    displayMode: 1,
                    offset: {
                        x: Browser.ie ? 15 : 14,
                        y: Browser.ie ? -5 : -4
                    },
                    hook: {
                        target: 'topRight',
                        tip: 'topLeft'
                    },
                    container: $('PageContent'),
                    relative: true,
                    relativeParentElement: $('PageContent'),
                    classes: {
                        tooltip: 'ui-tooltip clearfix',
                        arrow: 'ui-tooltip-arrow ui-left'
                    },
                    positionTip: function() {
                        var tipSize = this.tooltip.measure(function() {
                            return this.getSize();
                        });
                        var offset = this.options.offset;
                        var scrollableSize = $('PageWrapper').getScrollSize();
                        var relObj = (this.options.relativeParentElement != false ? (typeOf(this.options.relativeParentElement) == 'element' ? this.options.relativeParentElement : this.eventTarget.getParent(this.options.relativeParentElement)) : this.eventTarget.getOffsetParent());
                        var targetCoords = this.eventTarget.getRelativeCoordinates(relObj);
                        if (targetCoords.right + tipSize.x + offset.x > scrollableSize.x) {
                            switch (this.eventTarget.tagName.toLowerCase()) {
                                case 'input':
                                    {
                                        offset = {
                                            x: Browser.ie ? 5 : 4,
                                            y: Browser.ie ? -11 : -10
                                        };
                                        break;
                                    }
                                case 'textarea':
                                    {
                                        offset = {
                                            x: Browser.ie ? 5 : 7,
                                            y: Browser.ie ? -16 : -15
                                        };
                                        break;
                                    }
                                case 'a':
                                    {
                                        offset = {
                                            x: 0,
                                            y: -10
                                        };
                                        break;
                                    }
                                case 'div':
                                    {
                                        offset = {
                                            x: 5,
                                            y: -14
                                        };
                                        break;
                                    }
                            }
                            if (targetCoords.top - tipSize.y + offset.y > 0 || targetCoords.bottom + tipSize.y + offset.y > scrollableSize.y) {
                                this.options.hook = {
                                    target: 'topRight',
                                    tip: 'bottomRight'
                                };
                                this.tooltip.getElement('.ui-tooltip-arrow').set('class', 'ui-tooltip-arrow ui-bottom-right');
                            } else {
                                this.options.hook = {
                                    target: 'bottomRight',
                                    tip: 'topRight'
                                };
                                this.tooltip.getElement('.ui-tooltip-arrow').set('class', 'ui-tooltip-arrow ui-top-right');
                                offset = {
                                    x: offset.x,
                                    y: -offset.y
                                };
                            }
                        } else {
                            if (targetCoords.top + tipSize.y + offset.y > scrollableSize.y && targetCoords.bottom - tipSize.y + offset.y > 0) {
                                this.options.hook = {
                                    target: 'topRight',
                                    tip: 'bottomLeft'
                                };
                                this.tooltip.getElement('.ui-tooltip-arrow').set('class', 'ui-tooltip-arrow ui-left-bottom');
                                offset = {
                                    x: offset.x,
                                    y: 24
                                };
                            } else {
                                this.options.hook = {
                                    target: 'topRight',
                                    tip: 'topLeft'
                                };
                                this.tooltip.getElement('.ui-tooltip-arrow').set('class', 'ui-tooltip-arrow ui-left');
                            }
                        }
                        this.positionModify(targetCoords, this.options.hook.target, 1);
                        this.positionModify(targetCoords, this.options.hook.tip, -1);
                        targetCoords.left += offset.x;
                        targetCoords.top += offset.y;
                        this.tooltip.setStyles({
                            top: targetCoords.top + 'px',
                            left: targetCoords.left + 'px'
                        });
                        return true;
                    },
                    onShow: function(tooltip) {
                        if (!(Browser.ie && Math.round(Browser.version) < 9)) {
                            var bShow = this.position();
                            if (bShow == true) {
                                if (this.tooltip.getStyle('display') == 'none') {
                                    this.tooltip.show();
                                }
                                this.fx.start({
                                    opacity: 1
                                });
                                this.display = true;
                            }
                        } else {
                            var bShow = this.position();
                            if (bShow == true) {
                                this.tooltip.setStyle('display', 'block');
                                this.display = true;
                            }
                        }
                        self.editBoxFrozen = true;
                    },
                    onHide: function(tooltip) {
                        if (!(Browser.ie && Math.round(Browser.version) < 9)) {
                            this.fx.start({
                                opacity: 0
                            });
                        } else {
                            this.tooltip.setStyle('display', 'none');
                            this.display = false;
                        }
                        self.editBoxFrozen = false;
                        if (self.bInsideBox == false) {
                            self.hideEditBox();
                        }
                    }
                }));
            }, this);
        }
    },
    detachAdminUI: function() {
        this.parent();
        var modalLayer = this.element.getElement('.tpl-widget-content-overlay');
        if (modalLayer) {
            modalLayer.removeEvent('click', this.bound.modalLayerClick);
        }
        this.element.getElements('.tpl-facebook-tools-link').each(function(el) {
            el.removeEvent('mouseenter', el.retrieve('event:toolbarItemMouseEnter')).eliminate('event:toolbarItemMouseEnter');
            el.removeEvent('mouseleave', el.retrieve('event:toolbarItemMouseLeave')).eliminate('event:toolbarItemMouseLeave');
            el.removeEvent('click', el.retrieve('event:toolbarItemClick')).eliminate('event:toolbarItemClick');
        });
        if (this.tooltips.length > 0) {
            this.tooltips.each(function(t) {
                t.detach();
            });
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        this.website.hideTips();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    modalLayerClick: function(ev) {
        this.website.hideTips();
        this.website.notifyAdmin(__('admin_core', 'Administration mode', true), __('admin_core', 'The interaction with this widget is disabled in the administration panel. Click the "Preview" button in the top toolbar, if you want to test the functionality of the widget.', true), {
            width: 450,
            duration: 10000,
            classes: {
                title: '',
                icon: 'ui-tip'
            },
            onHide: function(item, length) {
                if (this.website.tips.contains(item)) {
                    this.website.tips.erase(item);
                }
            }.bind(this)
        });
        this.website.tips.push(this.website.adminNotifier.items.getLast());
    },
    toolbarItemMouseEnter: function(el, ev) {
        if (!el.hasClass('tpl-facebook-tools-link-mouseover')) {
            el.addClass('tpl-facebook-tools-link-mouseover');
        }
    },
    toolbarItemMouseLeave: function(el, ev) {
        if (el.hasClass('tpl-facebook-tools-link-mouseover')) {
            el.removeClass('tpl-facebook-tools-link-mouseover');
        }
    },
    toolbarItemClick: function(el, ev) {
        var action = el.getElement('span').get('class');
        switch (action) {
            case 'tpl-clear-cache':
                {
                    ev.preventDefault();this.clearFbCache();
                    break;
                }
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new FacebookCommentsWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    },
    clearFbCache: function() {
        var self = this;
        var elementId = (this.element ? this.element.get('id') : null);
        var fn = (function() {
            new Request.JSON({
                url: '/admin_social_widgets_ui/re_scrape_fb_urls/',
                method: 'post',
                data: {
                    data: {
                        Request: {
                            page_id: Object.getFromPath(self.page, 'id'),
                            current_page_id: Object.getFromPath(self.page, 'id'),
                            widget_id: self.id,
                            url: Object.getFromPath(self.page, 'options.page.here_url')
                        }
                    }
                },
                onRequest: function() {
                    self.website.adminLoadingOverlay(true);
                    self.website.adminLoadingBox(true);
                },
                onFailure: function() {
                    self.website.adminLoadingOverlay(false);
                    self.website.adminLoadingBox(false);
                    var title = __('admin_core', 'Error communicating with the server', true);
                    var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                    new IWindowUI.Error(title, msg, {
                        onShow: function() {
                            this.element.getElement('input[type=button]').focus();
                        }
                    });
                },
                onError: function(text, error) {
                    self.website.adminLoadingOverlay(false);
                    self.website.adminLoadingBox(false);
                    var title = __('admin_core', 'Error communicating with the server', true);
                    var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                    new IWindowUI.Error(title, msg, {
                        onShow: function() {
                            this.element.getElement('input[type=button]').focus();
                        }
                    });
                },
                onSuccess: function(response) {
                    self.website.adminLoadingOverlay(false);
                    self.website.adminLoadingBox(false);
                    if (self.website.hasAccess(response, {
                            frontendRequest: false,
                            showLoginWindow: true,
                            showWarningWindow: true,
                            onLoginSuccess: function() {
                                fn.apply();
                            }
                        }) == false) {
                        return;
                    }
                    if (self.website.isError(response, {
                            frontendRequest: false,
                            showWarningWindow: true
                        }) == true) {
                        return;
                    }
                    if (Object.getFromPath(response, 'page_widget.id') && Object.getFromPath(response, 'widget_content') && Object.getFromPath(response, 'widget_content').length > 0 && Object.getFromPath(response, 'css_assets') && Object.getFromPath(response, 'js_assets')) {
                        self.page.queueWidgetInsert(elementId, response, true);
                    }
                }
            }).send();
        }).bind(this);
        fn.apply();
    }
});
var FacebookPagePluginWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Facebook Page Plugin',
        short_name: 'facebook_page_plugin',
        dropdown: true
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.create.delay(1, this);
    },
    initVariables: function() {
        this.parent();
        this.bound = Object.merge(this.bound, {
            modalLayerClick: this.modalLayerClick.bind(this)
        });
    },
    create: function() {
        var container = this.element.getElement('.tpl-facebook-page-plugin-container');
        if (container) {
            container.store('data:width', container.getSize().x);
            var pluginEl = container.getElement('.fb-page');
            if (pluginEl) {
                container.fbPagePluginEl = pluginEl.clone();
                if (!pluginEl.get('data-width')) {
                    pluginEl.set('data-width', Math.min(Math.max(pluginEl.getSize().x, 180), 500));
                }
            }
            var fn = (function() {
                var existing = $$('script[src]');
                var bExists = false;
                var fbScript = null;
                var fbAsset = 'https://connect.facebook.net/' + Object.getFromPath(this.page, 'options.page.language_locale').replace(/-/i, '_') + '/all.js'
                existing.each(function(a) {
                    if (bExists == false && fbAsset == a.get('src')) {
                        fbScript = a;
                        bExists = true;
                    }
                });
                var onFbLoad = function() {
                    FB.XFBML.parse(container);
                    this.elementResized.delay(10, this);
                }.bind(this);
                if (bExists == false) {
                    fbScript = new Element('script', {
                        'id': 'facebook-jssdk',
                        'src': fbAsset,
                        'type': 'text/javascript'
                    });
                    if (typeof fbScript.onreadystatechange != 'undefined') {
                        fbScript.addEvent('readystatechange', function() {
                            if (['loaded', 'complete'].contains(this.readyState)) {
                                fbScript.set('data-loaded', 'true');
                                onFbLoad.apply();
                            }
                        });
                    } else {
                        fbScript.addEvent('load', function() {
                            fbScript.set('data-loaded', 'true');
                            onFbLoad.apply();
                        });
                    }
                    fbScript.inject(document.body);
                } else {
                    if (fbScript.get('data-loaded') == 'true') {
                        onFbLoad.apply();
                    } else {
                        if (typeof fbScript.onreadystatechange != 'undefined') {
                            fbScript.addEvent('readystatechange', function() {
                                if (['loaded', 'complete'].contains(this.readyState)) {
                                    onFbLoad.apply();
                                }
                            });
                        } else {
                            fbScript.addEvent('load', function() {
                                onFbLoad.apply();
                            });
                        }
                    }
                }
            }).bind(this);
            if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                fn.apply();
            } else {
                window.addEvent('load', fn);
            }
        }
    },
    attachAdminUI: function() {
        this.parent();
        var modalLayer = this.element.getElement('.tpl-widget-content-overlay');
        if (modalLayer) {
            modalLayer.addEvent('click', this.bound.modalLayerClick);
        }
    },
    detachAdminUI: function() {
        this.parent();
        var modalLayer = this.element.getElement('.tpl-widget-content-overlay');
        if (modalLayer) {
            modalLayer.removeEvent('click', this.bound.modalLayerClick);
        }
    },
    createComplete: function() {
        this.editWidgetSettings({
            requestData: {
                'data[Request][added]': 1
            }
        });
    },
    elementMoved: function(prevCol, newCol) {
        var container = this.element.getElement('.tpl-facebook-page-plugin-container');
        var pluginEl = this.element.getElement('.tpl-facebook-page-plugin-container .fb-page');
        if (container && container.fbPagePluginEl && pluginEl) {
            pluginEl.destroy();
            container.fbPagePluginEl.clone().inject(container);
            this.create();
        }
    },
    documentResized: function() {
        if (this.resizeTimer) {
            clearTimeout(this.resizeTimer);
            this.resizeTimer = undefined;
        }
        this.resizeTimer = (function() {
            var container = this.element.getElement('.tpl-facebook-page-plugin-container');
            var pluginEl = this.element.getElement('.tpl-facebook-page-plugin-container .fb-page');
            var width = container.getSize().x;
            if (container && container.fbPagePluginEl && pluginEl && container.retrieve('data:width') != width) {
                pluginEl.destroy();
                container.fbPagePluginEl.clone().inject(container);
                this.create();
            }
            this.resizeTimer = undefined;
        }).delay(100, this);
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        this.website.hideTips();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    modalLayerClick: function(ev) {
        this.website.hideTips();
        this.website.notifyAdmin(__('admin_core', 'Administration mode', true), __('admin_core', 'The interaction with this widget is disabled in the administration panel. Click the "Preview" button in the top toolbar, if you want to test the functionality of the widget.', true), {
            width: 450,
            duration: 10000,
            classes: {
                title: '',
                icon: 'ui-tip'
            },
            onHide: function(item, length) {
                if (this.website.tips.contains(item)) {
                    this.website.tips.erase(item);
                }
            }.bind(this)
        });
        this.website.tips.push(this.website.adminNotifier.items.getLast());
    },
    editWidgetSettings: function(options) {
        if (this.options.editable == false) {
            return;
        }
        var options = Object.merge({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }, options);
        new FacebookPagePluginWidgetAdminWindowUI(options).set('website', this.website).set('widget', this);
    }
});
var ForgotPasswordFormWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Forgot password form',
        short_name: 'forgot_password_form',
        dropdown: true
    },
    initVariables: function() {
        this.parent();
        this.form = this.element.getElement('form');
        this.validator = null;
    },
    attach: function() {
        this.parent();
        if (this.validator) {
            this.validator.attach();
        } else if (this.form && typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            customElAlerts['PasswordRequestEmail_' + this.id] = __('form_check', 'Please enter a valid e-mail.');
            customElAlerts['PasswordRequestCaptchaCode_' + this.id] = __('form_check', 'Please enter the text from the picture.');
            var msgBox = this.element.getElement('.tpl-message');
            var options = Object.merge(this.getValidatorOptions(), {
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                }
            });
            this.validator = new FormCheck(this.form, options);
            Object.each(this.validator.options.alerts, function(msg, idx) {
                this.validator.options.alerts[idx] = __('form_check', msg);
            }, this);
        }
        if (this.form) {
            var refreshLink = this.form.getElement('.tpl-refresh-captcha');
            if (refreshLink) {
                var event = this.refreshCaptchaClick.bind(this, refreshLink);
                refreshLink.store('event:refreshCaptchaClick', event).addEvent('click', event);
            }
        }
    },
    detach: function() {
        this.parent();
        if (this.validator) {
            this.validator.detach();
        }
        if (this.form) {
            var refreshLink = this.form.getElement('.tpl-refresh-captcha');
            if (refreshLink) {
                refreshLink.removeEvent('click', refreshLink.retrieve('event:refreshCaptchaClick')).eliminate('event:refreshCaptchaClick');
            }
        }
    },
    refreshCaptchaClick: function(el, ev) {
        ev.preventDefault();
        var img = el.getParent('.tpl-form-row').getElement('.tpl-captcha-code');
        var src = (img ? img.get('src') : false);
        if (src && src.length > 0) {
            img.set('src', new URI(src).setData('rnd', Date.now()).toString());
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new ForgotPasswordFormWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var GoogleTranslateWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Google translate',
        short_name: 'google_translate',
        dropdown: true
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.create();
    },
    initVariables: function() {
        this.parent();
        this.bound = Object.merge(this.bound, {
            modalLayerClick: this.modalLayerClick.bind(this)
        });
    },
    create: function() {
        var container = this.element.getElement('.tpl-google-translate-container');
        if (container && container.get('data')) {
            var data = JSON.decode(container.get('data'));
            if (data && typeof(data.url) != 'undefined' && data.url.length > 0) {
                var fn = (function() {
                    new Element('iframe', {
                        scrolling: 'no',
                        frameborder: '0',
                        src: data.url
                    }).inject(container);
                    if ((this.admin || this.preview) && Browser.ie && Math.round(Browser.version) < 8) {
                        Browser.redraw();
                    }
                }).bind(this);
                if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                    fn.apply();
                } else {
                    window.addEvent('load', fn);
                }
            }
        }
    },
    attachAdminUI: function() {
        this.parent();
        var modalLayer = this.element.getElement('.tpl-widget-content-overlay');
        if (modalLayer) {
            modalLayer.addEvent('click', this.bound.modalLayerClick);
        }
    },
    detachAdminUI: function() {
        this.parent();
        var modalLayer = this.element.getElement('.tpl-widget-content-overlay');
        if (modalLayer) {
            modalLayer.removeEvent('click', this.bound.modalLayerClick);
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        this.website.hideTips();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    modalLayerClick: function(ev) {
        this.website.hideTips();
        this.website.notifyAdmin(__('admin_core', 'Administration mode', true), __('admin_core', 'The interaction with this widget is disabled in the administration panel. Click the "Preview" button in the top toolbar, if you want to test the functionality of the widget.', true), {
            width: 450,
            duration: 10000,
            classes: {
                title: '',
                icon: 'ui-tip'
            },
            onHide: function(item, length) {
                if (this.website.tips.contains(item)) {
                    this.website.tips.erase(item);
                }
            }.bind(this)
        });
        this.website.tips.push(this.website.adminNotifier.items.getLast());
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new GoogleTranslateWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var GuestbookWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Guestbook',
        short_name: 'guestbook',
        dropdown: true
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.create.delay(1, this);
    },
    create: function() {
        if (this.captchaType) {
            switch (this.captchaType) {
                case 'rc':
                case 'irc':
                    {
                        var fn = (function() {
                            var existing = $$('script[src]');
                            var rcScript = null;
                            var rcAsset = 'https://www.google.com/recaptcha/api.js?render=explicit&onload=renderReCaptchaElements&hl=' + Object.getFromPath(this.page, 'options.page.language_code');
                            existing.each(function(a) {
                                if (!rcScript && rcAsset == a.get('src')) {
                                    rcScript = a;
                                }
                            });
                            var onScriptLoad = function() {
                                this.form.getElements('.g-recaptcha').each(function(el) {
                                    if (typeof(grecaptcha) != 'undefined' && typeof(grecaptcha.render) != 'undefined') {
                                        var elData = {
                                            'sitekey': el.get('data-sitekey'),
                                            'callback': el.get('data-callback'),
                                            'size': el.get('data-size')
                                        };
                                        var wId = grecaptcha.render(el, elData);
                                        el.set('data-wid', wId);
                                    } else {
                                        this.page.queueReCaptchaElement(el);
                                    }
                                }, this);
                                this.elementResized();
                            }.bind(this);
                            if (!rcScript) {
                                rcScript = new Element('script', {
                                    'src': rcAsset,
                                    'type': 'text/javascript',
                                    'async': '',
                                    'defer': ''
                                });
                                if (typeof rcScript.onreadystatechange != 'undefined') {
                                    rcScript.addEvent('readystatechange', function() {
                                        if (['loaded', 'complete'].contains(this.readyState)) {
                                            rcScript.set('data-loaded', 'true');
                                            onScriptLoad.apply();
                                        }
                                    });
                                } else {
                                    rcScript.addEvent('load', function() {
                                        rcScript.set('data-loaded', 'true');
                                        onScriptLoad.apply();
                                    });
                                }
                                rcScript.inject(document.body);
                            } else {
                                if (rcScript.get('data-loaded') == 'true') {
                                    onScriptLoad.apply();
                                } else {
                                    if (typeof rcScript.onreadystatechange != 'undefined') {
                                        rcScript.addEvent('readystatechange', function() {
                                            if (['loaded', 'complete'].contains(this.readyState)) {
                                                onScriptLoad.apply();
                                            }
                                        });
                                    } else {
                                        rcScript.addEvent('load', function() {
                                            onScriptLoad.apply();
                                        });
                                    }
                                }
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                        break;
                    }
                case 'rc_v3':
                    {
                        var fn = (function() {
                            if (!this.captchaData || typeof(this.captchaData.sitekey) == 'undefined' || typeof(this.captchaData.action) == 'undefined') {
                                return;
                            }
                            var existing = $$('script[src]');
                            var rcScript = null;
                            var rcAsset = 'https://www.google.com/recaptcha/api.js?render=' + this.captchaData.sitekey;
                            existing.each(function(a) {
                                if (!rcScript && rcAsset == a.get('src')) {
                                    rcScript = a;
                                }
                            });
                            if (!rcScript) {
                                rcScript = new Element('script', {
                                    'src': rcAsset,
                                    'type': 'text/javascript',
                                    'async': '',
                                    'defer': ''
                                });
                                if (typeof rcScript.onreadystatechange != 'undefined') {
                                    rcScript.addEvent('readystatechange', function() {
                                        if (['loaded', 'complete'].contains(this.readyState)) {
                                            rcScript.set('data-loaded', 'true');
                                        }
                                    });
                                } else {
                                    rcScript.addEvent('load', function() {
                                        rcScript.set('data-loaded', 'true');
                                    });
                                }
                                rcScript.inject(document.body);
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                        break;
                    }
            }
        }
    },
    initVariables: function() {
        this.parent();
        this.form = this.element.getElement('.tpl-view-form form');
        this.validator = null;
        this.captchaType = (this.form && this.form.get('data-ct') ? this.form.get('data-ct') : false);
        this.captchaData = (this.form && this.form.get('data-cd') ? JSON.decode(this.form.get('data-cd')) : false);
    },
    attach: function() {
        this.parent();
        this.element.getElements('.tpl-pager-links a:not(.tpl-disabled):not(.tpl-current)').each(function(link) {
            var event = this.pagerLinkClick.bind(this, link);
            link.store('event:pagerLinkClick', event).addEvent('click', event);
        }, this);
        switch (this.captchaType) {
            case 'irc':
                {
                    window['onGuestbookForm' + this.id + 'Submit'] = this.manualFormSubmit.bind(this);window['onGuestbookForm' + this.id + 'Error'] = this.questbookFormError.bind(this);
                    break;
                }
        }
        if (this.validator) {
            this.validator.attach();
        } else if (this.form && typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            customElAlerts['GuestbookEntryAuthorName_' + this.id] = __('form_check', 'Please enter a valid name.');
            customElAlerts['GuestbookEntryContent_' + this.id] = __('form_check', 'Please enter a message.');
            customElAlerts['GuestbookEntryCaptchaCode_' + this.id] = __('form_check', 'Please enter the text from the picture.');
            var self = this;
            var elementId = this.element.get('id');
            var msgBox = this.element.getElement('.tpl-message');
            var options = Object.merge(this.getValidatorOptions({
                onRequestComplete: function(response) {
                    if (typeof(response.success) != 'undefined' && response.success == true) {
                        var element = $(elementId);
                        if (!element) {
                            return;
                        }
                        var scrollY = self.scrollableElement.getScroll().y;
                        var viewportSize = self.viewportElement.getSize();
                        var coords = null;
                        if (self.admin || self.preview) {
                            coords = element.getRelativeCoordinates($('PageWrapper'));
                        } else {
                            coords = element.getCoordinates();
                        }
                        if (scrollY > coords.top) {
                            self.scrollFx.start(0, coords.top - 10);
                        }
                    }
                }
            }), {
                submitByAjax: true,
                ajaxSubmitAction: '/ajax_core_widgets_ui/request/',
                ajaxData: {
                    'data[Request][widget_id]': this.id,
                    'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                    'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
                    'data[Request][render]': 1,
                    'data[Request][process]': 1
                },
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                },
                onFormValid: function() {
                    if ((self.admin || self.preview) && Browser.ie && Math.round(Browser.version) < 8) {
                        Browser.redraw();
                    }
                    var sysMsg = $('SystemMessage');
                    if (sysMsg) {
                        sysMsg.hide();
                    }
                    this.form.getElements('.tpl-invalid').removeClass('tpl-invalid');
                    self.elementResized();
                }
            });
            switch (this.captchaType) {
                case 'irc':
                    {
                        options = Object.merge(options, {
                            submitByAjax: false,
                            customSubmit: true,
                            onCustomSubmit: function(ev) {
                                self.website.loadingBox(true);
                                var captchaEl = this.form.getElement('.g-recaptcha[data-wid]');
                                if (captchaEl && typeof(grecaptcha) != 'undefined') {
                                    grecaptcha.execute(captchaEl.get('data-wid'));
                                } else {
                                    if (ev) {
                                        new DOMEvent(ev).stop();
                                    }
                                    self.manualFormSubmit();
                                }
                            }
                        });
                        break;
                    }
                case 'rc_v3':
                    {
                        options = Object.merge(options, {
                            submitByAjax: false,
                            customSubmit: true,
                            onCustomSubmit: function(ev) {
                                self.website.loadingBox(true);
                                grecaptcha.ready(function() {
                                    if (typeof(grecaptcha) != 'undefined' && self.captchaData && typeof(self.captchaData.sitekey) != 'undefined' && typeof(self.captchaData.action) != 'undefined') {
                                        grecaptcha.execute(self.captchaData.sitekey, {
                                            action: self.captchaData.action
                                        }).then(function(token) {
                                            new Element('input', {
                                                'type': 'hidden',
                                                'name': 'g-recaptcha-response',
                                                'value': token
                                            }).inject(self.form);
                                            self.manualFormSubmit();
                                        }).catch(function() {
                                            self.questbookFormError();
                                        });
                                    } else {
                                        self.manualFormSubmit();
                                    }
                                });
                            }
                        });
                        break;
                    }
            }
            this.validator = new FormCheck(this.form, options);
            Object.each(this.validator.options.alerts, function(msg, idx) {
                this.validator.options.alerts[idx] = __('form_check', msg);
            }, this);
        }
        if (this.form) {
            var refreshLink = this.form.getElement('.tpl-refresh-captcha');
            if (refreshLink) {
                var event = this.refreshCaptchaClick.bind(this, refreshLink);
                refreshLink.store('event:refreshCaptchaClick', event).addEvent('click', event);
            }
        }
    },
    detach: function() {
        this.parent();
        this.element.getElements('.tpl-pager-links a:not(.tpl-disabled):not(.tpl-current)').each(function(link) {
            link.removeEvent('click', link.retrieve('event:pagerLinkClick')).eliminate('event:pagerLinkClick');
        });
        switch (this.captchaType) {
            case 'irc':
                {
                    window['onGuestbookForm' + this.id + 'Submit'] = undefined;window['onGuestbookForm' + this.id + 'Error'] = undefined;
                    break;
                }
        }
        if (this.validator) {
            this.validator.detach();
        }
        if (this.form) {
            var refreshLink = this.form.getElement('.tpl-refresh-captcha');
            if (refreshLink) {
                refreshLink.removeEvent('click', refreshLink.retrieve('event:refreshCaptchaClick')).eliminate('event:refreshCaptchaClick');
            }
        }
    },
    pagerLinkClick: function(link, ev) {
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        if (History.push(History.toRelativeUrl(link.get('href')), null, {
                a: 'widget',
                m: 'getGuestbookEntries',
                w: this.element.get('id')
            }) == false) {
            this.getNews({
                data: {
                    'data[Request][url]': History.toRelativeUrl(link.get('href'))
                }
            });
        }
    },
    getGuestbookEntries: function(options) {
        var data = {
            'data[Request][url]': this.page.options.page.here_url
        };
        if (options && typeof(options.data) != 'undefined') {
            data = Object.merge(data, options.data);
        }
        this.GETRequest(data);
    },
    manualFormSubmit: function() {
        this.website.loadingBox(false);
        this.validator.submitByAjax();
    },
    questbookFormError: function() {
        this.website.loadingBox(false);
    },
    refreshCaptchaClick: function(el, ev) {
        ev.preventDefault();
        var img = el.getParent('.tpl-form-row').getElement('.tpl-captcha-code');
        var src = (img ? img.get('src') : false);
        if (src && src.length > 0) {
            img.set('src', new URI(src).setData('rnd', Date.now()).toString());
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new GuestbookWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var HtmlWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'HTML',
        short_name: 'html',
        dropdown: true
    },
    attachAdminUI: function() {
        this.parent();
        var safeModeLink = this.element.getElement('.tpl-safe-mode');
        if (safeModeLink) {
            var event = this.safeModeLinkClick.bind(this);
            safeModeLink.store('event:safeModeLinkClick', event).addEvent('click', event);
        }
    },
    detachAdminUI: function() {
        this.parent();
        var safeModeLink = this.element.getElement('.tpl-safe-mode');
        if (safeModeLink) {
            safeModeLink.removeEvent('click', safeModeLink.retrieve('event:safeModeLinkClick')).eliminate('event:safeModeLinkClick');
        }
    },
    safeModeLinkClick: function(ev) {
        ev.preventDefault();
        var elementId = (this.element ? this.element.get('id') : null);
        this.page.refreshWidget(this.element, {
            data: {
                data: {
                    Request: {
                        widget_id: this.id,
                        url: new URI(Object.getFromPath(this.page, 'options.page.here_url')).setData('disable_safe_mode', 1).toAbsolute()
                    }
                }
            },
            onRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
                this.website.detach();
            }.bind(this),
            onFailure: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
                new IWindowUI.Error(__('admin_core', 'Error communicating with the server', true), __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true), {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        this.website.attach();
                    }.bind(this)
                });
            }.bind(this),
            onError: function(text, error) {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
                new IWindowUI.Error(__('admin_core', 'Error communicating with the server', true), __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true), {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        this.website.attach();
                    }.bind(this)
                });
            }.bind(this),
            onSuccess: function(response) {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
                if (this.website.hasAccess(response, {
                        frontendRequest: false,
                        showLoginWindow: true,
                        showWarningWindow: true,
                        onLoginSuccess: function() {
                            this.website.attach();
                            fn.apply();
                        }.bind(this),
                        onLoginFailure: function() {
                            this.website.attach();
                        }.bind(this),
                        onWarningWindowHide: function() {
                            this.website.attach();
                        }.bind(this)
                    }) == false) {
                    return;
                }
                if (this.website.isError(response, {
                        frontendRequest: false,
                        showWarningWindow: true,
                        onWarningWindowHide: function() {
                            this.website.attach();
                        }.bind(this)
                    }) == true) {
                    return;
                }
                if (this.website.preprocessResponse(response) == false) {
                    return;
                }
                if (Object.getFromPath(response, 'page_widget.id') && Object.getFromPath(response, 'widget_content') && Object.getFromPath(response, 'widget_content').length > 0 && Object.getFromPath(response, 'css_assets') && Object.getFromPath(response, 'js_assets')) {
                    this.website.attach();
                    this.page.queueWidgetInsert(elementId, response, true, true);
                } else {
                    new IWindowUI.Error(__('admin_core', 'Error', true), __('admin_core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later.", true), {
                        onShow: function() {
                            this.element.getElement('input[type=button]').focus();
                        },
                        onHide: function() {
                            this.website.attach();
                        }.bind(this)
                    });
                }
            }.bind(this)
        });
    },
    createComplete: function() {
        this.editWidgetContent({
            requestData: {
                'data[Request][added]': 1
            }
        });
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-edit">' + __('admin_widget', 'Edit content', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetContent: function(options) {
        if (this.options.editable == false) {
            return;
        }
        var options = Object.merge({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }, options);
        new HtmlWidgetAdminWindowUI(options).set('website', this.website).set('widget', this);
    }
});
var LoginFormWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Login form',
        short_name: 'login_form',
        dropdown: true
    },
    initVariables: function() {
        this.parent();
        this.form = this.element.getElement('form');
        this.validator = null;
    },
    attach: function() {
        this.parent();
        if (this.validator) {
            this.validator.attach();
        } else if (this.form && typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            customElAlerts['UserEmail_' + this.id] = __('form_check', 'Please enter a valid e-mail.');
            customElAlerts['UserPasswd_' + this.id] = __('form_check', 'Please enter a password containing at least 5 characters.');
            var msgBox = this.element.getElement('.tpl-message');
            var options = Object.merge(this.getValidatorOptions(), {
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                }
            });
            this.validator = new FormCheck(this.form, options);
            Object.each(this.validator.options.alerts, function(msg, idx) {
                this.validator.options.alerts[idx] = __('form_check', msg);
            }, this);
        }
    },
    detach: function() {
        this.parent();
        if (this.validator) {
            this.validator.detach();
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new LoginFormWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var MenuWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Menu',
        short_name: 'menu',
        dropdown: true
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        switch (true) {
            case (el.hasClass('tpl-settings')):
                {
                    this.editWidgetSettings();
                    break;
                }
            default:
                {
                    this.editWidgetContent();
                    break;
                }
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                }).addSeparator().addItem({
                    html: '<span class="ui-edit">' + __('admin_widget', 'Edit menu', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetContent: function() {
        if (this.options.editable == false) {
            return;
        }
        new MenuEditorWindowUI({
            menuEditorOptions: {
                navigation: {
                    currentPage: Object.getFromPath(this.page, 'id')
                },
                view: {
                    showMenuVisibility: PG_SIDE_MENU
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website);
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new MenuWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var NewsContentWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'News content',
        short_name: 'news_content',
        dropdown: true
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        switch (this.galleryType) {
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE:
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX:
                {
                    this.createThumbsView();
                    break;
                }
        }
    },
    createThumbsView: function() {
        var filmStrip = this.element.getElement('.tpl-news-images .tpl-photo-gallery-carousel-film-strip');
        var slides = (filmStrip ? filmStrip.getElements('.tpl-photo-gallery-carousel-slide') : null);
        if (filmStrip && slides && slides.length > 0) {
            var w = 0;
            slides.each(function(sl) {
                var slCompSize = sl.measure(function() {
                        return this.getComputedSize({
                            mode: 'horizontal',
                            styles: ['border', 'padding', 'margin']
                        })
                    }),
                    slSize = sl.measure(function() {
                        return this.getDimensions();
                    });
                w += slSize.width + slCompSize.computedLeft + slCompSize.computedRight;
            });
            var rW = Math.round(w);
            if (rW < w) {
                w = rW + 1;
            } else {
                w = rW;
            }
            filmStrip.setStyle('width', w);
        }
    },
    initVariables: function() {
        this.parent();
        this.galleryType = null;
        this.gallery = null;
        this.lightbox = null;
        var view = this.element.getElement('.tpl-news-images');
        if (view) {
            switch (true) {
                case (view.hasClass('tpl-thumbs-with-stage-gallery')):
                    {
                        this.galleryType = GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE;
                        break;
                    }
                case (view.hasClass('tpl-thumbs-with-lightbox-gallery')):
                    {
                        this.galleryType = GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX;
                        break;
                    }
                case (view.hasClass('tpl-thumbs-grid-gallery')):
                    {
                        this.galleryType = GALLERY_DISPLAY_TYPE_THUMBS_GRID;
                        break;
                    }
            }
        }
    },
    attach: function() {
        this.parent();
        switch (this.galleryType) {
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE:
                {
                    if (this.gallery) {
                        this.gallery.attach();
                    } else {
                        var fn = (function() {
                            var wrapper = this.element.getElement('.tpl-news-images .tpl-photo-gallery-wrapper');
                            if (wrapper) {
                                var carouselSize = IPG_CAROUSEL_SIZE_SMALL;
                                var carousel = wrapper.getElement('.tpl-photo-gallery-carousel');
                                if (carousel && carousel.hasClass('tpl-photo-gallery-carousel-large')) {
                                    carouselSize = IPG_CAROUSEL_SIZE_LARGE;
                                }
                                var self = this;
                                this.gallery = new InlinePhotoGallery(wrapper, {
                                    carouselSize: carouselSize,
                                    onShowStage: function(options) {
                                        self.elementResized();
                                        var scrollY = self.scrollableElement.getScroll().y;
                                        var viewportSize = self.viewportElement.getSize();
                                        var wrapperCoords = null;
                                        var stageCoords = null;
                                        if (self.admin || self.preview) {
                                            wrapperCoords = wrapper.getRelativeCoordinates($('PageWrapper'));
                                            stageCoords = this.stage.getRelativeCoordinates($('PageWrapper'));
                                        } else {
                                            wrapperCoords = wrapper.getCoordinates();
                                            stageCoords = this.stage.getCoordinates();
                                        }
                                        if (viewportSize.y > wrapperCoords.height + 20 && wrapperCoords.bottom > viewportSize.y + scrollY) {
                                            self.scrollFx.start(0, wrapperCoords.bottom - viewportSize.y + 10);
                                        } else if (viewportSize.y < wrapperCoords.height + 20 || scrollY > stageCoords.top || (viewportSize.y < wrapperCoords.height + 20 && scrollY < wrapperCoords.top)) {
                                            self.scrollFx.start(0, wrapperCoords.top - 10);
                                        }
                                    },
                                    onLoadPhotoIntoStage: function(options) {
                                        self.elementResized();
                                    }
                                });
                                this.website.preload(['/main_img/progress_indicator_alt.gif'], ASSET_TPL);
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                    }
                    break;
                }
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX:
                {
                    if (this.gallery) {
                        this.gallery.attach();
                    } else {
                        var fn = (function() {
                            var wrapper = this.element.getElement('.tpl-news-images .tpl-photo-gallery-wrapper');
                            if (wrapper) {
                                var carouselSize = SPG_CAROUSEL_SIZE_SMALL;
                                var carousel = wrapper.getElement('.tpl-photo-gallery-carousel');
                                if (carousel && carousel.hasClass('tpl-photo-gallery-carousel-large')) {
                                    carouselSize = SPG_CAROUSEL_SIZE_LARGE;
                                }
                                this.gallery = new ScrollerPhotoGallery(wrapper, {
                                    carouselSize: carouselSize
                                });
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                    }
                    if (this.lightbox) {
                        this.lightbox.attach();
                    } else {
                        var fn = (function() {
                            var container = this.element.getElement('.tpl-news-images .tpl-photo-gallery-wrapper');
                            if (container) {
                                var self = this;
                                this.lightbox = new Lightbox(container, {
                                    text: {
                                        close: __('core', 'Close')
                                    },
                                    getItems: function(container) {
                                        return container.getElements('.tpl-photo-gallery-carousel-slide a[href]');
                                    },
                                    getItem: function(item) {
                                        return item.getParent('.tpl-photo-gallery-carousel-slide');
                                    },
                                    parseItem: function(item) {
                                        var data = (item.get('data-image') && item.get('data-image').length > 0 ? JSON.decode(item.get('data-image')) : null);
                                        return {
                                            element: item,
                                            src: item.get('href'),
                                            description: (typeof(data.description) != 'undefined' ? data.description : '')
                                        };
                                    },
                                    onLoadPhoto: function(options) {
                                        var previous = container.getElement('.tpl-photo-gallery-carousel-slide.tpl-current');
                                        var current = this.getItem(options.element);
                                        if (current != previous) {
                                            previous.removeClass('tpl-current');
                                            if (!current.hasClass('tpl-current')) {
                                                current.addClass('tpl-current');
                                            }
                                        }
                                        if (self.gallery) {
                                            self.gallery.scrollToSlide(current, self.gallery.currentSlide, true);
                                        }
                                    }
                                });
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                    }
                    break;
                }
            case GALLERY_DISPLAY_TYPE_THUMBS_GRID:
                {
                    if (this.lightbox) {
                        this.lightbox.attach();
                    } else {
                        var fn = (function() {
                            var container = this.element.getElement('.tpl-news-images .tpl-photo-gallery-grid');
                            if (container) {
                                this.lightbox = new Lightbox(container, {
                                    text: {
                                        close: __('core', 'Close')
                                    },
                                    getItems: function(container) {
                                        return container.getElements('.tpl-photo-gallery-grid-item a[href]');
                                    },
                                    getItem: function(item) {
                                        return item.getParent('.tpl-photo-gallery-grid-item');
                                    },
                                    parseItem: function(item) {
                                        var data = (item.get('data-image') && item.get('data-image').length > 0 ? JSON.decode(item.get('data-image')) : null);
                                        return {
                                            element: item,
                                            src: item.get('href'),
                                            description: (typeof(data.description) != 'undefined' ? data.description : '')
                                        };
                                    },
                                    onLoadPhoto: function(options) {
                                        var previous = container.getElement('.tpl-photo-gallery-grid-item.tpl-current');
                                        var current = this.getItem(options.element);
                                        if (current != previous) {
                                            previous.removeClass('tpl-current');
                                            if (!current.hasClass('tpl-current')) {
                                                current.addClass('tpl-current');
                                            }
                                        }
                                    }
                                });
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                    }
                    break;
                }
        }
    },
    detach: function() {
        this.parent();
        switch (this.galleryType) {
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE:
                {
                    if (this.gallery) {
                        this.gallery.detach();
                    }
                    break;
                }
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX:
                {
                    if (this.gallery) {
                        this.gallery.detach();
                    }
                    if (this.lightbox) {
                        this.lightbox.detach();
                    }
                    break;
                }
            case GALLERY_DISPLAY_TYPE_THUMBS_GRID:
                {
                    if (this.lightbox) {
                        this.lightbox.detach();
                    }
                    break;
                }
        }
    },
    documentResized: function() {
        this.parent();
        switch (this.galleryType) {
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE:
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX:
                {
                    if (this.gallery) {
                        this.createThumbsView();
                        this.gallery.reinitialize();
                    }
                    break;
                }
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editableDropdownItemClick: function(item) {
        var action = item.getElement('span').get('class');
        switch (action) {
            case 'ui-edit':
                {
                    var data = (item.getElement('a') && item.getElement('a').get('data-item') ? JSON.decode(item.getElement('a').get('data-item')) : null);
                    if (data && typeof(data.news_id) != 'undefined') {
                        this.hideEditBox();
                        this.editWidgetContent(data);
                    }
                    break;
                }
            case 'ui-settings':
                {
                    this.hideEditBox();this.editWidgetSettings();
                    break;
                }
            case 'ui-delete':
                {
                    this.hideEditBox();this.deleteWidget();
                    break;
                }
        }
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                });
                if (this.element.get('data-item') && this.element.get('data-item').length > 0) {
                    var data = JSON.decode(this.element.get('data-item'));
                    if (data && typeof(data.news_id) != 'undefined') {
                        this.editBox.dd.addSeparator().addItem({
                            html: '<span class="ui-edit">' + __('admin_widget', 'Edit news', true) + '</span>',
                            linkProperties: {
                                'data-item': this.element.get('data-item')
                            }
                        });
                    }
                }
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetContent: function(data) {
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        var requestData = {
            data: {
                Request: {
                    id: data.news_id,
                    url: Object.getFromPath(this.page, 'options.page.here_url')
                }
            }
        };
        if (typeof(data.language_id) != 'undefined') {
            requestData.data.Request.language_id = data.language_id;
        }
        var settings = {
            name: 'BackstagePaneUI.Content.EditNews',
            options: {
                requestData: requestData
            }
        };
        this.website.backstage.loadPane(settings);
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new NewsContentWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var NewsListWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'News list',
        short_name: 'news_list',
        dropdown: true
    },
    attach: function() {
        this.parent();
        this.element.getElements('.tpl-pager-links a:not(.tpl-disabled):not(.tpl-current)').each(function(link) {
            var event = this.pagerLinkClick.bind(this, link);
            link.store('event:pagerLinkClick', event).addEvent('click', event);
        }, this);
    },
    detach: function() {
        this.parent();
        this.element.getElements('.tpl-pager-links a:not(.tpl-disabled):not(.tpl-current)').each(function(link) {
            link.removeEvent('click', link.retrieve('event:pagerLinkClick')).eliminate('event:pagerLinkClick');
        });
    },
    pagerLinkClick: function(link, ev) {
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        if (History.push(History.toRelativeUrl(link.get('href')), null, {
                a: 'widget',
                m: 'getNews',
                w: this.element.get('id')
            }) == false) {
            this.getNews({
                data: {
                    'data[Request][url]': History.toRelativeUrl(link.get('href'))
                }
            });
        }
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        var itemData = (el.get('data-item') ? JSON.decode(el.get('data-item')) : null);
        var settings = {
            name: 'BackstagePaneUI.Content.AddNews',
            options: {
                requestData: {
                    data: {
                        Request: {
                            language_id: Object.getFromPath(this.page, 'options.page.language_id')
                        }
                    }
                }
            }
        };
        if (itemData && typeof(itemData.page_id) != 'undefined') {
            settings.options.requestData.data.Request.page_id = itemData.page_id;
        }
        this.hideEditBox();
        this.website.backstage.loadPane(settings);
    },
    getNews: function(options) {
        var data = {
            'data[Request][url]': this.page.options.page.here_url
        };
        if (options && typeof(options.data) != 'undefined') {
            data = Object.merge(data, options.data);
        }
        this.GETRequest(data);
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editableDropdownItemClick: function(item) {
        var action = item.getElement('span').get('class');
        this.parent(item);
        switch (action) {
            case 'ui-add':
                {
                    var itemData = (item.getElement('a') && item.getElement('a').get('data-item') ? JSON.decode(item.getElement('a').get('data-item')) : null);
                    var data = {};
                    if (itemData && typeof(itemData.page_id) != 'undefined') {
                        data.page_id = itemData.page_id;
                    }
                    this.addNews(data);
                    break;
                }
            case 'ui-view-news':
                {
                    this.viewNews();
                    break;
                }
        }
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                var itemData = null;
                if (this.element.get('data-item') && this.element.get('data-item').length > 0) {
                    var data = JSON.decode(this.element.get('data-item'));
                    if (data && typeof(data.page_id) != 'undefined') {
                        itemData = this.element.get('data-item');
                    }
                }
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                }).addSeparator().addItem({
                    html: '<span class="ui-add">' + __('admin_widget', 'Add news', true) + '</span>',
                    linkProperties: {
                        'data-item': itemData
                    }
                }).addSeparator().addItem({
                    html: '<span class="ui-view-news">' + __('admin_widget', 'View news', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new NewsListWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    },
    addNews: function(data) {
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        var settings = {
            name: 'BackstagePaneUI.Content.AddNews',
            options: {
                requestData: {
                    data: {
                        Request: {
                            language_id: Object.getFromPath(this.page, 'options.page.language_id')
                        }
                    }
                }
            }
        };
        if (typeof(data.page_id) != 'undefined') {
            settings.options.requestData.data.Request.page_id = data.page_id;
        }
        this.website.backstage.loadPane(settings);
    },
    viewNews: function() {
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        var settings = {
            name: 'BackstagePaneUI.Content.News',
            options: {
                requestData: {
                    data: {
                        Request: {
                            language_id: Object.getFromPath(this.page, 'options.page.language_id')
                        }
                    }
                }
            }
        };
        this.website.backstage.loadPane(settings);
    },
    updateWidgetsOrder: function(sorted, prevCol, newCol) {
        var bRefresh = false;
        if (prevCol != newCol) {
            var prevColNbr = false;
            var newColNbr = false;
            var prevColId = prevCol.get('id');
            var newColId = newCol.get('id');
            if (prevColId && prevColId.indexOf('_') > -1) {
                prevColNbr = parseInt(prevColId.split('_')[1]);
            }
            if (newColId && newColId.indexOf('_') > -1) {
                newColNbr = parseInt(newColId.split('_')[1]);
            }
            if (prevColNbr == 2 || newColNbr == 2) {
                bRefresh = true;
            }
        }
        this.page.updateWidgetsOrder({
            refresh: bRefresh,
            widget: this,
            sorted: sorted
        });
    }
});
var NewsMenuWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'News menu',
        short_name: 'news_menu',
        dropdown: true
    },
    attach: function() {
        this.parent();
        this.element.getElements('.tpl-widget-content > ul > li').each(function(el) {
            var event = this.navElementClick.bind(this, el);
            el.store('event:navElementClick', event).addEvent('click', event);
        }, this);
    },
    detach: function() {
        this.parent();
        this.element.getElements('.tpl-widget-content > ul > li').each(function(el) {
            el.removeEvent('click', el.retrieve('event:navElementClick')).eliminate('event:navElementClick');
        }, this);
    },
    navElementClick: function(el, ev) {
        var target = $(ev.target);
        if (target == el || target.getParent('li') == el) {
            ev.preventDefault();
            var list = el.getElement('ul');
            if (list) {
                if (list.isDisplayed() == true) {
                    list.hide();
                    if (!el.hasClass('tpl-no-submenu')) {
                        el.addClass('tpl-no-submenu');
                    }
                } else {
                    list.setStyle('display', null);
                    if (el.hasClass('tpl-no-submenu')) {
                        el.removeClass('tpl-no-submenu');
                    }
                }
                this.elementResized();
            }
        }
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        var settings = {
            name: 'BackstagePaneUI.Content.AddNews',
            options: {
                requestData: {
                    data: {
                        Request: {
                            language_id: Object.getFromPath(this.page, 'options.page.language_id')
                        }
                    }
                }
            }
        };
        this.hideEditBox();
        this.website.backstage.loadPane(settings);
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editableDropdownItemClick: function(item) {
        var action = item.getElement('span').get('class');
        this.parent(item);
        switch (action) {
            case 'ui-add':
                {
                    this.addNews();
                    break;
                }
            case 'ui-view-news':
                {
                    this.viewNews();
                    break;
                }
        }
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                }).addSeparator().addItem({
                    html: '<span class="ui-add">' + __('admin_widget', 'Add news', true) + '</span>'
                }).addSeparator().addItem({
                    html: '<span class="ui-view-news">' + __('admin_widget', 'View news', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new NewsMenuWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    },
    addNews: function() {
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        var settings = {
            name: 'BackstagePaneUI.Content.AddNews',
            options: {
                requestData: {
                    data: {
                        Request: {
                            language_id: Object.getFromPath(this.page, 'options.page.language_id')
                        }
                    }
                }
            }
        };
        this.website.backstage.loadPane(settings);
    },
    viewNews: function() {
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        var settings = {
            name: 'BackstagePaneUI.Content.News',
            options: {
                requestData: {
                    data: {
                        Request: {
                            language_id: Object.getFromPath(this.page, 'options.page.language_id')
                        }
                    }
                }
            }
        };
        this.website.backstage.loadPane(settings);
    }
});
var NewsletterFormWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Newsletter form',
        short_name: 'newsletter_form',
        dropdown: true
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.create.delay(1, this);
    },
    create: function() {
        if (this.captchaType) {
            switch (this.captchaType) {
                case 'rc':
                case 'irc':
                    {
                        var fn = (function() {
                            var existing = $$('script[src]');
                            var rcScript = null;
                            var rcAsset = 'https://www.google.com/recaptcha/api.js?render=explicit&onload=renderReCaptchaElements&hl=' + Object.getFromPath(this.page, 'options.page.language_code');
                            existing.each(function(a) {
                                if (!rcScript && rcAsset == a.get('src')) {
                                    rcScript = a;
                                }
                            });
                            var onScriptLoad = function() {
                                this.form.getElements('.g-recaptcha').each(function(el) {
                                    if (typeof(grecaptcha) != 'undefined' && typeof(grecaptcha.render) != 'undefined') {
                                        var elData = {
                                            'sitekey': el.get('data-sitekey'),
                                            'callback': el.get('data-callback'),
                                            'size': el.get('data-size')
                                        };
                                        var wId = grecaptcha.render(el, elData);
                                        el.set('data-wid', wId);
                                    } else {
                                        this.page.queueReCaptchaElement(el);
                                    }
                                }, this);
                                this.elementResized();
                            }.bind(this);
                            if (!rcScript) {
                                rcScript = new Element('script', {
                                    'src': rcAsset,
                                    'type': 'text/javascript',
                                    'async': '',
                                    'defer': ''
                                });
                                if (typeof rcScript.onreadystatechange != 'undefined') {
                                    rcScript.addEvent('readystatechange', function() {
                                        if (['loaded', 'complete'].contains(this.readyState)) {
                                            rcScript.set('data-loaded', 'true');
                                            onScriptLoad.apply();
                                        }
                                    });
                                } else {
                                    rcScript.addEvent('load', function() {
                                        rcScript.set('data-loaded', 'true');
                                        onScriptLoad.apply();
                                    });
                                }
                                rcScript.inject(document.body);
                            } else {
                                if (rcScript.get('data-loaded') == 'true') {
                                    onScriptLoad.apply();
                                } else {
                                    if (typeof rcScript.onreadystatechange != 'undefined') {
                                        rcScript.addEvent('readystatechange', function() {
                                            if (['loaded', 'complete'].contains(this.readyState)) {
                                                onScriptLoad.apply();
                                            }
                                        });
                                    } else {
                                        rcScript.addEvent('load', function() {
                                            onScriptLoad.apply();
                                        });
                                    }
                                }
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                        break;
                    }
                case 'rc_v3':
                    {
                        var fn = (function() {
                            if (!this.captchaData || typeof(this.captchaData.sitekey) == 'undefined' || typeof(this.captchaData.action) == 'undefined') {
                                return;
                            }
                            var existing = $$('script[src]');
                            var rcScript = null;
                            var rcAsset = 'https://www.google.com/recaptcha/api.js?render=' + this.captchaData.sitekey;
                            existing.each(function(a) {
                                if (!rcScript && rcAsset == a.get('src')) {
                                    rcScript = a;
                                }
                            });
                            if (!rcScript) {
                                rcScript = new Element('script', {
                                    'src': rcAsset,
                                    'type': 'text/javascript',
                                    'async': '',
                                    'defer': ''
                                });
                                if (typeof rcScript.onreadystatechange != 'undefined') {
                                    rcScript.addEvent('readystatechange', function() {
                                        if (['loaded', 'complete'].contains(this.readyState)) {
                                            rcScript.set('data-loaded', 'true');
                                        }
                                    });
                                } else {
                                    rcScript.addEvent('load', function() {
                                        rcScript.set('data-loaded', 'true');
                                    });
                                }
                                rcScript.inject(document.body);
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                        break;
                    }
            }
        }
    },
    initVariables: function() {
        this.parent();
        this.form = this.element.getElement('form');
        this.validator = null;
        this.captchaType = (this.form && this.form.get('data-ct') ? this.form.get('data-ct') : false);
        this.captchaData = (this.form && this.form.get('data-cd') ? JSON.decode(this.form.get('data-cd')) : false);
    },
    attach: function() {
        this.parent();
        switch (this.captchaType) {
            case 'irc':
                {
                    window['onNewsletterForm' + this.id + 'Submit'] = this.manualFormSubmit.bind(this);window['onNewsletterForm' + this.id + 'Error'] = this.newsletterFormError.bind(this);
                    break;
                }
        }
        if (this.validator) {
            this.validator.attach();
        } else if (this.form && typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            customElAlerts['NewsletterSubscriberName_' + this.id] = __('form_check', 'Please enter a valid name.');
            customElAlerts['NewsletterSubscriberEmail_' + this.id] = __('form_check', 'Please enter a valid e-mail.');
            customElAlerts['NewsletterCaptchaCode_' + this.id] = __('form_check', 'Please enter the text from the picture.');
            var self = this;
            var msgBox = this.element.getElement('.tpl-message');
            var options = Object.merge(this.getValidatorOptions(), {
                submitByAjax: true,
                ajaxSubmitAction: '/ajax_core_widgets_ui/request/',
                ajaxData: {
                    'data[Request][widget_id]': this.id,
                    'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                    'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
                    'data[Request][render]': 1,
                    'data[Request][process]': 1
                },
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                }
            });
            switch (this.captchaType) {
                case 'irc':
                    {
                        options = Object.merge(options, {
                            submitByAjax: false,
                            customSubmit: true,
                            onCustomSubmit: function(ev) {
                                self.website.loadingBox(true);
                                var captchaEl = this.form.getElement('.g-recaptcha[data-wid]');
                                if (captchaEl && typeof(grecaptcha) != 'undefined') {
                                    grecaptcha.execute(captchaEl.get('data-wid'));
                                } else {
                                    self.manualFormSubmit();
                                }
                            }
                        });
                        break;
                    }
                case 'rc_v3':
                    {
                        options = Object.merge(options, {
                            submitByAjax: false,
                            customSubmit: true,
                            onCustomSubmit: function(ev) {
                                self.website.loadingBox(true);
                                grecaptcha.ready(function() {
                                    if (typeof(grecaptcha) != 'undefined' && self.captchaData && typeof(self.captchaData.sitekey) != 'undefined' && typeof(self.captchaData.action) != 'undefined') {
                                        grecaptcha.execute(self.captchaData.sitekey, {
                                            action: self.captchaData.action
                                        }).then(function(token) {
                                            new Element('input', {
                                                'type': 'hidden',
                                                'name': 'g-recaptcha-response',
                                                'value': token
                                            }).inject(self.form);
                                            self.manualFormSubmit();
                                        }).catch(function() {
                                            self.newsletterFormError();
                                        });
                                    } else {
                                        self.manualFormSubmit();
                                    }
                                });
                            }
                        });
                        break;
                    }
            }
            this.validator = new FormCheck(this.form, options);
            Object.each(this.validator.options.alerts, function(msg, idx) {
                this.validator.options.alerts[idx] = __('form_check', msg);
            }, this);
        }
        if (this.form) {
            var refreshLink = this.form.getElement('.tpl-refresh-captcha');
            if (refreshLink) {
                var event = this.refreshCaptchaClick.bind(this, refreshLink);
                refreshLink.store('event:refreshCaptchaClick', event).addEvent('click', event);
            }
        }
    },
    detach: function() {
        this.parent();
        switch (this.captchaType) {
            case 'irc':
                {
                    window['onNewsletterForm' + this.id + 'Submit'] = undefined;window['onNewsletterForm' + this.id + 'Error'] = undefined;
                    break;
                }
        }
        if (this.validator) {
            this.validator.detach();
        }
        if (this.form) {
            var refreshLink = this.form.getElement('.tpl-refresh-captcha');
            if (refreshLink) {
                refreshLink.removeEvent('click', refreshLink.retrieve('event:refreshCaptchaClick')).eliminate('event:refreshCaptchaClick');
            }
        }
    },
    manualFormSubmit: function() {
        this.website.loadingBox(false);
        this.validator.submitByAjax();
    },
    newsletterFormError: function() {
        this.website.loadingBox(false);
    },
    refreshCaptchaClick: function(el, ev) {
        ev.preventDefault();
        var img = el.getParent('.tpl-form-row').getElement('.tpl-captcha-code');
        var src = (img ? img.get('src') : false);
        if (src && src.length > 0) {
            img.set('src', new URI(src).setData('rnd', Date.now()).toString());
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editableDropdownItemClick: function(item) {
        var action = item.getElement('span').get('class');
        this.parent(item);
        switch (action) {
            case 'ui-view-subscribers':
                {
                    this.viewSubscribers();
                    break;
                }
        }
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                }).addSeparator().addItem({
                    html: '<span class="ui-view-subscribers">' + __('admin_widget', 'View subscribers', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new NewsletterFormWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    },
    viewSubscribers: function() {
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        var settings = {
            name: 'BackstagePaneUI.Accounts.NewsletterSubscribers',
            options: {
                requestData: {
                    data: {
                        Request: {
                            language_id: Object.getFromPath(this.page, 'options.page.language_id')
                        }
                    }
                }
            }
        };
        this.website.backstage.loadPane(settings);
    }
});
var OrderConfirmationWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Order confirmation',
        short_name: 'order_confirmation',
        dropdown: true
    },
    initVariables: function() {
        this.parent();
        this.viewType = false;
        var view = this.element.getElement('.tpl-view-content');
        if (view) {
            switch (true) {
                case (view.hasClass('tpl-multi-step-one-page-checkout')):
                    {
                        this.viewType = CHECKOUT_STYLE_MULTI_STEP_ONE_PAGE;this.scrollDelta = 0;
                        break;
                    }
                case (view.hasClass('tpl-multi-step-checkout')):
                    {
                        this.viewType = CHECKOUT_STYLE_MULTI_STEP;
                        break;
                    }
                case (view.hasClass('tpl-klarna-checkout')):
                    {
                        this.viewType = CHECKOUT_STYLE_KLARNA_CHECKOUT;
                        break;
                    }
            }
        }
    },
    attach: function() {
        this.parent();
        switch (this.viewType) {
            case CHECKOUT_STYLE_KLARNA_CHECKOUT:
                {
                    var container = this.element.getElement('[data-gui-snippet]');
                    if (container) {
                        var content = container.get('data-gui-snippet');
                        var scripts = '';
                        content = content.replace(/<script[^>]*>([\s\S]*?)<\/script>/gi, function(all, code) {
                            scripts += code + '\n';
                            return '';
                        });
                        container.set('data-gui-snippet', null).set('html', content);
                        Browser.exec(scripts);
                    }
                    break;
                }
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new OrderConfirmationWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var OrderSummaryWidget = new Class({
    Extends: LayoutWidget,
    Implements: WebshopWidget,
    options: {
        name: 'Order summary',
        short_name: 'order_summary',
        dropdown: true
    },
    updateSummary: function(subtotal, discount, shipping, total) {
        var subtotalEl = this.element.getElement('.tpl-subtotal');
        var discountEl = this.element.getElement('.tpl-discount');
        var shippingEl = this.element.getElement('.tpl-shipping');
        var totalEl = this.element.getElement('.tpl-total');
        if (subtotalEl && shippingEl && totalEl) {
            subtotalEl.set('text', subtotal);
            if (discountEl) {
                discountEl.set('text', discount);
            }
            shippingEl.set('text', shipping);
            totalEl.set('text', total);
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new OrderSummaryWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var PasswordPromptFormWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Password prompt form',
        short_name: 'password_prompt_form',
        dropdown: true
    },
    initVariables: function() {
        this.parent();
        this.form = this.element.getElement('form');
        this.validator = null;
    },
    attach: function() {
        this.parent();
        if (this.validator) {
            this.validator.attach();
        } else if (this.form && typeof(window['FormCheck']) != 'undefined') {
            var msgBox = this.element.getElement('.tpl-message');
            var options = Object.merge(this.getValidatorOptions(), {
                display: {
                    errorsListContainer: msgBox
                }
            });
            this.validator = new FormCheck(this.form, options);
            Object.each(this.validator.options.alerts, function(msg, idx) {
                this.validator.options.alerts[idx] = __('form_check', msg);
            }, this);
        }
    },
    detach: function() {
        this.parent();
        if (this.validator) {
            this.validator.detach();
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new PasswordPromptFormWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var PaypalPaymentFormWidget = new Class({
    Extends: Widget,
    options: {
        name: 'PayPal payment form',
        short_name: 'paypal_payment_form'
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.form = this.element.getElement('form');
        if (this.form) {
            this.form.getElements('.tpl-payment-indicator.tpl-js-off').hide();
            this.form.getElements('.tpl-payment-indicator.tpl-js-on').setStyle('visibility', null);
            (function() {
                this.form.submit();
            }).delay(200, this);
        }
    }
});
var PayuPaymentFormWidget = new Class({
    Extends: Widget,
    options: {
        name: 'PayU payment form',
        short_name: 'payu_payment_form'
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.form = this.element.getElement('form');
        if (this.form) {
            this.form.getElement('input[name=js]').set('value', 1);
            this.form.getElements('.tpl-payment-indicator.tpl-js-off').hide();
            this.form.getElements('.tpl-payment-indicator.tpl-js-on').setStyle('visibility', null);
            (function() {
                this.form.submit();
            }).delay(200, this);
        }
    }
});
var GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE = 1;
var GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX = 2;
var GALLERY_DISPLAY_TYPE_THUMBS_GRID = 3;
var PhotoGalleryWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Photo gallery',
        short_name: 'photo_gallery',
        dropdown: true
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        switch (this.galleryType) {
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE:
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX:
                {
                    this.createThumbsView();
                    break;
                }
        }
    },
    createThumbsView: function() {
        var filmStrip = this.element.getElement('.tpl-photo-gallery-carousel-film-strip');
        var slides = (filmStrip ? filmStrip.getElements('.tpl-photo-gallery-carousel-slide') : null);
        if (filmStrip && slides && slides.length > 0) {
            var w = 0;
            slides.each(function(sl) {
                var slCompSize = sl.measure(function() {
                        return this.getComputedSize({
                            mode: 'horizontal',
                            styles: ['border', 'padding', 'margin']
                        })
                    }),
                    slSize = sl.measure(function() {
                        return this.getDimensions();
                    });
                w += slSize.width + slCompSize.computedLeft + slCompSize.computedRight;
            });
            var rW = Math.round(w);
            if (rW < w) {
                w = rW + 1;
            } else {
                w = rW;
            }
            filmStrip.setStyle('width', w);
        }
    },
    initVariables: function() {
        this.parent();
        this.galleryType = null;
        this.gallery = null;
        this.lightbox = null;
        var view = this.element.getElement('.tpl-view-content');
        if (view) {
            switch (true) {
                case (view.hasClass('tpl-thumbs-with-stage-gallery')):
                    {
                        this.galleryType = GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE;
                        break;
                    }
                case (view.hasClass('tpl-thumbs-with-lightbox-gallery')):
                    {
                        this.galleryType = GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX;
                        break;
                    }
                case (view.hasClass('tpl-thumbs-grid-gallery')):
                    {
                        this.galleryType = GALLERY_DISPLAY_TYPE_THUMBS_GRID;
                        break;
                    }
            }
        }
    },
    attach: function() {
        this.parent();
        switch (this.galleryType) {
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE:
                {
                    if (this.gallery) {
                        this.gallery.attach();
                    } else {
                        var fn = (function() {
                            var wrapper = this.element.getElement('.tpl-photo-gallery-wrapper');
                            if (wrapper) {
                                var carouselSize = IPG_CAROUSEL_SIZE_SMALL;
                                var carousel = wrapper.getElement('.tpl-photo-gallery-carousel');
                                if (carousel && carousel.hasClass('tpl-photo-gallery-carousel-large')) {
                                    carouselSize = IPG_CAROUSEL_SIZE_LARGE;
                                }
                                var self = this;
                                this.gallery = new InlinePhotoGallery(wrapper, {
                                    carouselSize: carouselSize,
                                    onShowStage: function(options) {
                                        self.elementResized();
                                        var scrollY = self.scrollableElement.getScroll().y;
                                        var viewportSize = self.viewportElement.getSize();
                                        var wrapperCoords = null;
                                        var stageCoords = null;
                                        if (self.admin || self.preview) {
                                            wrapperCoords = wrapper.getRelativeCoordinates($('PageWrapper'));
                                            stageCoords = this.stage.getRelativeCoordinates($('PageWrapper'));
                                        } else {
                                            wrapperCoords = wrapper.getCoordinates();
                                            stageCoords = this.stage.getCoordinates();
                                        }
                                        if (viewportSize.y > wrapperCoords.height + 20 && wrapperCoords.bottom > viewportSize.y + scrollY) {
                                            self.scrollFx.start(0, wrapperCoords.bottom - viewportSize.y + 10);
                                        } else if (viewportSize.y < wrapperCoords.height + 20 || scrollY > stageCoords.top || (viewportSize.y < wrapperCoords.height + 20 && scrollY < wrapperCoords.top)) {
                                            self.scrollFx.start(0, wrapperCoords.top - 10);
                                        }
                                    },
                                    onLoadPhotoIntoStage: function(options) {
                                        self.elementResized();
                                    }
                                });
                                this.website.preload(['/main_img/progress_indicator_alt.gif'], ASSET_TPL);
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                    }
                    break;
                }
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX:
                {
                    if (this.gallery) {
                        this.gallery.attach();
                    } else {
                        var fn = (function() {
                            var wrapper = this.element.getElement('.tpl-photo-gallery-wrapper');
                            if (wrapper) {
                                var carouselSize = SPG_CAROUSEL_SIZE_SMALL;
                                var carousel = wrapper.getElement('.tpl-photo-gallery-carousel');
                                if (carousel && carousel.hasClass('tpl-photo-gallery-carousel-large')) {
                                    carouselSize = SPG_CAROUSEL_SIZE_LARGE;
                                }
                                this.gallery = new ScrollerPhotoGallery(wrapper, {
                                    carouselSize: carouselSize
                                });
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                    }
                    if (this.lightbox) {
                        this.lightbox.attach();
                    } else {
                        var fn = (function() {
                            var container = this.element.getElement('.tpl-photo-gallery-wrapper');
                            if (container) {
                                var self = this;
                                this.lightbox = new Lightbox(container, {
                                    text: {
                                        close: __('core', 'Close')
                                    },
                                    getItems: function(container) {
                                        return container.getElements('.tpl-photo-gallery-carousel-slide a[href]');
                                    },
                                    getItem: function(item) {
                                        return item.getParent('.tpl-photo-gallery-carousel-slide');
                                    },
                                    parseItem: function(item) {
                                        var data = (item.get('data-image') && item.get('data-image').length > 0 ? JSON.decode(item.get('data-image')) : null);
                                        return {
                                            element: item,
                                            src: item.get('href'),
                                            description: (typeof(data.description) != 'undefined' ? data.description : '')
                                        };
                                    },
                                    onLoadPhoto: function(options) {
                                        var previous = container.getElement('.tpl-photo-gallery-carousel-slide.tpl-current');
                                        var current = this.getItem(options.element);
                                        if (current != previous) {
                                            previous.removeClass('tpl-current');
                                            if (!current.hasClass('tpl-current')) {
                                                current.addClass('tpl-current');
                                            }
                                        }
                                        if (self.gallery) {
                                            self.gallery.scrollToSlide(current, self.gallery.currentSlide, true);
                                        }
                                    }
                                });
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                    }
                    break;
                }
            case GALLERY_DISPLAY_TYPE_THUMBS_GRID:
                {
                    if (this.lightbox) {
                        this.lightbox.attach();
                    } else {
                        var fn = (function() {
                            var container = this.element.getElement('.tpl-photo-gallery-grid');
                            if (container) {
                                this.lightbox = new Lightbox(container, {
                                    text: {
                                        close: __('core', 'Close')
                                    },
                                    getItems: function(container) {
                                        return container.getElements('.tpl-photo-gallery-grid-item a[href]');
                                    },
                                    getItem: function(item) {
                                        return item.getParent('.tpl-photo-gallery-grid-item');
                                    },
                                    parseItem: function(item) {
                                        var data = (item.get('data-image') && item.get('data-image').length > 0 ? JSON.decode(item.get('data-image')) : null);
                                        return {
                                            element: item,
                                            src: item.get('href'),
                                            description: (typeof(data.description) != 'undefined' ? data.description : '')
                                        };
                                    },
                                    onLoadPhoto: function(options) {
                                        var previous = container.getElement('.tpl-photo-gallery-grid-item.tpl-current');
                                        var current = this.getItem(options.element);
                                        if (current != previous) {
                                            previous.removeClass('tpl-current');
                                            if (!current.hasClass('tpl-current')) {
                                                current.addClass('tpl-current');
                                            }
                                        }
                                    }
                                });
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                    }
                    break;
                }
        }
    },
    detach: function() {
        this.parent();
        switch (this.galleryType) {
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE:
                {
                    if (this.gallery) {
                        this.gallery.detach();
                    }
                    break;
                }
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX:
                {
                    if (this.gallery) {
                        this.gallery.detach();
                    }
                    if (this.lightbox) {
                        this.lightbox.detach();
                    }
                    break;
                }
            case GALLERY_DISPLAY_TYPE_THUMBS_GRID:
                {
                    if (this.lightbox) {
                        this.lightbox.detach();
                    }
                    break;
                }
        }
    },
    documentResized: function() {
        this.parent();
        switch (this.galleryType) {
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE:
            case GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX:
                {
                    if (this.gallery) {
                        this.createThumbsView();
                        this.gallery.reinitialize();
                    }
                    break;
                }
        }
    },
    createComplete: function() {
        this.editWidgetContent({
            requestData: {
                'data[Request][added]': 1
            }
        });
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-edit">' + __('admin_widget', 'Edit gallery', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetContent: function(options) {
        if (this.options.editable == false) {
            return;
        }
        var options = Object.merge({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }, options);
        new PhotoGalleryWidgetAdminWindowUI(options).set('website', this.website).set('widget', this);
    }
});
var PrivacyPolicyWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Privacy policy',
        short_name: 'privacy_policy',
        dropdown: true
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new PrivacyPolicyWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var ProductContentWidget = new Class({
    Extends: LayoutWidget,
    Implements: WebshopWidget,
    options: {
        name: 'Product content',
        short_name: 'product_content',
        dropdown: true
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.entries.each(function(entry) {
            var eId = entry.get('data-eid');
            if (!eId) {
                return;
            }
            if (typeof(this.galleryTypes[eId]) != 'undefined') {
                switch (this.galleryTypes[eId]) {
                    case GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE:
                    case GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX:
                        {
                            this.createThumbsView(entry);
                            break;
                        }
                }
            }
        }, this);
        this.createProductAccessoriesThumbsView();
        this.createRelatedProductsThumbsView();
    },
    createThumbsView: function(entry) {
        var filmStrip = entry.getElement('.tpl-product-images .tpl-photo-gallery-carousel-film-strip');
        var slides = (filmStrip ? filmStrip.getElements('.tpl-photo-gallery-carousel-slide') : null);
        if (filmStrip && slides && slides.length > 0) {
            var w = 0;
            slides.each(function(sl) {
                var slCompSize = sl.measure(function() {
                        return this.getComputedSize({
                            mode: 'horizontal',
                            styles: ['border', 'padding', 'margin']
                        })
                    }),
                    slSize = sl.measure(function() {
                        return this.getDimensions();
                    });
                w += slSize.width + slCompSize.computedLeft + slCompSize.computedRight;
            });
            var rW = Math.round(w);
            if (rW < w) {
                w = rW + 1;
            } else {
                w = rW;
            }
            filmStrip.setStyle('width', w);
        }
    },
    createProductAccessoriesThumbsView: function() {
        var filmStrip = this.element.getElement('.tpl-product-accessories .tpl-product-accessories-carousel-film-strip');
        var items = (filmStrip ? filmStrip.getElements('.tpl-product-accessories-carousel-item') : null);
        if (filmStrip && items && items.length > 0) {
            var w = 0;
            items.each(function(sl) {
                var slCompSize = sl.measure(function() {
                        return this.getComputedSize({
                            mode: 'horizontal',
                            styles: ['border', 'padding', 'margin']
                        })
                    }),
                    slSize = sl.measure(function() {
                        return this.getDimensions();
                    });
                w += slSize.width + slCompSize.computedLeft + slCompSize.computedRight;
            });
            var rW = Math.round(w);
            if (rW < w) {
                w = rW + 1;
            } else {
                w = rW;
            }
            filmStrip.setStyle('width', w);
        }
    },
    createRelatedProductsThumbsView: function() {
        var filmStrip = this.element.getElement('.tpl-related-products .tpl-related-products-carousel-film-strip');
        var items = (filmStrip ? filmStrip.getElements('.tpl-related-products-carousel-item') : null);
        if (filmStrip && items && items.length > 0) {
            var w = 0;
            items.each(function(sl) {
                var slCompSize = sl.measure(function() {
                        return this.getComputedSize({
                            mode: 'horizontal',
                            styles: ['border', 'padding', 'margin']
                        })
                    }),
                    slSize = sl.measure(function() {
                        return this.getDimensions();
                    });
                w += slSize.width + slCompSize.computedLeft + slCompSize.computedRight;
            });
            var rW = Math.round(w);
            if (rW < w) {
                w = rW + 1;
            } else {
                w = rW;
            }
            filmStrip.setStyle('width', w);
        }
    },
    initVariables: function() {
        this.parent();
        this.entryUID = 0;
        this.entries = [];
        this.validators = {};
        this.combinations = {};
        this.galleryTypes = {};
        this.galleries = {};
        this.lightboxes = {};
        this.tooltips = [];
        this.productAccessoriesSlider = null;
        this.relatedProductsSlider = null;
        this.entries = this.element.getElements('.tpl-product-content, .tpl-product-accessories .tpl-product-accessories-item');
        this.entries.each(function(entry) {
            var pIdInput = entry.getElement('.tpl-product-form input[name="data[WebshopProduct][id]"]');
            var pId = (pIdInput && pIdInput.get('value') && parseInt(pIdInput.get('value')) > 0 ? parseInt(pIdInput.get('value')) : null);
            if (!pId) {
                return;
            }
            var eId = pId + '_' + (++this.entryUID);
            while (true) {
                if ($(document.body).getElement('[data-eid=' + eId + ']')) {
                    eId = pId + '_' + (++this.entryUID);
                } else {
                    break;
                }
            }
            entry.set('data-pid', pId);
            entry.set('data-eid', eId);
            var combinations = [];
            entry.getElements('input[data-type=combination]').each(function(input) {
                combinations.push({
                    id: parseInt(input.get('data-id')),
                    limited: (input.get('data-limited') == 1 ? true : false),
                    amount: parseFloat(input.get('data-amount')),
                    values: JSON.decode(input.get('data-values')),
                    raw_price: (input.get('data-raw-price') != null ? parseFloat(input.get('data-raw-price')) : 0.00),
                    display_price: input.get('data-display-price'),
                    raw_lowest_price: input.get('data-raw-lowest-price'),
                    display_lowest_price: input.get('data-display-lowest-price'),
                    special_offer_label: input.get('data-special-offer-label')
                });
            });
            this.combinations[eId] = combinations;
            var view = entry.getElement('.tpl-product-images');
            if (view) {
                switch (true) {
                    case (view.hasClass('tpl-thumbs-with-stage-gallery')):
                        {
                            this.galleryTypes[eId] = GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE;
                            break;
                        }
                    case (view.hasClass('tpl-thumbs-with-lightbox-gallery')):
                        {
                            this.galleryTypes[eId] = GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX;
                            break;
                        }
                    case (view.hasClass('tpl-thumbs-grid-gallery')):
                        {
                            this.galleryTypes[eId] = GALLERY_DISPLAY_TYPE_THUMBS_GRID;
                            break;
                        }
                }
            }
        }, this);
        this.element.getElements('.tpl-product-accessories .tpl-product-accessory-item, .tpl-product-accessories .tpl-product-accessories-carousel-item').each(function(entry) {
            var pIdInput = entry.getElement('.tpl-product-cart-form input[name="data[Product][id]"]');
            var pId = (pIdInput && pIdInput.get('value') && parseInt(pIdInput.get('value')) > 0 ? parseInt(pIdInput.get('value')) : null);
            if (!pId) {
                return;
            }
            var eId = pId + '_' + (++this.entryUID);
            while (true) {
                if ($(document.body).getElement('[data-eid=' + eId + ']')) {
                    eId = pId + '_' + (++this.entryUID);
                } else {
                    break;
                }
            }
            entry.set('data-pid', pId);
            entry.set('data-eid', eId);
            this.entries.push(entry);
        }, this);
    },
    attach: function() {
        this.parent();
        this.entries.each(function(entry) {
            var eId = entry.get('data-eid');
            var reviewsLink = entry.getElement('.tpl-product-info .tpl-rating-text a');
            if (reviewsLink) {
                var event = this.productReviewsLinkClick.bind(this, reviewsLink);
                reviewsLink.store('event:productReviewsLinkClick', event).addEvent('click', event);
            }
            var cartForm = entry.getElement('.tpl-product-cart-form');
            if (cartForm) {
                if (cartForm.hasClass('tpl-product-options-form')) {
                    if (!eId) {
                        return;
                    }
                    if (typeof(this.validators[eId]) != 'undefined') {
                        this.validators[eId].attach();
                    } else if (typeof(window['FormCheck']) != 'undefined') {
                        var self = this;
                        var msgBox = this.element.getElement('.tpl-message');
                        var elementId = (this.element ? this.element.get('id') : null);
                        var customElAlerts = {};
                        cartForm.getElements('[class*=validate]').each(function(input) {
                            var lbl = input.getParent('.tpl-product-cart-option-row').getElement('.tpl-product-cart-option-label');
                            if (lbl) {
                                customElAlerts[input.get('id')] = __('form_check', 'Field "%0" is required.').replace('%0', lbl.get('html').replace(/[\:]+$/g, '').trim());
                            }
                        });
                        var options = Object.merge(this.getValidatorOptions(), {
                            submitByAjax: true,
                            ajaxSubmitAction: '/ajax_core_widgets_ui/request/',
                            ajaxData: {
                                'data[Request][widget_id]': this.id,
                                'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                                'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
                                'data[Request][render]': 1,
                                'data[Request][process]': 1
                            },
                            display: {
                                errorsListContainer: msgBox,
                                customElAlerts: customElAlerts
                            },
                            getScrollPosition: function(obj) {
                                var top = -1;
                                var bottom = -1;
                                if (self.admin || self.preview) {
                                    var coords = obj.getRelativeCoordinates($('PageWrapper'));
                                    top = coords.top - 30;
                                    bottom = coords.bottom + 10;
                                } else {
                                    var coords = obj.measure(function() {
                                        return this.getCoordinates()
                                    });
                                    top = coords.top - 30;
                                    bottom = coords.bottom + 10;
                                }
                                return {
                                    top: top,
                                    bottom: bottom
                                };
                            },
                            onFormValid: function() {
                                if ((self.admin || self.preview) && Browser.ie && Math.round(Browser.version) < 8) {
                                    Browser.redraw();
                                }
                                var sysMsg = $('SystemMessage');
                                if (sysMsg) {
                                    sysMsg.hide();
                                }
                                this.form.getElements('.tpl-product-cart-option-row.tpl-invalid').removeClass('tpl-invalid');
                                self.elementResized();
                            },
                            onInputInvalid: function(input) {
                                if (this.options.display.errorsListContainer && this.options.display.errorsListContainer.hasClass('tpl-success')) {
                                    this.options.display.errorsListContainer.removeClass('tpl-success');
                                    this.options.display.errorsListContainer.addClass('tpl-error');
                                }
                                var row = input.getParent('.tpl-product-cart-option-row');
                                if (row && !row.hasClass('tpl-invalid')) {
                                    row.addClass('tpl-invalid');
                                }
                                var focused = $(document.body).getElement('*:focus');
                                if (focused && focused != input) {
                                    focused.blur();
                                }
                            },
                            onInputValid: function(input) {
                                var row = input.getParent('.tpl-product-cart-option-row');
                                if (row && row.hasClass('tpl-invalid')) {
                                    var inputs = row.getElements('input,select').erase(input);
                                    var bRemove = true;
                                    inputs.each(function(i) {
                                        if (this.validations.contains(i) && i.isOk == false) {
                                            bRemove = false;
                                        }
                                    }, this);
                                    if (bRemove) {
                                        row.removeClass('tpl-invalid');
                                    }
                                }
                            },
                            onAjaxSuccess: function(response) {
                                self.setBusy(false);
                                if (self.website.websiteRequestSuccess(response) == false) {
                                    return;
                                }
                                if (Object.getFromPath(response, 'widget_content') && Object.getFromPath(response, 'widget_content').length > 0 && Object.getFromPath(response, 'css_assets') && Object.getFromPath(response, 'js_assets')) {
                                    self.page.queueWidgetInsert(elementId, response, true, false);
                                    if (typeof(response.success) != 'undefined') {
                                        var duration = 8000;
                                        if (Object.getFromPath(response, 'notifications') && response.notifications.length > 0) {
                                            duration = 12000;
                                        }
                                        self.website.notifier.empty();
                                        if (response.success == true && typeof(response.product) != 'undefined' && typeof(response.product.name) != 'undefined' && typeof(response.product.quantity) != 'undefined' && typeof(response.product.display_price) != 'undefined' && typeof(response.product.currency) != 'undefined' && typeof(response.product.show_zero_price) != 'undefined' && typeof(response.product.checkout_url) != 'undefined') {
                                            var options = Object.merge(Object.clone(self.website.options.notifierOptions), {
                                                duration: duration,
                                                hideOnClick: false,
                                                classes: {
                                                    item: 'tpl-roar tpl-roar-box'
                                                },
                                                onShow: function(item, length) {
                                                    item.getElements('.tpl-roar-box-buttons input').each(function(button) {
                                                        var event = (function() {
                                                            this.remove(item);
                                                        }).bind(this);
                                                        switch (true) {
                                                            case button.hasClass('tpl-checkout-button'):
                                                                {
                                                                    event = (function() {
                                                                        window.location = response.product.checkout_url;
                                                                    }).bind(this);
                                                                    break;
                                                                }
                                                        }
                                                        button.store('event:roarButtonClick', event).addEvent('click', event);
                                                    }, this);
                                                },
                                                onHide: function(item, length) {
                                                    item.getElements('.tpl-roar-box-buttons input').each(function(button) {
                                                        button.removeEvent('click', button.retrieve('event:roarButtonClick')).eliminate('event:roarButtonClick');
                                                    }, this);
                                                }
                                            });
                                            var price = parseFloat(response.product.display_price.replace(/,/gi, '.'));
                                            var content = new Element('div').adopt(new Element('div', {
                                                'class': 'tpl-roar-box-header clearfix',
                                                'html': response.msg
                                            }), new Element('div', {
                                                'class': 'tpl-roar-box-body clearfix'
                                            }).adopt(new Element('div', {
                                                'class': 'tpl-roar-box-description'
                                            }).adopt(new Element('div', {
                                                'class': 'tpl-roar-box-label',
                                                'html': response.product.name
                                            }), new Element('div', {
                                                'html': (price > 0 || response.product.show_zero_price == true ? response.product.quantity + ' x ' + response.product.display_price + ' ' + response.product.currency : __('core', 'Qty:') + ' ' + response.product.quantity)
                                            }))), new Element('div', {
                                                'class': 'tpl-roar-box-separator clearfix'
                                            }), new Element('div', {
                                                'class': 'tpl-roar-box-buttons clearfix'
                                            }).adopt(new Element('input', {
                                                'type': 'button',
                                                'class': 'tpl-float-left',
                                                'value': __('core', 'Continue shopping')
                                            }), new Element('input', {
                                                'type': 'button',
                                                'class': 'tpl-float-right tpl-alt-button tpl-checkout-button',
                                                'value': __('core', 'Show cart') + ' ' + String.fromCharCode(0x203a)
                                            })));
                                            if (typeof(response.product.options) != 'undefined' && response.product.options.length > 0) {
                                                var description = content.getElement('.tpl-roar-box-description');
                                                var list = new Element('div', {
                                                    'class': 'tpl-roar-box-options-list'
                                                });
                                                description.adopt(list);
                                                response.product.options.each(function(option) {
                                                    list.adopt(new Element('div', {
                                                        'class': 'tpl-roar-box-options-list-item clearfix'
                                                    }).adopt(new Element('div', {
                                                        'class': 'tpl-roar-box-options-list-item-label',
                                                        'html': option.option + ':'
                                                    }), new Element('div', {
                                                        'html': option.variant
                                                    })));
                                                });
                                            }
                                            var body = content.getElement('.tpl-roar-box-body');
                                            if (typeof(response.product.image_url) != 'undefined' && response.product.image_url.length > 0 && typeof(response.product.image_width) != 'undefined' && typeof(response.product.image_height) != 'undefined') {
                                                new Element('div', {
                                                    'class': 'tpl-roar-box-thumb'
                                                }).adopt(new Element('img', {
                                                    'src': response.product.image_url,
                                                    'width': response.product.image_width,
                                                    'height': response.product.image_height,
                                                    'alt': response.product.name
                                                })).inject(body, 'top');
                                                body.getElement('.tpl-roar-box-description').addClass('tpl-roar-box-description-indent');
                                            } else {
                                                new Element('div', {
                                                    'class': 'tpl-roar-box-thumb'
                                                }).adopt(new Element('span', {
                                                    'class': 'tpl-product-default-image'
                                                })).inject(body, 'top');
                                                body.getElement('.tpl-roar-box-description').addClass('tpl-roar-box-description-indent');
                                            }
                                            self.website.notificationBox(content, options);
                                        }
                                        if (Object.getFromPath(response, 'notifications') && response.notifications.length > 0) {
                                            response.notifications.each(function(notification) {
                                                if (Object.getFromPath(notification, 'type') && Object.getFromPath(notification, 'title') && Object.getFromPath(notification, 'msg')) {
                                                    var options = Object.merge(Object.clone(self.website.options.notifierOptions), {
                                                        duration: duration,
                                                        hideOnClick: false,
                                                        classes: {
                                                            item: 'tpl-roar tpl-roar-' + notification.type
                                                        }
                                                    });
                                                    self.website.notify(notification.title, notification.msg, options);
                                                }
                                            }, this);
                                        }
                                        if (response.success == true) {
                                            self.page.refreshCart();
                                        }
                                        return;
                                    }
                                    if (Object.getFromPath(response, 'app_error') && Object.getFromPath(response, 'app_error') == true) {
                                        var title = __('core', 'Error');
                                        var msg = __('core', 'An error has occurred while communicating with the server. Please try again.');
                                        if (Object.getFromPath(response, 'app_title') && Object.getFromPath(response, 'app_title').length > 0) {
                                            title = Object.getFromPath(response, 'app_title');
                                        }
                                        if (Object.getFromPath(response, 'app_msg') && Object.getFromPath(response, 'app_msg').length > 0) {
                                            msg = Object.getFromPath(response, 'app_msg');
                                        }
                                        new IWindow.Error(title, msg, {
                                            pin: true,
                                            onShow: function() {
                                                this.element.getElement('input[type=button]').focus();
                                            }
                                        });
                                    }
                                } else {
                                    new IWindow.Error(__('core', 'Error'), __('core', 'An error has occurred while communicating with the server. Please try again.'), {
                                        pin: true,
                                        onShow: function() {
                                            this.element.getElement('input[type=button]').focus();
                                        }
                                    });
                                }
                            }
                        });
                        this.validators[eId] = new FormCheck(cartForm, options);
                        Object.each(this.validators[eId].options.alerts, function(msg, idx) {
                            this.validators[eId].options.alerts[idx] = __('form_check', msg);
                        }, this);
                    }
                } else {
                    var event = this.productCartFormSubmit.bind(this, cartForm);
                    cartForm.store('event:productCartFormSubmit', event).addEvent('submit', event);
                }
                cartForm.getElements('.tpl-product-cart-qty').each(function(input) {
                    var event = this.quantityInputFocus.bind(this, input);
                    input.store('event:quantityInputFocus', event).addEvent('focus', event);
                    var event = this.quantityInputBlur.bind(this, input);
                    input.store('event:quantityInputBlur', event).addEvent('blur', event);
                    var event = this.quantityInputKeydown.bind(this, input);
                    input.store('event:quantityInputKeydown', event).addEvent('keydown', event);
                    var event = this.quantityInputKeyup.bind(this, input);
                    input.store('event:quantityInputKeyup', event).addEvent('keyup', event);
                }, this);
                cartForm.getElements('.tpl-product-cart-option-row select').each(function(select) {
                    var event = this.optionSelectChange.bind(this, select);
                    select.store('event:optionSelectChange', event).addEvent('change', event);
                }, this);
                cartForm.getElements('.tpl-product-cart-option-row input[type=radio]').each(function(input) {
                    var event = this.optionRadioClick.bind(this, input);
                    input.store('event:optionRadioClick', event).addEvent('click', event);
                }, this);
            }
            entry.getElements('.tpl-contact-form-link').each(function(link) {
                var event = this.contactFormLinkClick.bind(this, link, entry);
                link.store('event:contactFormLinkClick', event).addEvent('click', event);
            }, this);
            this.attachProductDetailsBox(entry);
            var featuredImageLink = entry.getElement('.tpl-product-featured-image-wrapper a');
            if (featuredImageLink && eId) {
                var event = this.featuredImageLinkClick.bind(this, featuredImageLink);
                featuredImageLink.store('event:featuredImageLinkClick', event).addEvent('click', event);
            }
        }, this);
        this.element.getElements('.tpl-feature-notes[title]').each(function(n) {
            this.tooltips.push(new FadingTooltip(n, {
                text: n.get('title'),
                showDelay: 10,
                offset: {
                    x: -30,
                    y: -8
                },
                hook: {
                    target: 'topRight',
                    tip: 'bottomLeft'
                },
                width: 350,
                container: $('PageContent'),
                relative: true,
                relativeParentElement: $('PageContent'),
                classes: {
                    tooltip: 'tpl-tooltip clearfix',
                    arrow: 'tpl-tooltip-arrow tpl-bottom-left'
                }
            }));
        }, this);
        if (this.productAccessoriesSlider) {
            this.productAccessoriesSlider.attach();
        } else {
            var fn = (function() {
                var carousel = this.element.getElement('.tpl-product-accessories .tpl-product-accessories-carousel');
                if (!carousel) {
                    return;
                }
                var wrapper = carousel.getParent('.tpl-product-accessories-wrapper');
                if (wrapper) {
                    this.productAccessoriesSlider = new ScrollerPhotoGallery(wrapper, {
                        carouselSize: SPG_CAROUSEL_SIZE_LARGE,
                        carousel: '.tpl-product-accessories-carousel',
                        carouselNavPrev: '.tpl-product-accessories-carousel-control.tpl-previous',
                        carouselNavNext: '.tpl-product-accessories-carousel-control.tpl-next',
                        filmStripContainer: '.tpl-product-accessories-carousel-film-strip-container',
                        filmStrip: '.tpl-product-accessories-carousel-film-strip',
                        slide: '.tpl-product-accessories-carousel-item',
                        classes: {
                            carouselNavMouseOver: 'tpl-product-accessories-carousel-control-mouseover'
                        }
                    });
                }
            }).bind(this);
            if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                fn.apply();
            } else {
                window.addEvent('load', fn);
            }
        }
        if (this.relatedProductsSlider) {
            this.relatedProductsSlider.attach();
        } else {
            var fn = (function() {
                var carousel = this.element.getElement('.tpl-related-products .tpl-related-products-carousel');
                if (!carousel) {
                    return;
                }
                var wrapper = carousel.getParent('.tpl-related-products-wrapper');
                if (wrapper) {
                    this.relatedProductsSlider = new ScrollerPhotoGallery(wrapper, {
                        carouselSize: SPG_CAROUSEL_SIZE_LARGE,
                        carousel: '.tpl-related-products-carousel',
                        carouselNavPrev: '.tpl-related-products-carousel-control.tpl-previous',
                        carouselNavNext: '.tpl-related-products-carousel-control.tpl-next',
                        filmStripContainer: '.tpl-related-products-carousel-film-strip-container',
                        filmStrip: '.tpl-related-products-carousel-film-strip',
                        slide: '.tpl-related-products-carousel-item',
                        classes: {
                            carouselNavMouseOver: 'tpl-related-products-carousel-control-mouseover'
                        }
                    });
                }
            }).bind(this);
            if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                fn.apply();
            } else {
                window.addEvent('load', fn);
            }
        }
    },
    detach: function() {
        this.parent();
        this.entries.each(function(entry) {
            var eId = entry.get('data-eid');
            var reviewsLink = entry.getElement('.tpl-product-info .tpl-rating-text a');
            if (reviewsLink) {
                reviewsLink.removeEvent('click', reviewsLink.retrieve('event:productReviewsLinkClick')).eliminate('event:productReviewsLinkClick');
            }
            var cartForm = entry.getElement('.tpl-product-cart-form');
            if (cartForm) {
                if (cartForm.hasClass('tpl-product-options-form')) {
                    if (!eId) {
                        return;
                    }
                    if (typeof(this.validators[eId]) != 'undefined') {
                        this.validators[eId].detach();
                    }
                } else {
                    cartForm.removeEvent('submit', cartForm.retrieve('event:productCartFormSubmit')).eliminate('event:productCartFormSubmit');
                }
                cartForm.getElements('.tpl-product-cart-qty').each(function(input) {
                    input.removeEvent('focus', input.retrieve('event:quantityInputFocus')).eliminate('event:quantityInputFocus');
                    input.removeEvent('blur', input.retrieve('event:quantityInputBlur')).eliminate('event:quantityInputBlur');
                    input.removeEvent('keydown', input.retrieve('event:quantityInputKeydown')).eliminate('event:quantityInputKeydown');
                    input.removeEvent('keyup', input.retrieve('event:quantityInputKeyup')).eliminate('event:quantityInputKeyup');
                });
                cartForm.getElements('.tpl-product-cart-option-row select').each(function(select) {
                    select.removeEvent('change', select.retrieve('event:optionSelectChange')).eliminate('event:optionSelectChange');
                });
                cartForm.getElements('.tpl-product-cart-option-row input[type=radio]').each(function(input) {
                    input.removeEvent('click', input.retrieve('event:optionRadioClick')).eliminate('event:optionRadioClick');
                });
            }
            entry.getElements('.tpl-contact-form-link').each(function(link) {
                link.removeEvent('click', link.retrieve('event:contactFormLinkClick')).eliminate('event:contactFormLinkClick');
            });
            this.detachProductDetailsBox(entry);
            var featuredImageLink = entry.getElement('.tpl-product-featured-image-wrapper a');
            if (featuredImageLink && eId) {
                featuredImageLink.removeEvent('click', featuredImageLink.retrieve('event:featuredImageLinkClick')).eliminate('event:featuredImageLinkClick');
            }
        }, this);
        if (this.tooltips.length > 0) {
            this.tooltips.each(function(t) {
                t.destroy();
            });
            this.tooltips = [];
        }
        if (this.productAccessoriesSlider) {
            this.productAccessoriesSlider.detach();
        }
        if (this.relatedProductsSlider) {
            this.relatedProductsSlider.detach();
        }
    },
    documentResized: function() {
        this.parent();
        if (this.productAccessoriesSlider) {
            this.createProductAccessoriesThumbsView();
            this.productAccessoriesSlider.reinitialize();
        }
        if (this.relatedProductsSlider) {
            this.createRelatedProductsThumbsView();
            this.relatedProductsSlider.reinitialize();
        }
    },
    productReviewsLinkClick: function(link, ev) {
        var details = link.getParent('.tpl-product-content').getElement('.tpl-product-additional-info');
        if (!details) {
            return;
        }
        var currentTabItem = details.getElement('.tpl-tabs .tpl-active');
        var reviewsTabItem = details.getElement('.tpl-tabs .tpl-reviews');
        var fragment = new URI(link.get('href')).get('fragment');
        if (!currentTabItem || !reviewsTabItem || !fragment || fragment.length == 0) {
            return;
        }
        ev.preventDefault();
        if (!currentTabItem.hasClass('tpl-reviews')) {
            var tabLink = reviewsTabItem.getElement('a');
            if (History.push(History.toRelativeUrl(tabLink.get('href')), null, {
                    a: 'widget',
                    m: 'showProductDetailsTab',
                    w: this.element.get('id')
                }) == false) {
                this.showProductDetailsTab({
                    url: tabLink.get('href')
                });
            }
        }
        var target = link.getParent('.tpl-product-content').getElement('.tpl-product-additional-info-wrapper');
        if (target) {
            var scrollY = this.scrollableElement.getScroll().y;
            var viewportSize = this.viewportElement.getSize();
            var coords = null;
            if (this.admin || this.preview) {
                coords = target.getRelativeCoordinates($('PageWrapper'));
            } else {
                coords = target.getCoordinates();
            }
            var height = coords.bottom - coords.top;
            if (viewportSize.y > height + 20 && coords.bottom > viewportSize.y + scrollY) {
                this.scrollFx.start(0, coords.bottom - viewportSize.y + 10);
            } else if (viewportSize.y < height + 20 || scrollY > coords.top) {
                this.scrollFx.start(0, coords.top);
            }
        }
    },
    optionSelectChange: function(select, ev) {
        entry = select.getParent('.tpl-product-content');
        if (!entry) {
            return;
        }
        var eId = entry.get('data-eid');
        if (!eId) {
            return;
        }
        this.checkCombination(eId);
    },
    optionRadioClick: function(input, ev) {
        entry = input.getParent('.tpl-product-content');
        if (!entry) {
            return;
        }
        var eId = entry.get('data-eid');
        if (!eId) {
            return;
        }
        this.checkCombination(eId);
    },
    featuredImageLinkClick: function(link, ev) {
        ev.preventDefault();
        var eId = link.getParent('.tpl-product-content').get('data-eid');
        if (typeof(this.galleryTypes[eId]) != 'undefined') {
            switch (this.galleryTypes[eId]) {
                case GALLERY_DISPLAY_TYPE_THUMBS_WITH_STAGE:
                    {
                        if (!this.galleries[eId]) {
                            return;
                        }
                        var data = (link.get('data-image') && link.get('data-image').length > 0 ? JSON.decode(link.get('data-image')) : null);
                        if (!data || typeof(data.id) == 'undefined' || typeof(data.description) == 'undefined') {
                            return;
                        }
                        if (this.galleries[eId].slides.length > 0) {
                            var slides = this.galleries[eId].slides.filter(function(s) {
                                var l = s.getElement('a');
                                if (!l) {
                                    return false;
                                }
                                var d = (l.get('data-image') && l.get('data-image').length > 0 ? JSON.decode(l.get('data-image')) : null);
                                if (!d || typeof(d.id) == 'undefined' || d.id != data.id) {
                                    return false;
                                }
                                return true;
                            });
                            slides = slides.clean();
                            var slide = (slides.length > 0 ? slides.shift() : null);
                            if (slide) {
                                var bIsDisplayed = this.galleries[eId].stage.isDisplayed();
                                this.galleries[eId].setCurrentPhoto(slide.getElement('a'));
                                if (bIsDisplayed == true) {
                                    this.galleries[eId].fireEvent('showStage');
                                }
                            }
                        } else {
                            if (this.galleries[eId].stage.isDisplayed() == false) {
                                this.galleries[eId].stage.show();
                            }
                            this.galleries[eId].fireEvent('showStage');
                            this.galleries[eId].loadPhotoIntoStage({
                                src: link.get('href'),
                                description: data.description
                            });
                        }
                        break;
                    }
                case GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX:
                case GALLERY_DISPLAY_TYPE_THUMBS_GRID:
                    {
                        if (!this.lightboxes[eId]) {
                            return;
                        }
                        var data = (link.get('data-image') && link.get('data-image').length > 0 ? JSON.decode(link.get('data-image')) : null);
                        if (!data || typeof(data.id) == 'undefined' || typeof(data.description) == 'undefined') {
                            return;
                        }
                        if (this.lightboxes[eId].items.length > 0) {
                            var items = this.lightboxes[eId].items.filter(function(l) {
                                var d = (l.get('data-image') && l.get('data-image').length > 0 ? JSON.decode(l.get('data-image')) : null);
                                if (!d || typeof(d.id) == 'undefined' || d.id != data.id) {
                                    return false;
                                }
                                return true;
                            });
                            items = items.clean();
                            var item = (items.length > 0 ? items.shift() : null);
                            if (item) {
                                this.lightboxes[eId].setCurrentPhoto(item);
                                this.lightboxes[eId].show();
                            }
                        }
                        break;
                    }
            }
        } else {
            var galleryType = false;
            switch (true) {
                case (link.hasClass('tpl-thumbs-with-lightbox-gallery')):
                    {
                        galleryType = GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX;
                        break;
                    }
                case (link.hasClass('tpl-thumbs-grid-gallery')):
                    {
                        galleryType = GALLERY_DISPLAY_TYPE_THUMBS_GRID;
                        break;
                    }
            }
            if (!galleryType) {
                return;
            }
            switch (galleryType) {
                case GALLERY_DISPLAY_TYPE_THUMBS_WITH_LIGHTBOX:
                case GALLERY_DISPLAY_TYPE_THUMBS_GRID:
                    {
                        if (!this.lightboxes[eId]) {
                            this.lightboxes[eId] = new Lightbox(link.getParent(), {
                                text: {
                                    close: __('core', 'Close')
                                },
                                getItems: function(container) {
                                    return container.getElements('a[href]');
                                },
                                parseItem: function(item) {
                                    var data = (item.get('data-image') && item.get('data-image').length > 0 ? JSON.decode(item.get('data-image')) : null);
                                    return {
                                        element: item,
                                        src: item.get('href'),
                                        description: (typeof(data.description) != 'undefined' ? data.description : '')
                                    };
                                }
                            });
                        }
                        var data = (link.get('data-image') && link.get('data-image').length > 0 ? JSON.decode(link.get('data-image')) : null);
                        if (!data || typeof(data.id) == 'undefined' || typeof(data.description) == 'undefined') {
                            return;
                        }
                        if (this.lightboxes[eId].items.length > 0) {
                            var items = this.lightboxes[eId].items.filter(function(l) {
                                var d = (l.get('data-image') && l.get('data-image').length > 0 ? JSON.decode(l.get('data-image')) : null);
                                if (!d || typeof(d.id) == 'undefined' || d.id != data.id) {
                                    return false;
                                }
                                return true;
                            });
                            items = items.clean();
                            var item = (items.length > 0 ? items.shift() : null);
                            if (item) {
                                this.lightboxes[eId].setCurrentPhoto(item);
                                this.lightboxes[eId].show();
                            }
                        }
                        break;
                    }
            }
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editableDropdownItemClick: function(item) {
        var action = item.getElement('span').get('class');
        switch (action) {
            case 'ui-edit':
                {
                    var data = (item.getElement('a') && item.getElement('a').get('data-item') ? JSON.decode(item.getElement('a').get('data-item')) : null);
                    if (data && typeof(data.product_id) != 'undefined') {
                        this.hideEditBox();
                        this.editWidgetContent(data);
                    }
                    break;
                }
            case 'ui-settings':
                {
                    this.hideEditBox();this.editWidgetSettings();
                    break;
                }
            case 'ui-delete':
                {
                    this.hideEditBox();this.deleteWidget();
                    break;
                }
        }
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                });
                if (this.element.get('data-item') && this.element.get('data-item').length > 0) {
                    var data = JSON.decode(this.element.get('data-item'));
                    if (data && typeof(data.product_id) != 'undefined') {
                        this.editBox.dd.addSeparator().addItem({
                            html: '<span class="ui-edit">' + __('admin_widget', 'Edit product', true) + '</span>',
                            linkProperties: {
                                'data-item': this.element.get('data-item')
                            }
                        });
                    }
                }
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetContent: function(data) {
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        var requestData = {
            data: {
                Request: {
                    id: data.product_id,
                    language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                    url: Object.getFromPath(this.page, 'options.page.here_url')
                }
            }
        };
        if (typeof(data.page_id) != 'undefined') {
            requestData.data.Request.page_id = data.page_id;
        }
        var settings = {
            name: 'BackstagePaneUI.Webshop.EditProduct',
            options: {
                requestData: requestData
            }
        };
        this.website.backstage.loadPane(settings);
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new ProductContentWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    },
    checkCombination: function(entryId) {
        var entry = this.element.getElement('[data-eid=' + entryId + ']');
        if (!entry) {
            return;
        }
        var availability = entry.getElement('.tpl-product-availability .tpl-product-availability-status') || entry.getElement('.tpl-product-availability .tpl-product-availability-amount') || entry.getElement('.tpl-product-availability .tpl-product-availability-no-combination');
        var availabilityType = (availability ? availability.getParent('.tpl-product-availability').get('data-type') : 'amount');
        var priceContainer = entry.getElement('.tpl-product-cart-current-price span[itemprop="price"]');
        var lowestPriceInfoContainer = entry.getElement('.tpl-product-cart-lowest-price-info');
        var lowestPriceContainer = (lowestPriceInfoContainer ? lowestPriceInfoContainer.getElement('.tpl-product-cart-lowest-price-value') : null);
        var specialOfferBox = entry.getElement('.tpl-special-offer span');
        var defaultPrice = entry.getElement('.tpl-product-cart-form input[data-type="default-price"]');
        if (this.combinations && typeof(this.combinations[entryId]) != 'undefined' && this.combinations[entryId].length > 0) {
            var selected = {};
            var required = [];
            entry.getElements('.tpl-product-cart-option-row select').each(function(select) {
                var vId = select.get('value');
                var oId = select.get('name').replace('data[Product][options][', '').replace(']', '');
                if (oId && parseInt(oId) > 0) {
                    if (vId && parseInt(vId) > 0) {
                        selected[oId] = vId;
                    }
                    if (select.get('class') && select.get('class').match(/'required'/)) {
                        required.push(oId);
                    }
                }
            });
            entry.getElements('.tpl-product-cart-option-row input[type=radio]').each(function(input) {
                var oId = input.get('name').replace('data[Product][options][', '').replace(']', '');
                var vId = input.get('value');
                if (oId && parseInt(oId) > 0) {
                    if (input.checked == true && vId && parseInt(vId) > 0) {
                        selected[oId] = vId;
                    }
                    if (input.get('class') && input.get('class').match(/'required'/)) {
                        required.push(oId);
                    }
                }
            });
            var bEmpty = true;
            var bRequiredSelected = (required.length > 0 ? false : true);
            var available = false;
            if (Object.getLength(selected) > 0) {
                bEmpty = false;
                var l = Object.getLength(selected);
                this.combinations[entryId].each(function(c) {
                    if (available) {
                        return;
                    }
                    if (c.limited == true && c.amount <= 0) {
                        return;
                    }
                    if (Object.getLength(c.values) != l) {
                        return;
                    }
                    var bFoundDiff = false;
                    Object.each(selected, function(vId, oId) {
                        if (typeof(c.values[oId]) == 'undefined' || parseInt(c.values[oId]) != parseInt(vId)) {
                            bFoundDiff = true;
                        }
                    });
                    if (bFoundDiff == false) {
                        available = c;
                    }
                });
                if (required.length > 0) {
                    bRequiredSelected = required.every(function(oId) {
                        return (typeof(selected[oId]) != 'undefined' ? true : false);
                    });
                }
            }
            var buttons = entry.getElements('input[type=submit],input[type=button],input[type=reset],button[type=submit],button[type=button],button[type=reset]');
            if (available) {
                if (priceContainer && available.display_price != null) {
                    priceContainer.set('text', available.display_price);
                }
                if (lowestPriceContainer) {
                    if (available.display_lowest_price != null) {
                        lowestPriceContainer.set('text', available.display_lowest_price);
                        if (!lowestPriceInfoContainer.isDisplayed()) {
                            lowestPriceInfoContainer.setStyle('display', null);
                        }
                    } else {
                        lowestPriceContainer.set('text', '');
                        lowestPriceInfoContainer.hide();
                    }
                }
                if (specialOfferBox && available.special_offer_label != null) {
                    specialOfferBox.set('text', available.special_offer_label);
                }
                buttons.set('disabled', false);
                buttons.setStyle('display', null);
                if (availability) {
                    if (availabilityType == 'amount' && available.limited == false) {
                        availabilityType = 'status';
                    }
                    switch (availabilityType) {
                        case 'status':
                            {
                                availability.set('class', 'tpl-product-availability-status tpl-product-in-stock').set('html', __('widget', 'In stock'));
                                break;
                            }
                        case 'amount':
                            {
                                availability.set('class', 'tpl-product-availability-amount tpl-product-in-stock').set('html', __('widget', 'In stock:') + ' <strong>' + available.amount + '</strong>');
                                break;
                            }
                    }
                } else {
                    this.website.notifier.empty();
                }
            } else {
                if (priceContainer && defaultPrice && defaultPrice.get('data-display-price') != null) {
                    priceContainer.set('text', defaultPrice.get('data-display-price'));
                }
                if (lowestPriceContainer) {
                    if (defaultPrice && defaultPrice.get('data-display-lowest-price') != null) {
                        lowestPriceContainer.set('text', defaultPrice.get('data-display-lowest-price'));
                        if (!lowestPriceInfoContainer.isDisplayed()) {
                            lowestPriceInfoContainer.setStyle('display', null);
                        }
                    } else {
                        lowestPriceContainer.set('text', '');
                        lowestPriceInfoContainer.hide();
                    }
                }
                if (specialOfferBox && defaultPrice && defaultPrice.get('data-special-offer-label') != null) {
                    specialOfferBox.set('text', defaultPrice.get('data-special-offer-label'));
                }
                if (bEmpty == true) {
                    buttons.set('disabled', false);
                    buttons.setStyle('display', null);
                } else {
                    buttons.set('disabled', true);
                    buttons.hide();
                }
                if (availability) {
                    if (bEmpty == true || bRequiredSelected == false) {
                        var bSimple = (availability ? availability.getParent('.tpl-product-availability').get('data-simple-mgmt') : false);
                        var bLimited = (availability ? availability.getParent('.tpl-product-availability').get('data-simple-limited') : false);
                        var amount = (availability ? availability.getParent('.tpl-product-availability').get('data-simple-amount') : false);
                        if (bSimple == true) {
                            if (availabilityType == 'amount' && bLimited == false) {
                                availabilityType = 'status';
                            }
                            switch (availabilityType) {
                                case 'status':
                                    {
                                        availability.set('class', 'tpl-product-availability-status tpl-product-in-stock').set('html', __('widget', 'In stock'));
                                        break;
                                    }
                                case 'amount':
                                    {
                                        availability.set('class', 'tpl-product-availability-amount tpl-product-in-stock').set('html', __('widget', 'In stock:') + ' <strong>' + amount + '</strong>');
                                        break;
                                    }
                            }
                        } else {
                            availability.set('class', 'tpl-product-availability-status tpl-product-in-stock').set('text', __('widget', 'Available in many variants'));
                        }
                    } else {
                        availability.set('class', 'tpl-product-availability-no-combination').set('text', __('widget', 'This product is no longer in stock with those options. Please select a different product variant.'));
                    }
                } else {
                    this.website.notifier.empty();
                    if (bEmpty == false && bRequiredSelected == true) {
                        var options = Object.merge(Object.clone(this.website.options.notifierOptions), {
                            duration: 8000,
                            hideOnClick: false,
                            classes: {
                                item: 'tpl-roar tpl-roar-warning'
                            }
                        });
                        this.website.notify(__('widget', 'Notice'), __('widget', 'This product is no longer in stock with those options. Please select a different product variant.'), options);
                    }
                }
            }
        }
    }
});
Drag.PercentSlider = new Class({
    Extends: Drag,
    options: {
        'unit': '%'
    },
    start: function(event) {
        this.parent(event);
        this.parentSize = this.element.getParent().getSize();
    },
    drag: function(event) {
        var options = this.options;
        if (options.preventDefault) event.preventDefault();
        this.mouse.now = event.page;
        for (var z in options.modifiers) {
            if (!options.modifiers[z]) continue;
            this.value.now[z] = ((this.mouse.now[z] - this.mouse.pos[z]) / this.parentSize[z]) * 100;
            if (options.invert) this.value.now[z] *= -1;
            if (options.limit && this.limit[z]) {
                if ((this.limit[z][1] || this.limit[z][1] === 0) && (this.value.now[z] > this.limit[z][1])) {
                    this.value.now[z] = this.limit[z][1];
                } else if ((this.limit[z][0] || this.limit[z][0] === 0) && (this.value.now[z] < this.limit[z][0])) {
                    this.value.now[z] = this.limit[z][0];
                }
            }
            if (options.grid[z]) this.value.now[z] -= ((this.value.now[z] - (this.limit[z][0] || 0)) % options.grid[z]);
            if (options.style) this.element.setStyle(options.modifiers[z], this.value.now[z] + options.unit);
            else this.element[options.modifiers[z]] = this.value.now[z];
        }
        this.fireEvent('drag', [this.element, event]);
    }
});
var ProductFiltersWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Product filters',
        short_name: 'product_filters',
        dropdown: true
    },
    initVariables: function() {
        this.parent();
        this.draggableSliders = [];
        this.element.getElements('.tpl-product-filters-actions').hide();
        this.element.getElements('.tpl-product-filter-item input[type=text].tpl-from, .tpl-product-filter-item input[type=text].tpl-to').each(function(input) {
            input.store('input:defaultValue', input.get('value'));
        });
    },
    attach: function() {
        this.parent();
        if (this.draggableSliders.length > 0) {
            this.draggableSliders.each(function(draggable) {
                draggable.attach();
            });
        } else {
            this.element.getElements('.tpl-range-slider .tpl-range-slider-handle').each(function(handle) {
                var wrapper = handle.getParent('.tpl-product-filter-items');
                var container = handle.getParent('.tpl-range-slider[data-range]');
                var data = (container && container.get('data-range') && container.get('data-range').length > 0 ? JSON.decode(container.get('data-range')) : {});
                if (typeof(data.from) == 'undefined' || typeof(data.to) == 'undefined') {
                    return;
                }
                var currentValueEl = container.getElement('.tpl-range-slider-current');
                if (!currentValueEl) {
                    return;
                }
                var options = {
                    limit: {
                        x: [0, 100]
                    }
                };
                switch (true) {
                    case (handle.hasClass('tpl-from')):
                        {
                            var to = handle.getParent().getElement('.tpl-range-slider-handle.tpl-to');
                            if (to) {
                                var val = 100;
                                if (to.getStyle('left').indexOf('%') > -1) {
                                    val = parseFloat(to.getStyle('left').replace('%', ''));
                                } else if (to.getStyle('left').indexOf('px') > -1) {
                                    val = ((parseInt(to.getStyle('left').replace('px', '')) / container.getSize().x) * 100).round(4);
                                }
                                options.limit.x[1] = val;
                            }
                            break;
                        }
                    case (handle.hasClass('tpl-to')):
                        {
                            var from = handle.getParent().getElement('.tpl-range-slider-handle.tpl-from');
                            if (from) {
                                var val = 100;
                                if (from.getStyle('left').indexOf('%') > -1) {
                                    val = parseFloat(from.getStyle('left').replace('%', ''));
                                } else if (from.getStyle('left').indexOf('px') > -1) {
                                    val = ((parseInt(from.getStyle('left').replace('px', '')) / container.getSize().x) * 100).round(4);
                                }
                                options.limit.x[0] = val;
                            }
                            break;
                        }
                }
                handle.draggableItem = new Drag.PercentSlider(handle, Object.merge({
                    snap: 1,
                    modifiers: {
                        x: 'left',
                        y: false
                    },
                    onDrag: function(el) {
                        var fromInput = el.getParent('.tpl-product-filter-items').getElement('.tpl-direct-input input[type=text].tpl-from');
                        var toInput = el.getParent('.tpl-product-filter-items').getElement('.tpl-direct-input input[type=text].tpl-to');
                        var from = el.getParent().getElement('.tpl-range-slider-handle.tpl-from');
                        var to = el.getParent().getElement('.tpl-range-slider-handle.tpl-to');
                        switch (true) {
                            case (el.hasClass('tpl-from')):
                                {
                                    if (to) {
                                        to.draggableItem.options.limit.x[0] = parseFloat(el.getStyle('left').replace('%', ''));
                                    }
                                    if (fromInput) {
                                        var value = data.from + ((data.to - data.from) * parseFloat(el.getStyle('left').replace('%', '')) / 100);
                                        if (to && to.getStyle('left') == el.getStyle('left')) {
                                            value = data.from + ((data.to - data.from) * parseFloat(to.getStyle('left').replace('%', '')) / 100);
                                        }
                                        if (wrapper.hasClass('tpl-price') && data.to - data.from > 0 && data.to - data.from <= 50) {
                                            value = value.format({
                                                decimals: 2
                                            });
                                        } else {
                                            value = Math.floor(value);
                                        }
                                        fromInput.set('value', value);
                                    }
                                    this.updateSliderRange(from, to, currentValueEl, container);
                                    break;
                                }
                            case (el.hasClass('tpl-to')):
                                {
                                    if (from) {
                                        from.draggableItem.options.limit.x[1] = parseFloat(el.getStyle('left').replace('%', ''));
                                    }
                                    if (toInput) {
                                        var value = data.from + ((data.to - data.from) * parseFloat(el.getStyle('left').replace('%', '')) / 100);
                                        if (from && from.getStyle('left') == el.getStyle('left')) {
                                            value = data.from + ((data.to - data.from) * parseFloat(from.getStyle('left').replace('%', '')) / 100);
                                        }
                                        if (wrapper.hasClass('tpl-price') && data.to - data.from > 0 && data.to - data.from <= 50) {
                                            value = value.format({
                                                decimals: 2
                                            });
                                        } else {
                                            value = Math.floor(value);
                                        }
                                        toInput.set('value', value);
                                    }
                                    this.updateSliderRange(from, to, currentValueEl, container);
                                    break;
                                }
                        }
                    }.bind(this),
                    onComplete: function(el) {
                        if (wrapper.hasClass('tpl-price') == false && data.to - data.from <= 100) {
                            var fromInput = el.getParent('.tpl-product-filter-items').getElement('.tpl-direct-input input[type=text].tpl-from');
                            var toInput = el.getParent('.tpl-product-filter-items').getElement('.tpl-direct-input input[type=text].tpl-to');
                            var from = el.getParent().getElement('.tpl-range-slider-handle.tpl-from');
                            var to = el.getParent().getElement('.tpl-range-slider-handle.tpl-to');
                            switch (true) {
                                case (el.hasClass('tpl-from')):
                                    {
                                        var value = data.from + ((data.to - data.from) * parseFloat(el.getStyle('left').replace('%', '')) / 100);
                                        if (to && to.getStyle('left') == el.getStyle('left')) {
                                            value = data.from + ((data.to - data.from) * parseFloat(to.getStyle('left').replace('%', '')) / 100);
                                        }
                                        value = Math.floor(value);
                                        if (data.to - data.from > 0) {
                                            el.setStyle('left', (((parseFloat(value) - data.from) * 100) / (data.to - data.from)).round(4) + '%');
                                        } else {
                                            el.setStyle('left', '0%');
                                        }
                                        if (fromInput) {
                                            fromInput.set('value', value);
                                        }
                                        if (to) {
                                            to.draggableItem.options.limit.x[0] = parseFloat(el.getStyle('left').replace('%', ''));
                                        }
                                        this.updateSliderRange(from, to, currentValueEl, container);
                                        break;
                                    }
                                case (el.hasClass('tpl-to')):
                                    {
                                        var value = data.from + ((data.to - data.from) * parseFloat(el.getStyle('left').replace('%', '')) / 100);
                                        if (from && from.getStyle('left') == el.getStyle('left')) {
                                            value = data.from + ((data.to - data.from) * parseFloat(from.getStyle('left').replace('%', '')) / 100);
                                        }
                                        value = Math.ceil(value);
                                        if (data.to - data.from > 0) {
                                            el.setStyle('left', (((parseFloat(value) - data.from) * 100) / (data.to - data.from)).round(4) + '%');
                                        } else {
                                            el.setStyle('left', '100%');
                                        }
                                        if (toInput) {
                                            toInput.set('value', value);
                                        }
                                        if (from) {
                                            from.draggableItem.options.limit.x[1] = parseFloat(el.getStyle('left').replace('%', ''));
                                        }
                                        this.updateSliderRange(from, to, currentValueEl, container);
                                        break;
                                    }
                            }
                        }
                        var form = el.getParent('form');
                        var bAjax = (form && form.get('data-ajax') == '1' ? true : false);
                        if (bAjax) {
                            form.fireEvent('submit');
                        } else {
                            form.submit();
                        }
                    }.bind(this)
                }, options));
            }, this);
        }
        var form = this.element.getElement('form');
        var bAjax = (form && form.get('data-ajax') == '1' ? true : false);
        if (form && bAjax == true) {
            var event = this.filtersFormSubmit.bind(this, form);
            form.store('event:filtersFormSubmit', event).addEvent('submit', event);
        }
        if (bAjax == true) {
            this.element.getElements('.tpl-active-product-filter-item a, .tpl-active-product-filter-actions a').each(function(link) {
                var event = this.clearFilterLinkClick.bind(this, link);
                link.store('event:clearFilterLinkClick', event).addEvent('click', event);
            }, this);
        }
        if (form) {
            form.getElements('.tpl-product-filter-item input[type=text].tpl-from, .tpl-product-filter-item input[type=text].tpl-to').each(function(input) {
                var event = this.rangeInputFocus.bind(this, input);
                input.store('event:rangeInputFocus', event).addEvent('focus', event);
                var event = this.rangeInputBlur.bind(this, input);
                input.store('event:rangeInputBlur', event).addEvent('blur', event);
                var event = this.decimalInputKeyUp.bind(this, input);
                input.store('event:decimalInputKeyUp', event).addEvent('keyup', event);
            }, this);
            form.getElements('.tpl-product-filter-collapsed-items-actions a').each(function(link) {
                var event = this.toggleCollapsedVariantsLinkClick.bind(this, link);
                link.store('event:toggleCollapsedVariantsLinkClick', event).addEvent('click', event);
            }, this);
            form.getElements('.tpl-product-filter-item input[type=checkbox]').each(function(input) {
                var event = this.variantCheckboxLinkClick.bind(this, input);
                input.store('event:variantCheckboxLinkClick', event).addEvent('click', event);
            }, this);
            form.getElements('.tpl-product-filter-item select').each(function(select) {
                var event = this.variantsSelectChange.bind(this, select);
                select.store('event:variantsSelectChange', event).addEvent('change', event);
            }, this);
        }
    },
    detach: function() {
        this.parent();
        if (this.draggableSliders.length > 0) {
            this.draggableSliders.each(function(draggable) {
                draggable.detach();
            });
        }
        var form = this.element.getElement('form');
        var bAjax = (form && form.get('data-ajax') == '1' ? true : false);
        if (form && bAjax == true) {
            form.removeEvent('submit', form.retrieve('event:filtersFormSubmit')).eliminate('event:filtersFormSubmit');
        }
        if (bAjax == true) {
            this.element.getElements('.tpl-active-product-filter-item a, .tpl-active-product-filter-actions a').each(function(link) {
                link.removeEvent('click', link.retrieve('event:clearFilterLinkClick')).eliminate('event:clearFilterLinkClick');
            });
        }
        if (form) {
            form.getElements('.tpl-product-filter-item input[type=text].tpl-from, .tpl-product-filter-item input[type=text].tpl-to').each(function(input) {
                input.removeEvent('focus', input.retrieve('event:rangeInputFocus')).eliminate('event:rangeInputFocus');
                input.removeEvent('blur', input.retrieve('event:rangeInputBlur')).eliminate('event:rangeInputBlur');
                input.removeEvent('keyup', input.retrieve('event:decimalInputKeyUp')).eliminate('event:decimalInputKeyUp');
            });
            form.getElements('.tpl-product-filter-collapsed-items-actions a').each(function(link) {
                link.removeEvent('click', link.retrieve('event:toggleCollapsedVariantsLinkClick')).eliminate('event:toggleCollapsedVariantsLinkClick');
            });
            form.getElements('.tpl-product-filter-item input[type=checkbox]').each(function(input) {
                input.removeEvent('click', input.retrieve('event:variantCheckboxLinkClick')).eliminate('event:variantCheckboxLinkClick');
            });
            form.getElements('.tpl-product-filter-item select').each(function(select) {
                select.removeEvent('change', select.retrieve('event:variantsSelectChange')).eliminate('event:variantsSelectChange');
            });
        }
    },
    updateSliderRange: function(fromEl, toEl, rangeEl, containerEl) {
        if (!fromEl || !toEl || !rangeEl || !containerEl) {
            return;
        }
        var styles = {
            left: fromEl.getStyle('left')
        };
        var fl = false;
        var tl = false;
        if (fromEl.getStyle('left').indexOf('%') > -1) {
            fl = parseFloat(fromEl.getStyle('left').replace('%', ''));
        } else if (fromEl.getStyle('left').indexOf('px') > -1) {
            fl = ((parseInt(fromEl.getStyle('left').replace('px', '')) / containerEl.getSize().x) * 100).round(4);
        }
        if (toEl.getStyle('left').indexOf('%') > -1) {
            tl = parseFloat(toEl.getStyle('left').replace('%', ''));
        } else if (toEl.getStyle('left').indexOf('px') > -1) {
            tl = ((parseInt(toEl.getStyle('left').replace('px', '')) / containerEl.getSize().x) * 100).round(4);
        }
        if (fl !== false && tl !== false) {
            styles.width = (tl - fl).round(4) + '%';
        } else {
            styles.width = 0;
        }
        rangeEl.setStyles(styles);
    },
    clearFilterLinkClick: function(el, ev) {
        ev.preventDefault();
        if (this.isBusy() == true) {
            return;
        }
        if (History.push(History.toRelativeUrl(el.get('href')), null, {
                a: 'widget',
                m: 'applyFilters',
                w: this.element.get('id')
            }) == false) {
            this.applyFilters({
                data: {
                    'data[Request][url]': History.toRelativeUrl(el.get('href'))
                }
            });
        }
    },
    rangeInputFocus: function(el, ev) {
        if (this.submitTimer) {
            clearTimeout(this.submitTimer);
            this.submitTimer = null;
        }
    },
    rangeInputBlur: function(el, ev) {
        var parent = el.getParent('.tpl-product-filter-item[data-range]');
        var data = (parent && parent.get('data-range') && parent.get('data-range').length > 0 ? JSON.decode(parent.get('data-range')) : {});
        var sliderContainer = (parent ? parent.getParent().getElement('.tpl-range-slider') : null);
        var sliderFromEl = (sliderContainer ? sliderContainer.getElement('.tpl-range-slider-handle.tpl-from') : null);
        var sliderToEl = (sliderContainer ? sliderContainer.getElement('.tpl-range-slider-handle.tpl-to') : null);
        var sliderRangeEl = (sliderContainer ? sliderContainer.getElement('.tpl-range-slider-current') : null);
        var value = el.get('value').trim();
        if (value.length > 0 && !/^([0-9]|[1-9][0-9]*)(\.([0-9]{1,}))?$/.test(value)) {
            value = value.replace(/[^0-9,.]/g, '');
        }
        if (value.length > 0 && value.indexOf('.') > -1) {
            value = value.replace(/\.+/g, '.');
            var p = value.lastIndexOf('.');
            if (p < value.length - 3) {
                value = value.substr(0, p + 3);
            }
        }
        var decimals = 0;
        if (value.length > 0) {
            if (value.indexOf('.') > -1) {
                var decimals = value.length - value.lastIndexOf('.') - 1;
                value = parseFloat(value);
            } else {
                value = parseInt(value);
            }
            if (isNaN(value)) {
                decimals = 0;
                value = '';
            }
        }
        var displayValue = value;
        if (decimals > 0) {
            displayValue = value.format({
                decimals: decimals
            });
        }
        if (typeof(data.from) != 'undefined' && el.hasClass('tpl-from') && (value.toString().length == 0 || value < data.from)) {
            value = data.from;
        } else if (typeof(data.to) != 'undefined' && el.hasClass('tpl-to') && (value.toString().length == 0 || value > data.to)) {
            value = data.to;
        } else {
            value = displayValue;
        }
        el.set('value', value);
        if (sliderContainer && sliderFromEl && sliderToEl && sliderRangeEl && typeof(data.from) != 'undefined' && typeof(data.to) != 'undefined') {
            if (el.hasClass('tpl-from')) {
                var toInput = el.getParent('.tpl-product-filter-items').getElement('.tpl-direct-input input[type=text].tpl-to');
                var fl = 0;
                var tl = 100;
                if (data.to - data.from > 0) {
                    fl = (((parseFloat(value) - data.from) * 100) / (data.to - data.from)).round(4);
                    tl = false;
                    if (sliderToEl.getStyle('left').indexOf('%') > -1) {
                        tl = parseFloat(sliderToEl.getStyle('left').replace('%', ''));
                    } else if (sliderToEl.getStyle('left').indexOf('px') > -1) {
                        tl = ((parseInt(sliderToEl.getStyle('left').replace('px', '')) / sliderContainer.getSize().x) * 100).round(4);
                    }
                    if (tl !== false && fl > tl && toInput) {
                        fl = tl;
                        el.set('value', toInput.get('value'));
                    }
                } else if (toInput) {
                    el.set('value', toInput.get('value'));
                }
                sliderFromEl.setStyle('left', fl + '%');
                sliderToEl.draggableItem.options.limit.x[0] = fl;
            } else if (el.hasClass('tpl-to')) {
                var fromInput = el.getParent('.tpl-product-filter-items').getElement('.tpl-direct-input input[type=text].tpl-from');
                var fl = 0
                var tl = 100;
                if (data.to - data.from > 0) {
                    fl = false;
                    tl = (((parseFloat(value) - data.from) * 100) / (data.to - data.from)).round(4);
                    if (sliderFromEl.getStyle('left').indexOf('%') > -1) {
                        fl = parseFloat(sliderFromEl.getStyle('left').replace('%', ''));
                    } else if (sliderFromEl.getStyle('left').indexOf('px') > -1) {
                        fl = ((parseInt(sliderFromEl.getStyle('left').replace('px', '')) / sliderContainer.getSize().x) * 100).round(4);
                    }
                    if (tl < fl && fromInput) {
                        tl = fl;
                        el.set('value', fromInput.get('value'));
                    }
                } else if (fromInput) {
                    el.set('value', fromInput.get('value'));
                }
                sliderToEl.setStyle('left', tl + '%');
                sliderFromEl.draggableItem.options.limit.x[1] = tl;
            }
            this.updateSliderRange(sliderFromEl, sliderToEl, sliderRangeEl, sliderContainer);
        }
        var bSubmit = false;
        el.getParent('form').getElements('.tpl-product-filter-item input[type=text].tpl-from, .tpl-product-filter-item input[type=text].tpl-to').each(function(input) {
            if (bSubmit) {
                return;
            }
            var defaultValue = parseFloat(input.retrieve('input:defaultValue'));
            var currentValue = parseFloat(input.get('value'));
            if (currentValue != defaultValue) {
                bSubmit = true;
            }
        });
        if (bSubmit == true) {
            this.submitTimer = (function() {
                var form = el.getParent('form');
                if (form) {
                    var bAjax = (form.get('data-ajax') == '1' ? true : false);
                    if (bAjax) {
                        form.fireEvent('submit');
                    } else {
                        form.submit();
                    }
                }
                this.submitTimer = null;
            }).delay(1000, this);
        }
    },
    decimalInputKeyUp: function(input, ev) {
        if (ev.shift == true || ev.control == true) {
            return;
        }
        value = input.get('value') + '';
        var sel = input.getSelectedRange();
        input.set('value', value.replace(/,/g, '.')).selectRange(sel.start, sel.end);
    },
    toggleCollapsedVariantsLinkClick: function(el, ev) {
        ev.preventDefault();
        var section = el.getParent('.tpl-product-filter-items').getElement('.tpl-product-filter-collapsed-items');
        if (section) {
            if (section.isDisplayed() == false) {
                section.setStyle('display', null);
                if (!el.hasClass('tpl-expanded')) {
                    el.addClass('tpl-expanded');
                }
                el.set('text', __('widget', 'Hide'));
            } else {
                section.hide();
                if (el.hasClass('tpl-expanded')) {
                    el.removeClass('tpl-expanded');
                }
                el.set('text', __('widget', 'Show all'));
            }
            this.elementResized();
        }
    },
    variantCheckboxLinkClick: function(el, ev) {
        var form = el.getParent('form');
        var bAjax = (form && form.get('data-ajax') == '1' ? true : false);
        if (bAjax) {
            form.fireEvent('submit');
        } else {
            form.submit();
        }
    },
    variantsSelectChange: function(el, ev) {
        var form = el.getParent('form');
        var bAjax = (form && form.get('data-ajax') == '1' ? true : false);
        if (bAjax) {
            form.fireEvent('submit');
        } else {
            form.submit();
        }
    },
    filtersFormSubmit: function(form, ev) {
        if (ev) {
            ev.preventDefault();
        }
        if (this.isBusy() == true) {
            return;
        }
        if (History.push(History.toRelativeUrl(form.get('action') + '?' + form.toQueryString()), null, {
                a: 'widget',
                m: 'applyFilters',
                w: this.element.get('id')
            }) == false) {
            this.applyFilters({
                data: {
                    'data[Request][url]': History.toRelativeUrl(form.get('action') + '?' + form.toQueryString())
                }
            });
        }
    },
    applyFilters: function(options) {
        var widgets = [];
        Object.each(this.page.widgets, function(widget) {
            if (['product_filters', 'products_list', 'search_results'].contains(Object.getFromPath(widget, 'options.short_name'))) {
                widgets.push({
                    'widget_id': widget.id,
                    'element_id': widget.element.get('id'),
                    'render': 1,
                    'process': 0
                });
            }
        });
        var options = Object.merge({
            onRequestStart: function() {
                this.setBusy(true);
            }.bind(this),
            onRequestEnd: function() {
                this.setBusy(false);
            }.bind(this)
        }, options);
        this.page.refreshWidgets(widgets, options);
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        this.hideEditBox();
        switch (true) {
            case (el.hasClass('tpl-add')):
                {
                    var settings = {
                        name: 'BackstagePaneUI.Webshop.AddProductFilter',
                        options: {
                            requestData: {
                                data: {
                                    Request: {
                                        language_id: Object.getFromPath(this.page, 'options.page.language_id')
                                    }
                                }
                            }
                        }
                    };this.website.backstage.loadPane(settings);
                    break;
                }
            default:
                {
                    var settings = {
                        name: 'BackstagePaneUI.Webshop.Products',
                        options: {
                            requestData: {
                                data: {
                                    Request: {
                                        language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                                        disable_filter: 1
                                    }
                                }
                            }
                        }
                    };this.website.backstage.loadPane(settings);
                    break;
                }
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editableDropdownItemClick: function(item) {
        var action = item.getElement('span').get('class');
        this.parent(item);
        switch (action) {
            case 'ui-add':
                {
                    this.addFilter();
                    break;
                }
            case 'ui-view-filters':
                {
                    this.viewFilters();
                    break;
                }
        }
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                }).addSeparator().addItem({
                    html: '<span class="ui-add">' + __('admin_widget', 'Add filter', true) + '</span>'
                }).addSeparator().addItem({
                    html: '<span class="ui-view-filters">' + __('admin_widget', 'View filters', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new ProductFiltersWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    },
    addFilter: function() {
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        var settings = {
            name: 'BackstagePaneUI.Webshop.AddProductFilter',
            options: {
                requestData: {
                    data: {
                        Request: {
                            language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                            page_id: Object.getFromPath(this.page, 'options.page.id')
                        }
                    }
                }
            }
        };
        this.website.backstage.loadPane(settings);
    },
    viewFilters: function() {
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        var settings = {
            name: 'BackstagePaneUI.Webshop.ProductFilters',
            options: {
                requestData: {
                    data: {
                        Request: {
                            language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                            page_id: Object.getFromPath(this.page, 'options.page.id')
                        }
                    }
                }
            }
        };
        this.website.backstage.loadPane(settings);
    }
});
var WGT_PRODUCTS_LIST_TABLE_VIEW = 1;
var WGT_PRODUCTS_LIST_GRID_VIEW = 2;
var ProductsListWidget = new Class({
    Extends: LayoutWidget,
    Implements: WebshopWidget,
    options: {
        name: 'Products list',
        short_name: 'products_list',
        dropdown: true
    },
    initVariables: function() {
        this.parent();
        this.entryUID = 0;
        this.viewType = false;
        this.entries = [];
        this.tooltips = [];
        var view = this.element.getElement('.tpl-view-content');
        if (view) {
            switch (true) {
                case (view.hasClass('tpl-table-view')):
                    {
                        this.viewType = WGT_PRODUCTS_LIST_TABLE_VIEW;
                        break;
                    }
                case (view.hasClass('tpl-grid-view')):
                    {
                        this.viewType = WGT_PRODUCTS_LIST_GRID_VIEW;
                        break;
                    }
            }
        }
        switch (this.viewType) {
            case WGT_PRODUCTS_LIST_TABLE_VIEW:
                {
                    this.entries = this.element.getElements('.tpl-products-list-entry');this.entries.each(function(entry) {
                        var pIdInput = entry.getElement('.tpl-product-form input[name="data[WebshopProduct][id]"]');
                        var pId = (pIdInput && pIdInput.get('value') && parseInt(pIdInput.get('value')) > 0 ? parseInt(pIdInput.get('value')) : null);
                        if (!pId) {
                            return;
                        }
                        var eId = pId + '_' + (++this.entryUID);
                        while (true) {
                            if ($(document.body).getElement('[data-eid=' + eId + ']')) {
                                eId = pId + '_' + (++this.entryUID);
                            } else {
                                break;
                            }
                        }
                        entry.set('data-pid', pId);
                        entry.set('data-eid', eId);
                    }, this);
                    break;
                }
            case WGT_PRODUCTS_LIST_GRID_VIEW:
                {
                    this.entries = this.element.getElements('.tpl-products-list-entry');this.entries.each(function(entry) {
                        var pIdInput = entry.getElement('.tpl-product-form input[name="data[WebshopProduct][id]"]');
                        var pId = (pIdInput && pIdInput.get('value') && parseInt(pIdInput.get('value')) > 0 ? parseInt(pIdInput.get('value')) : null);
                        if (!pId) {
                            return;
                        }
                        var eId = pId + '_' + (++this.entryUID);
                        while (true) {
                            if ($(document.body).getElement('[data-eid=' + eId + ']')) {
                                eId = pId + '_' + (++this.entryUID);
                            } else {
                                break;
                            }
                        }
                        entry.set('data-pid', pId);
                        entry.set('data-eid', eId);
                    }, this);
                    break;
                }
        }
    },
    attach: function() {
        this.parent();
        this.element.getElements('.tpl-entries-sort-select, .tpl-entries-limit-select').each(function(select) {
            var form = select.getParent('form');
            var event = this.viewPropertyChange.bind(this, form, select);
            select.store('event:viewPropertyChange', event).addEvent('change', event);
        }, this);
        switch (this.viewType) {
            case WGT_PRODUCTS_LIST_TABLE_VIEW:
                {
                    this.attachTableView();
                    break;
                }
            case WGT_PRODUCTS_LIST_GRID_VIEW:
                {
                    this.attachGridView();
                    break;
                }
        }
        this.element.getElements('.tpl-pager-links a:not(.tpl-disabled):not(.tpl-current)').each(function(link) {
            var event = this.pagerLinkClick.bind(this, link);
            link.store('event:pagerLinkClick', event).addEvent('click', event);
        }, this);
    },
    detach: function() {
        this.parent();
        this.element.getElements('.tpl-entries-sort-select, .tpl-entries-limit-select').each(function(select) {
            select.removeEvent('change', select.retrieve('event:viewPropertyChange')).eliminate('event:viewPropertyChange');
        });
        switch (this.viewType) {
            case WGT_PRODUCTS_LIST_TABLE_VIEW:
                {
                    this.detachTableView();
                    break;
                }
            case WGT_PRODUCTS_LIST_GRID_VIEW:
                {
                    this.detachGridView();
                    break;
                }
        }
        this.element.getElements('.tpl-pager-links a:not(.tpl-disabled):not(.tpl-current)').each(function(link) {
            link.removeEvent('click', link.retrieve('event:pagerLinkClick')).eliminate('event:pagerLinkClick');
        });
    },
    attachTableView: function() {
        this.entries.each(function(entry) {
            var cartForm = entry.getElement('.tpl-product-cart-form');
            if (cartForm) {
                var event = this.productCartFormSubmit.bind(this, cartForm);
                cartForm.store('event:productCartFormSubmit', event).addEvent('submit', event);
                cartForm.getElements('.tpl-product-cart-qty[type=text]').each(function(input) {
                    if (!input.get('data-empty')) {
                        var event = this.quantityInputFocus.bind(this, input);
                        input.store('event:quantityInputFocus', event).addEvent('focus', event);
                        var event = this.quantityInputBlur.bind(this, input);
                        input.store('event:quantityInputBlur', event).addEvent('blur', event);
                    }
                    var event = this.quantityInputKeydown.bind(this, input);
                    input.store('event:quantityInputKeydown', event).addEvent('keydown', event);
                    var event = this.quantityInputKeyup.bind(this, input);
                    input.store('event:quantityInputKeyup', event).addEvent('keyup', event);
                }, this);
            }
            entry.getElements('.tpl-contact-form-link').each(function(link) {
                var event = this.contactFormLinkClick.bind(this, link, entry);
                link.store('event:contactFormLinkClick', event).addEvent('click', event);
            }, this);
        }, this);
        this.element.getElements('.tpl-feature-notes[title]').each(function(n) {
            this.tooltips.push(new FadingTooltip(n, {
                text: n.get('title'),
                showDelay: 10,
                offset: {
                    x: -30,
                    y: -8
                },
                hook: {
                    target: 'topRight',
                    tip: 'bottomLeft'
                },
                width: 350,
                container: $('PageContent'),
                relative: true,
                relativeParentElement: $('PageContent'),
                classes: {
                    tooltip: 'tpl-tooltip clearfix',
                    arrow: 'tpl-tooltip-arrow tpl-bottom-left'
                }
            }));
        }, this);
    },
    detachTableView: function() {
        this.entries.each(function(entry) {
            var cartForm = entry.getElement('.tpl-product-cart-form');
            if (cartForm) {
                cartForm.removeEvent('submit', cartForm.retrieve('event:productCartFormSubmit')).eliminate('event:productCartFormSubmit');
                cartForm.getElements('.tpl-product-cart-qty[type=text]').each(function(input) {
                    if (!input.get('data-empty')) {
                        input.removeEvent('focus', input.retrieve('event:quantityInputFocus')).eliminate('event:quantityInputFocus');
                        input.removeEvent('blur', input.retrieve('event:quantityInputBlur')).eliminate('event:quantityInputBlur');
                    }
                    input.removeEvent('keydown', input.retrieve('event:quantityInputKeydown')).eliminate('event:quantityInputKeydown');
                    input.removeEvent('keyup', input.retrieve('event:quantityInputKeyup')).eliminate('event:quantityInputKeyup');
                });
            }
            entry.getElements('.tpl-contact-form-link').each(function(link) {
                link.removeEvent('click', link.retrieve('event:contactFormLinkClick')).eliminate('event:contactFormLinkClick');
            });
        });
        if (this.tooltips.length > 0) {
            this.tooltips.each(function(t) {
                t.destroy();
            });
            this.tooltips = [];
        }
    },
    attachGridView: function() {
        this.entries.each(function(entry) {
            var cartForm = entry.getElement('.tpl-product-cart-form');
            if (cartForm) {
                var event = this.productCartFormSubmit.bind(this, cartForm);
                cartForm.store('event:productCartFormSubmit', event).addEvent('submit', event);
                cartForm.getElements('.tpl-product-cart-qty[type=text]').each(function(input) {
                    if (!input.get('data-empty')) {
                        var event = this.quantityInputFocus.bind(this, input);
                        input.store('event:quantityInputFocus', event).addEvent('focus', event);
                        var event = this.quantityInputBlur.bind(this, input);
                        input.store('event:quantityInputBlur', event).addEvent('blur', event);
                    }
                    var event = this.quantityInputKeydown.bind(this, input);
                    input.store('event:quantityInputKeydown', event).addEvent('keydown', event);
                    var event = this.quantityInputKeyup.bind(this, input);
                    input.store('event:quantityInputKeyup', event).addEvent('keyup', event);
                }, this);
            }
            entry.getElements('.tpl-contact-form-link').each(function(link) {
                var event = this.contactFormLinkClick.bind(this, link, entry);
                link.store('event:contactFormLinkClick', event).addEvent('click', event);
            }, this);
        }, this);
    },
    detachGridView: function() {
        this.entries.each(function(entry) {
            var cartForm = entry.getElement('.tpl-product-cart-form');
            if (cartForm) {
                cartForm.removeEvent('submit', cartForm.retrieve('event:productCartFormSubmit')).eliminate('event:productCartFormSubmit');
                cartForm.getElements('.tpl-product-cart-qty[type=text]').each(function(input) {
                    if (!input.get('data-empty')) {
                        input.removeEvent('focus', input.retrieve('event:quantityInputFocus')).eliminate('event:quantityInputFocus');
                        input.removeEvent('blur', input.retrieve('event:quantityInputBlur')).eliminate('event:quantityInputBlur');
                    }
                    input.removeEvent('keydown', input.retrieve('event:quantityInputKeydown')).eliminate('event:quantityInputKeydown');
                    input.removeEvent('keyup', input.retrieve('event:quantityInputKeyup')).eliminate('event:quantityInputKeyup');
                });
            }
            entry.getElements('.tpl-contact-form-link').each(function(link) {
                link.removeEvent('click', link.retrieve('event:contactFormLinkClick')).eliminate('event:contactFormLinkClick');
            });
        });
    },
    viewPropertyChange: function(form, modifier, ev) {
        if (!form || this.isBusy()) {
            return;
        }
        switch (true) {
            case (modifier.tagName.toLowerCase() == 'select' && modifier.get('name') == 'lm'):
                {
                    var pageInput = form.getElement('input[name=p]');
                    if (pageInput) {
                        pageInput.destroy();
                    }
                    break;
                }
        }
        if (History.push(History.toRelativeUrl(form.get('action') + '?' + form.toQueryString()), null, {
                a: 'widget',
                m: 'applyFilters',
                w: this.element.get('id')
            }) == false) {
            this.applyFilters({
                data: {
                    'data[Request][url]': History.toRelativeUrl(form.get('action') + '?' + form.toQueryString())
                }
            });
        }
    },
    pagerLinkClick: function(link, ev) {
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        if (History.push(History.toRelativeUrl(link.get('href')), null, {
                a: 'widget',
                m: 'applyFilters',
                w: this.element.get('id')
            }) == false) {
            this.applyFilters({
                data: {
                    'data[Request][url]': History.toRelativeUrl(link.get('href'))
                }
            });
        }
    },
    applyFilters: function(options) {
        var widgets = [];
        Object.each(this.page.widgets, function(widget) {
            if (['product_filters', 'products_list'].contains(Object.getFromPath(widget, 'options.short_name'))) {
                widgets.push({
                    'widget_id': widget.id,
                    'element_id': widget.element.get('id'),
                    'render': 1,
                    'process': 0
                });
            }
        }, this);
        var options = Object.merge({
            onRequestStart: function() {
                this.setBusy(true);
            }.bind(this),
            onRequestEnd: function() {
                this.setBusy(false);
            }.bind(this),
            onInit: function() {
                var top = 0;
                widgets.each(function(w) {
                    var widget = $(w.element_id);
                    if (widget) {
                        if (this.admin || this.preview) {
                            coords = widget.getRelativeCoordinates($('PageWrapper'));
                            if (top == 0) {
                                top = coords.top;
                            } else {
                                top = Math.min(top, coords.top);
                            }
                        } else {
                            coords = widget.getCoordinates();
                            if (top == 0) {
                                top = coords.top;
                            } else {
                                top = Math.min(top, coords.top);
                            }
                        }
                    }
                }, this);
                if (top - 10 > 0) {
                    top -= 10;
                }
                if (this.scrollableElement.getScroll().y > top) {
                    this.scrollFx.start(0, top);
                }
            }.bind(this)
        }, options);
        this.page.refreshWidgets(widgets, options);
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        this.hideEditBox();
        var pageId = Object.getFromPath(this.page, 'options.page.id');
        if (this.element.get('data-page-id') && parseInt(this.element.get('data-page-id')) > 0) {
            pageId = this.element.get('data-page-id');
        }
        switch (true) {
            case (el.hasClass('tpl-add')):
                {
                    var settings = {
                        name: 'BackstagePaneUI.Webshop.AddProduct',
                        options: {
                            requestData: {
                                data: {
                                    Request: {
                                        language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                                        page_id: pageId
                                    }
                                }
                            }
                        }
                    };this.website.backstage.loadPane(settings);
                    break;
                }
            default:
                {
                    var settings = {
                        name: 'BackstagePaneUI.Webshop.Products',
                        options: {
                            requestData: {
                                data: {
                                    Request: {
                                        language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                                        disable_filter: 1
                                    }
                                }
                            }
                        }
                    };this.website.backstage.loadPane(settings);
                    break;
                }
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editableDropdownItemClick: function(item) {
        var action = item.getElement('span').get('class');
        this.parent(item);
        switch (action) {
            case 'ui-add':
                {
                    this.addProduct();
                    break;
                }
            case 'ui-view-products':
                {
                    this.viewProducts();
                    break;
                }
        }
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                }).addSeparator().addItem({
                    html: '<span class="ui-add">' + __('admin_widget', 'Add product', true) + '</span>'
                }).addSeparator().addItem({
                    html: '<span class="ui-view-products">' + __('admin_widget', 'View products', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new ProductsListWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    },
    addProduct: function() {
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        var pageId = Object.getFromPath(this.page, 'options.page.id');
        if (this.element.get('data-page-id') && parseInt(this.element.get('data-page-id')) > 0) {
            pageId = this.element.get('data-page-id');
        }
        var settings = {
            name: 'BackstagePaneUI.Webshop.AddProduct',
            options: {
                requestData: {
                    data: {
                        Request: {
                            language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                            page_id: pageId
                        }
                    }
                }
            }
        };
        this.website.backstage.loadPane(settings);
    },
    viewProducts: function() {
        if (this.options.editable == false || this.website.backstage.opened != false) {
            return;
        }
        var pageId = Object.getFromPath(this.page, 'options.page.id');
        if (this.element.get('data-page-id') && parseInt(this.element.get('data-page-id')) > 0) {
            pageId = this.element.get('data-page-id');
        }
        var settings = {
            name: 'BackstagePaneUI.Webshop.Products',
            options: {
                requestData: {
                    data: {
                        Request: {
                            language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                            page_id: pageId
                        }
                    }
                }
            }
        };
        this.website.backstage.loadPane(settings);
    }
});
var Przelewy24PaymentFormWidget = new Class({
    Extends: Widget,
    options: {
        name: 'Przelewy24 payment form',
        short_name: 'przelewy24_payment_form'
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.form = this.element.getElement('form');
        if (this.form) {
            this.form.getElements('.tpl-payment-indicator.tpl-js-off').hide();
            this.form.getElements('.tpl-payment-indicator.tpl-js-on').setStyle('visibility', null);
            (function() {
                this.form.submit();
            }).delay(200, this);
        }
    }
});
var RegistrationFormWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Registration form',
        short_name: 'registration_form',
        dropdown: true
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.create.delay(1, this);
    },
    create: function() {
        if (this.captchaType) {
            switch (this.captchaType) {
                case 'rc':
                case 'irc':
                    {
                        var fn = (function() {
                            var existing = $$('script[src]');
                            var rcScript = null;
                            var rcAsset = 'https://www.google.com/recaptcha/api.js?render=explicit&onload=renderReCaptchaElements&hl=' + Object.getFromPath(this.page, 'options.page.language_code');
                            existing.each(function(a) {
                                if (!rcScript && rcAsset == a.get('src')) {
                                    rcScript = a;
                                }
                            });
                            var onScriptLoad = function() {
                                this.form.getElements('.g-recaptcha').each(function(el) {
                                    if (typeof(grecaptcha) != 'undefined' && typeof(grecaptcha.render) != 'undefined') {
                                        var elData = {
                                            'sitekey': el.get('data-sitekey'),
                                            'callback': el.get('data-callback'),
                                            'size': el.get('data-size')
                                        };
                                        var wId = grecaptcha.render(el, elData);
                                        el.set('data-wid', wId);
                                    } else {
                                        this.page.queueReCaptchaElement(el);
                                    }
                                }, this);
                                this.elementResized();
                            }.bind(this);
                            if (!rcScript) {
                                rcScript = new Element('script', {
                                    'src': rcAsset,
                                    'type': 'text/javascript',
                                    'async': '',
                                    'defer': ''
                                });
                                if (typeof rcScript.onreadystatechange != 'undefined') {
                                    rcScript.addEvent('readystatechange', function() {
                                        if (['loaded', 'complete'].contains(this.readyState)) {
                                            rcScript.set('data-loaded', 'true');
                                            onScriptLoad.apply();
                                        }
                                    });
                                } else {
                                    rcScript.addEvent('load', function() {
                                        rcScript.set('data-loaded', 'true');
                                        onScriptLoad.apply();
                                    });
                                }
                                rcScript.inject(document.body);
                            } else {
                                if (rcScript.get('data-loaded') == 'true') {
                                    onScriptLoad.apply();
                                } else {
                                    if (typeof rcScript.onreadystatechange != 'undefined') {
                                        rcScript.addEvent('readystatechange', function() {
                                            if (['loaded', 'complete'].contains(this.readyState)) {
                                                onScriptLoad.apply();
                                            }
                                        });
                                    } else {
                                        rcScript.addEvent('load', function() {
                                            onScriptLoad.apply();
                                        });
                                    }
                                }
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                        break;
                    }
                case 'rc_v3':
                    {
                        var fn = (function() {
                            if (!this.captchaData || typeof(this.captchaData.sitekey) == 'undefined' || typeof(this.captchaData.action) == 'undefined') {
                                return;
                            }
                            var existing = $$('script[src]');
                            var rcScript = null;
                            var rcAsset = 'https://www.google.com/recaptcha/api.js?render=' + this.captchaData.sitekey;
                            existing.each(function(a) {
                                if (!rcScript && rcAsset == a.get('src')) {
                                    rcScript = a;
                                }
                            });
                            if (!rcScript) {
                                rcScript = new Element('script', {
                                    'src': rcAsset,
                                    'type': 'text/javascript',
                                    'async': '',
                                    'defer': ''
                                });
                                if (typeof rcScript.onreadystatechange != 'undefined') {
                                    rcScript.addEvent('readystatechange', function() {
                                        if (['loaded', 'complete'].contains(this.readyState)) {
                                            rcScript.set('data-loaded', 'true');
                                        }
                                    });
                                } else {
                                    rcScript.addEvent('load', function() {
                                        rcScript.set('data-loaded', 'true');
                                    });
                                }
                                rcScript.inject(document.body);
                            }
                        }).bind(this);
                        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                            fn.apply();
                        } else {
                            window.addEvent('load', fn);
                        }
                        break;
                    }
            }
        }
    },
    initVariables: function() {
        this.parent();
        this.form = this.element.getElement('form');
        this.validator = null;
        this.captchaType = (this.form && this.form.get('data-ct') ? this.form.get('data-ct') : false);
        this.captchaData = (this.form && this.form.get('data-cd') ? JSON.decode(this.form.get('data-cd')) : false);
    },
    attach: function() {
        this.parent();
        switch (this.captchaType) {
            case 'irc':
                {
                    window['onRegistrationForm' + this.id + 'Submit'] = this.manualFormSubmit.bind(this);window['onRegistrationForm' + this.id + 'Error'] = this.registrationFormError.bind(this);
                    break;
                }
        }
        if (this.validator) {
            this.validator.attach();
        } else if (this.form && typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            customElAlerts['NewUserFirstName_' + this.id] = __('form_check', 'Please enter a valid first name.');
            customElAlerts['NewUserLastName_' + this.id] = __('form_check', 'Please enter a valid last name.');
            customElAlerts['NewUserEmail_' + this.id] = __('form_check', 'Please enter a valid e-mail.');
            customElAlerts['NewUserNewPasswd_' + this.id] = __('form_check', 'Please enter a password containing at least 5 characters.');
            customElAlerts['NewUserConfirmNewPasswd_' + this.id] = __('form_check', 'The password does not match the confirmation password.');
            customElAlerts['NewUserCaptchaCode_' + this.id] = __('form_check', 'Please enter the text from the picture.');
            var self = this;
            var msgBox = this.element.getElement('.tpl-message');
            var options = Object.merge(this.getValidatorOptions(), {
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                }
            });
            switch (this.captchaType) {
                case 'irc':
                    {
                        options = Object.merge(options, {
                            customSubmit: true,
                            onCustomSubmit: function(ev) {
                                self.website.loadingBox(true);
                                var captchaEl = this.form.getElement('.g-recaptcha[data-wid]');
                                if (captchaEl && typeof(grecaptcha) != 'undefined') {
                                    grecaptcha.execute(captchaEl.get('data-wid'));
                                } else {
                                    self.manualFormSubmit();
                                }
                            }
                        });
                        break;
                    }
                case 'rc_v3':
                    {
                        options = Object.merge(options, {
                            customSubmit: true,
                            onCustomSubmit: function(ev) {
                                self.website.loadingBox(true);
                                grecaptcha.ready(function() {
                                    if (typeof(grecaptcha) != 'undefined' && self.captchaData && typeof(self.captchaData.sitekey) != 'undefined' && typeof(self.captchaData.action) != 'undefined') {
                                        grecaptcha.execute(self.captchaData.sitekey, {
                                            action: self.captchaData.action
                                        }).then(function(token) {
                                            new Element('input', {
                                                'type': 'hidden',
                                                'name': 'g-recaptcha-response',
                                                'value': token
                                            }).inject(self.form);
                                            self.manualFormSubmit();
                                        }).catch(function() {
                                            self.registrationFormError();
                                        });
                                    } else {
                                        self.manualFormSubmit();
                                    }
                                });
                            }
                        });
                        break;
                    }
            }
            this.validator = new FormCheck(this.form, options);
            Object.each(this.validator.options.alerts, function(msg, idx) {
                this.validator.options.alerts[idx] = __('form_check', msg);
            }, this);
        }
        if (this.form) {
            var refreshLink = this.form.getElement('.tpl-refresh-captcha');
            if (refreshLink) {
                var event = this.refreshCaptchaClick.bind(this, refreshLink);
                refreshLink.store('event:refreshCaptchaClick', event).addEvent('click', event);
            }
        }
    },
    detach: function() {
        this.parent();
        switch (this.captchaType) {
            case 'irc':
                {
                    window['onRegistrationForm' + this.id + 'Submit'] = undefined;window['onRegistrationForm' + this.id + 'Error'] = undefined;
                    break;
                }
        }
        if (this.validator) {
            this.validator.detach();
        }
        if (this.form) {
            var refreshLink = this.form.getElement('.tpl-refresh-captcha');
            if (refreshLink) {
                refreshLink.removeEvent('click', refreshLink.retrieve('event:refreshCaptchaClick')).eliminate('event:refreshCaptchaClick');
            }
        }
    },
    manualFormSubmit: function() {
        this.form.submit();
    },
    registrationFormError: function() {
        this.website.loadingBox(false);
    },
    refreshCaptchaClick: function(el, ev) {
        ev.preventDefault();
        var img = el.getParent('.tpl-form-row').getElement('.tpl-captcha-code');
        var src = (img ? img.get('src') : false);
        if (src && src.length > 0) {
            img.set('src', new URI(src).setData('rnd', Date.now()).toString());
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new RegistrationFormWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var SearchBoxWidget = new Class({
    Extends: Widget,
    Implements: SearchWidget,
    options: {
        name: 'Search box',
        short_name: 'search_box'
    },
    initVariables: function() {
        this.parent();
        this.form = this.element.getElement('form');
        this.searchInput = (this.form ? this.form.getElement('.tpl-search-input') : null);
        this.searchSubmit = (this.form ? this.form.getElement('.tpl-search-submit') : null);
        this.defaultText = '';
        if (this.searchInput && this.searchInput.get('title')) {
            this.defaultText = this.searchInput.get('title');
            this.searchInput.erase('title');
        }
    },
    attach: function() {
        this.parent();
        if (this.form) {
            var event = this.formSubmit.bind(this);
            this.form.store('event:formSubmit', event).addEvent('submit', event);
        }
        if (this.searchInput) {
            ['focus', 'blur'].each(function(value) {
                var event = this['searchInput' + value.capitalize()].bind(this);
                this.searchInput.store('event:searchInput' + value.capitalize(), event).addEvent(value, event);
            }, this);
        }
    },
    detach: function() {
        this.parent();
        if (this.form) {
            this.form.removeEvent('submit', this.form.retrieve('event:formSubmit')).eliminate('event:formSubmit');
        }
        if (this.searchInput) {
            ['focus', 'blur'].each(function(value) {
                this.searchInput.removeEvent(value, this.searchInput.retrieve('event:searchInput' + value.capitalize())).eliminate('event:searchInput' + value.capitalize());
            }, this);
        }
    },
    formSubmit: function(ev) {
        if (this.defaultText.length > 0 && this.searchInput && this.searchInput.get('value') == this.defaultText) {
            this.searchInput.set('value', '');
        }
    },
    searchInputFocus: function(ev) {
        if (this.searchInput.get('value').toLowerCase() == this.defaultText.toLowerCase()) {
            this.searchInput.set('value', '');
        }
    },
    searchInputBlur: function(ev) {
        if (this.searchInput.get('value').length == 0 || this.searchInput.get('value').toLowerCase() == this.defaultText.toLowerCase()) {
            this.searchInput.set('value', this.defaultText);
        }
    }
});
var SearchFormWidget = new Class({
    Extends: LayoutWidget,
    Implements: SearchWidget,
    options: {
        name: 'Search form',
        short_name: 'search_form',
        dropdown: true
    },
    initVariables: function() {
        this.parent();
        this.form = this.element.getElement('form');
        this.searchInput = (this.form ? this.form.getElement('.tpl-search-input') : null);
        this.searchSubmit = (this.form ? this.form.getElement('.tpl-search-submit') : null);
        this.defaultText = '';
        if (this.searchInput && this.searchInput.get('title')) {
            this.defaultText = this.searchInput.get('title');
            this.searchInput.erase('title');
        }
    },
    attach: function() {
        this.parent();
        if (this.form) {
            var event = this.formSubmit.bind(this);
            this.form.store('event:formSubmit', event).addEvent('submit', event);
        }
        if (this.searchInput) {
            ['focus', 'blur'].each(function(value) {
                var event = this['searchInput' + value.capitalize()].bind(this);
                this.searchInput.store('event:searchInput' + value.capitalize(), event).addEvent(value, event);
            }, this);
        }
    },
    detach: function() {
        this.parent();
        if (this.form) {
            this.form.removeEvent('submit', this.form.retrieve('event:formSubmit')).eliminate('event:formSubmit');
        }
        if (this.searchInput) {
            ['focus', 'blur'].each(function(value) {
                this.searchInput.removeEvent(value, this.searchInput.retrieve('event:searchInput' + value.capitalize())).eliminate('event:searchInput' + value.capitalize());
            }, this);
        }
    },
    formSubmit: function(ev) {
        if (this.defaultText.length > 0 && this.searchInput && this.searchInput.get('value') == this.defaultText) {
            this.searchInput.set('value', '');
        }
    },
    searchInputFocus: function(ev) {
        if (this.searchInput.get('value').toLowerCase() == this.defaultText.toLowerCase()) {
            this.searchInput.set('value', '');
        }
    },
    searchInputBlur: function(ev) {
        if (this.searchInput.get('value').length == 0 || this.searchInput.get('value').toLowerCase() == this.defaultText.toLowerCase()) {
            this.searchInput.set('value', this.defaultText);
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new SearchFormWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var SearchResultsWidget = new Class({
    Extends: LayoutWidget,
    Implements: [WebshopWidget, SearchWidget],
    options: {
        name: 'Search results',
        short_name: 'search_results',
        dropdown: true
    },
    initVariables: function() {
        this.parent();
        this.form = this.element.getElement('form');
        this.searchInput = (this.form ? this.form.getElement('.tpl-search-input') : null);
        this.searchSubmit = (this.form ? this.form.getElement('.tpl-search-submit') : null);
        this.defaultText = '';
        if (this.searchInput && this.searchInput.get('title')) {
            this.defaultText = this.searchInput.get('title');
            this.searchInput.erase('title');
        }
        this.entryUID = 0;
        this.viewType = false;
        this.entries = [];
        this.tooltips = [];
        var view = this.element.getElement('.tpl-section.tpl-products-section .tpl-section-content');
        if (view) {
            switch (true) {
                case (view.hasClass('tpl-table-view')):
                    {
                        this.viewType = WGT_PRODUCTS_LIST_TABLE_VIEW;
                        break;
                    }
                case (view.hasClass('tpl-grid-view')):
                    {
                        this.viewType = WGT_PRODUCTS_LIST_GRID_VIEW;
                        break;
                    }
            }
        }
        switch (this.viewType) {
            case WGT_PRODUCTS_LIST_TABLE_VIEW:
                {
                    this.entries = this.element.getElements('.tpl-section.tpl-products-section .tpl-products-list-entry');this.entries.each(function(entry) {
                        var pIdInput = entry.getElement('.tpl-product-form input[name="data[WebshopProduct][id]"]');
                        var pId = (pIdInput && pIdInput.get('value') && parseInt(pIdInput.get('value')) > 0 ? parseInt(pIdInput.get('value')) : null);
                        if (!pId) {
                            return;
                        }
                        var eId = pId + '_' + (++this.entryUID);
                        while (true) {
                            if ($(document.body).getElement('[data-eid=' + eId + ']')) {
                                eId = pId + '_' + (++this.entryUID);
                            } else {
                                break;
                            }
                        }
                        entry.set('data-pid', pId);
                        entry.set('data-eid', eId);
                    }, this);
                    break;
                }
            case WGT_PRODUCTS_LIST_GRID_VIEW:
                {
                    this.entries = this.element.getElements('.tpl-section.tpl-products-section .tpl-products-list-entry');this.entries.each(function(entry) {
                        var pIdInput = entry.getElement('.tpl-product-form input[name="data[WebshopProduct][id]"]');
                        var pId = (pIdInput && pIdInput.get('value') && parseInt(pIdInput.get('value')) > 0 ? parseInt(pIdInput.get('value')) : null);
                        if (!pId) {
                            return;
                        }
                        var eId = pId + '_' + (++this.entryUID);
                        while (true) {
                            if ($(document.body).getElement('[data-eid=' + eId + ']')) {
                                eId = pId + '_' + (++this.entryUID);
                            } else {
                                break;
                            }
                        }
                        entry.set('data-pid', pId);
                        entry.set('data-eid', eId);
                    }, this);
                    break;
                }
        }
    },
    attach: function() {
        this.parent();
        if (this.form) {
            var event = this.formSubmit.bind(this);
            this.form.store('event:formSubmit', event).addEvent('submit', event);
        }
        if (this.searchInput) {
            ['focus', 'blur'].each(function(value) {
                var event = this['searchInput' + value.capitalize()].bind(this);
                this.searchInput.store('event:searchInput' + value.capitalize(), event).addEvent(value, event);
            }, this);
        }
        this.element.getElements('.tpl-section .tpl-pager-links a:not(.tpl-disabled):not(.tpl-current)').each(function(link) {
            var event = this.pagerLinkClick.bind(this, link);
            link.store('event:pagerLinkClick', event).addEvent('click', event);
        }, this);
        switch (this.viewType) {
            case WGT_PRODUCTS_LIST_TABLE_VIEW:
                {
                    this.attachTableView();
                    break;
                }
            case WGT_PRODUCTS_LIST_GRID_VIEW:
                {
                    this.attachGridView();
                    break;
                }
        }
    },
    detach: function() {
        this.parent();
        if (this.form) {
            this.form.removeEvent('submit', this.form.retrieve('event:formSubmit')).eliminate('event:formSubmit');
        }
        if (this.searchInput) {
            ['focus', 'blur'].each(function(value) {
                this.searchInput.removeEvent(value, this.searchInput.retrieve('event:searchInput' + value.capitalize())).eliminate('event:searchInput' + value.capitalize());
            }, this);
        }
        this.element.getElements('.tpl-section .tpl-pager-links a:not(.tpl-disabled):not(.tpl-current)').each(function(link) {
            link.removeEvent('click', link.retrieve('event:pagerLinkClick')).eliminate('event:pagerLinkClick');
        });
        switch (this.viewType) {
            case WGT_PRODUCTS_LIST_TABLE_VIEW:
                {
                    this.detachTableView();
                    break;
                }
            case WGT_PRODUCTS_LIST_GRID_VIEW:
                {
                    this.detachGridView();
                    break;
                }
        }
    },
    attachTableView: function() {
        this.entries.each(function(entry) {
            var cartForm = entry.getElement('.tpl-product-cart-form');
            if (cartForm) {
                var event = this.productCartFormSubmit.bind(this, cartForm);
                cartForm.store('event:productCartFormSubmit', event).addEvent('submit', event);
                cartForm.getElements('.tpl-product-cart-qty').each(function(input) {
                    var event = this.quantityInputFocus.bind(this, input);
                    input.store('event:quantityInputFocus', event).addEvent('focus', event);
                    var event = this.quantityInputBlur.bind(this, input);
                    input.store('event:quantityInputBlur', event).addEvent('blur', event);
                    var event = this.quantityInputKeydown.bind(this, input);
                    input.store('event:quantityInputKeydown', event).addEvent('keydown', event);
                    var event = this.quantityInputKeyup.bind(this, input);
                    input.store('event:quantityInputKeyup', event).addEvent('keyup', event);
                }, this);
            }
            entry.getElements('.tpl-contact-form-link').each(function(link) {
                var event = this.contactFormLinkClick.bind(this, link, entry);
                link.store('event:contactFormLinkClick', event).addEvent('click', event);
            }, this);
        }, this);
        this.element.getElements('.tpl-feature-notes[title]').each(function(n) {
            this.tooltips.push(new FadingTooltip(n, {
                text: n.get('title'),
                showDelay: 10,
                offset: {
                    x: -30,
                    y: -8
                },
                hook: {
                    target: 'topRight',
                    tip: 'bottomLeft'
                },
                width: 350,
                container: $('PageContent'),
                relative: true,
                relativeParentElement: $('PageContent'),
                classes: {
                    tooltip: 'tpl-tooltip clearfix',
                    arrow: 'tpl-tooltip-arrow tpl-bottom-left'
                }
            }));
        }, this);
    },
    detachTableView: function() {
        this.entries.each(function(entry) {
            var cartForm = entry.getElement('.tpl-product-cart-form');
            if (cartForm) {
                cartForm.removeEvent('submit', cartForm.retrieve('event:productCartFormSubmit')).eliminate('event:productCartFormSubmit');
                cartForm.getElements('.tpl-product-cart-qty').each(function(input) {
                    input.removeEvent('focus', input.retrieve('event:quantityInputFocus')).eliminate('event:quantityInputFocus');
                    input.removeEvent('blur', input.retrieve('event:quantityInputBlur')).eliminate('event:quantityInputBlur');
                    input.removeEvent('keydown', input.retrieve('event:quantityInputKeydown')).eliminate('event:quantityInputKeydown');
                    input.removeEvent('keyup', input.retrieve('event:quantityInputKeyup')).eliminate('event:quantityInputKeyup');
                });
            }
            entry.getElements('.tpl-contact-form-link').each(function(link) {
                link.removeEvent('click', link.retrieve('event:contactFormLinkClick')).eliminate('event:contactFormLinkClick');
            });
        });
        if (this.tooltips.length > 0) {
            this.tooltips.each(function(t) {
                t.destroy();
            });
            this.tooltips = [];
        }
    },
    attachGridView: function() {
        this.entries.each(function(entry) {
            var cartForm = entry.getElement('.tpl-product-cart-form');
            if (cartForm) {
                var event = this.productCartFormSubmit.bind(this, cartForm);
                cartForm.store('event:productCartFormSubmit', event).addEvent('submit', event);
            }
            entry.getElements('.tpl-contact-form-link').each(function(link) {
                var event = this.contactFormLinkClick.bind(this, link, entry);
                link.store('event:contactFormLinkClick', event).addEvent('click', event);
            }, this);
        }, this);
    },
    detachGridView: function() {
        this.entries.each(function(entry) {
            var cartForm = entry.getElement('.tpl-product-cart-form');
            if (cartForm) {
                cartForm.removeEvent('submit', cartForm.retrieve('event:productCartFormSubmit')).eliminate('event:productCartFormSubmit');
            }
            entry.getElements('.tpl-contact-form-link').each(function(link) {
                link.removeEvent('click', link.retrieve('event:contactFormLinkClick')).eliminate('event:contactFormLinkClick');
            });
        });
    },
    formSubmit: function(ev) {
        if (this.defaultText.length > 0 && this.searchInput && this.searchInput.get('value') == this.defaultText) {
            this.searchInput.set('value', '');
        }
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        if (History.push(History.toRelativeUrl(this.form.get('action') + '?' + this.form.toQueryString()), null, {
                a: 'widget',
                m: 'applyFilters',
                w: this.element.get('id')
            }) == false) {
            this.applyFilters({
                data: {
                    'data[Request][url]': History.toRelativeUrl(this.form.get('action') + '?' + this.form.toQueryString())
                }
            });
        }
    },
    applyFilters: function(options) {
        var widgets = [];
        Object.each(this.page.widgets, function(widget) {
            if (this.searchInput) {
                switch (true) {
                    case (Object.getFromPath(widget, 'options.short_name') == 'search_box'):
                    case (Object.getFromPath(widget, 'options.short_name') == 'search_form'):
                        {
                            widget.updateSearchText(this.searchInput.get('value'));
                            break;
                        }
                }
            }
            if (['product_filters', 'search_results'].contains(Object.getFromPath(widget, 'options.short_name'))) {
                widgets.push({
                    'widget_id': widget.id,
                    'element_id': widget.element.get('id'),
                    'render': 1,
                    'process': 0
                });
            }
        }, this);
        var options = Object.merge({
            onRequestStart: function() {
                this.setBusy(true);
            }.bind(this),
            onRequestEnd: function() {
                this.setBusy(false);
            }.bind(this),
            onInit: function() {
                var top = 0;
                widgets.each(function(w) {
                    var widget = $(w.element_id);
                    if (widget) {
                        if (this.admin || this.preview) {
                            coords = widget.getRelativeCoordinates($('PageWrapper'));
                            if (top == 0) {
                                top = coords.top;
                            } else {
                                top = Math.min(top, coords.top);
                            }
                        } else {
                            coords = widget.getCoordinates();
                            if (top == 0) {
                                top = coords.top;
                            } else {
                                top = Math.min(top, coords.top);
                            }
                        }
                    }
                }, this);
                if (top - 10 > 0) {
                    top -= 10;
                }
                if (this.scrollableElement.getScroll().y > top) {
                    this.scrollFx.start(0, top);
                }
            }.bind(this)
        }, options);
        this.page.refreshWidgets(widgets, options);
    },
    searchInputFocus: function(ev) {
        if (this.searchInput.get('value').toLowerCase() == this.defaultText.toLowerCase()) {
            this.searchInput.set('value', '');
        }
    },
    searchInputBlur: function(ev) {
        if (this.searchInput.get('value').length == 0 || this.searchInput.get('value').toLowerCase() == this.defaultText.toLowerCase()) {
            this.searchInput.set('value', this.defaultText);
        }
    },
    pagerLinkClick: function(link, ev) {
        var section = link.getParent('.tpl-section');
        var cls = (section ? section.get('class').match(/(tpl-(\w+-?\w+)-section)/i) : '');
        var sectionClass = (cls && typeof(cls[1]) != 'undefined' ? cls[1] : null);
        if (!sectionClass) {
            return;
        }
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        if (History.push(History.toRelativeUrl(link.get('href')), null, {
                a: 'widget',
                m: 'applyFilters',
                w: this.element.get('id')
            }) == false) {
            this.applyFilters({
                data: {
                    'data[Request][url]': History.toRelativeUrl(link.get('href'))
                }
            });
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new SearchResultsWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var SharingButtonsWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Sharing buttons',
        short_name: 'sharing_buttons',
        dropdown: true
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.create.delay(1, this);
    },
    initVariables: function() {
        this.parent();
        this.bound = Object.merge(this.bound, {
            modalLayerClick: this.modalLayerClick.bind(this)
        });
    },
    create: function() {
        if (Browser.ie && this.element.getElement('.tpl-sharing-button-container.tpl-gplus-one')) {
            var ua = navigator.userAgent.toLowerCase();
            if (!ua.match(/trident\//)) {
                this.element.getElement('.tpl-sharing-button-container.tpl-gplus-one').destroy();
            }
        }
        var bFbLikeButton = (this.element.getElement('.tpl-sharing-button-container.tpl-fb-like') ? true : false);
        var bGPlusOneButton = (this.element.getElement('.tpl-sharing-button-container.tpl-gplus-one') ? true : false);
        var bTwTweetButton = (this.element.getElement('.tpl-sharing-button-container.tpl-tw-tweet') ? true : false);
        var fn = (function() {
            var existing = $$('script[src]');
            if (bFbLikeButton == true) {
                var bExists = false;
                var fbContainer = this.element.getElement('.tpl-sharing-button-container.tpl-fb-like');
                var fbScript = null;
                var fbAsset = 'https://connect.facebook.net/' + Object.getFromPath(this.page, 'options.page.language_locale').replace(/-/i, '_') + '/all.js'
                existing.each(function(a) {
                    if (bExists == false && fbAsset == a.get('src')) {
                        fbScript = a;
                        bExists = true;
                    }
                });
                var onFbLoad = function() {
                    FB.XFBML.parse(fbContainer);
                };
                if (bExists == false) {
                    fbScript = new Element('script', {
                        'id': 'facebook-jssdk',
                        'src': fbAsset,
                        'type': 'text/javascript'
                    });
                    if (typeof fbScript.onreadystatechange != 'undefined') {
                        fbScript.addEvent('readystatechange', function() {
                            if (['loaded', 'complete'].contains(this.readyState)) {
                                fbScript.set('data-loaded', 'true');
                                onFbLoad.apply();
                            }
                        });
                    } else {
                        fbScript.addEvent('load', function() {
                            fbScript.set('data-loaded', 'true');
                            onFbLoad.apply();
                        });
                    }
                    fbScript.inject(document.body);
                } else {
                    if (fbScript.get('data-loaded') == 'true') {
                        onFbLoad.apply();
                    } else {
                        if (typeof fbScript.onreadystatechange != 'undefined') {
                            fbScript.addEvent('readystatechange', function() {
                                if (['loaded', 'complete'].contains(this.readyState)) {
                                    onFbLoad.apply();
                                }
                            });
                        } else {
                            fbScript.addEvent('load', function() {
                                onFbLoad.apply();
                            });
                        }
                    }
                }
            }
            if (bGPlusOneButton == true) {
                var bExists = false;
                var gpContainer = this.element.getElement('.tpl-sharing-button-container.tpl-gplus-one');
                var gpScript = null;
                var gpAsset = 'https://apis.google.com/js/plusone.js'
                existing.each(function(a) {
                    if (bExists == false && gpAsset == a.get('src')) {
                        gpScript = a;
                        bExists = true;
                    }
                });
                var onGPlusLoad = function() {
                    gapi.plusone.go(gpContainer);
                };
                if (bExists == false) {
                    window.___gcfg = {
                        lang: Object.getFromPath(this.page, 'options.page.language_locale')
                    };
                    gpScript = new Element('script', {
                        'src': gpAsset,
                        'type': 'text/javascript'
                    });
                    gpScript.text = "{'parsetags': 'explicit'}";
                    if (typeof gpScript.onreadystatechange != 'undefined') {
                        gpScript.addEvent('readystatechange', function() {
                            if (['loaded', 'complete'].contains(this.readyState)) {
                                gpScript.set('data-loaded', 'true');
                                onGPlusLoad.apply();
                            }
                        });
                    } else {
                        gpScript.addEvent('load', function() {
                            gpScript.set('data-loaded', 'true');
                            onGPlusLoad.apply();
                        });
                    }
                    gpScript.inject(document.body);
                } else {
                    if (gpScript.get('data-loaded') == 'true') {
                        onGPlusLoad.apply();
                    } else {
                        if (typeof gpScript.onreadystatechange != 'undefined') {
                            gpScript.addEvent('readystatechange', function() {
                                if (['loaded', 'complete'].contains(this.readyState)) {
                                    onGPlusLoad.apply();
                                }
                            });
                        } else {
                            gpScript.addEvent('load', function() {
                                onGPlusLoad.apply();
                            });
                        }
                    }
                }
            }
            if (bTwTweetButton == true) {
                var bExists = false;
                var twContainer = this.element.getElement('.tpl-sharing-button-container.tpl-tw-tweet');
                var twScript = null;
                var twAsset = 'https://platform.twitter.com/widgets.js'
                existing.each(function(a) {
                    if (bExists == false && twAsset == a.get('src')) {
                        twScript = a;
                        bExists = true;
                    }
                });
                var onTwLoad = function() {
                    twContainer.getElements('.tw-tweet').addClass('twitter-share-button');
                    twttr.widgets.load(twContainer);
                };
                if (bExists == false) {
                    twScript = new Element('script', {
                        'id': 'twitter-wjs',
                        'src': twAsset,
                        'type': 'text/javascript'
                    });
                    if (typeof twScript.onreadystatechange != 'undefined') {
                        twScript.addEvent('readystatechange', function() {
                            if (['loaded', 'complete'].contains(this.readyState)) {
                                twScript.set('data-loaded', 'true');
                                onTwLoad.apply();
                            }
                        });
                    } else {
                        twScript.addEvent('load', function() {
                            twScript.set('data-loaded', 'true');
                            onTwLoad.apply();
                        });
                    }
                    twScript.inject(document.body);
                } else {
                    if (twScript.get('data-loaded') == 'true') {
                        onTwLoad.apply();
                    } else {
                        if (typeof twScript.onreadystatechange != 'undefined') {
                            twScript.addEvent('readystatechange', function() {
                                if (['loaded', 'complete'].contains(this.readyState)) {
                                    onTwLoad.apply();
                                }
                            });
                        } else {
                            twScript.addEvent('load', function() {
                                onTwLoad.apply();
                            });
                        }
                    }
                }
            }
        }).bind(this);
        if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
            fn.apply();
        } else {
            window.addEvent('load', fn);
        }
    },
    attachAdminUI: function() {
        this.parent();
        var modalLayer = this.element.getElement('.tpl-widget-content-overlay');
        if (modalLayer) {
            modalLayer.addEvent('click', this.bound.modalLayerClick);
        }
    },
    detachAdminUI: function() {
        this.parent();
        var modalLayer = this.element.getElement('.tpl-widget-content-overlay');
        if (modalLayer) {
            modalLayer.removeEvent('click', this.bound.modalLayerClick);
        }
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        this.website.hideTips();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    modalLayerClick: function(ev) {
        this.website.hideTips();
        this.website.notifyAdmin(__('admin_core', 'Administration mode', true), __('admin_core', 'The interaction with this widget is disabled in the administration panel. Click the "Preview" button in the top toolbar, if you want to test the functionality of the widget.', true), {
            width: 450,
            duration: 10000,
            classes: {
                title: '',
                icon: 'ui-tip'
            },
            onHide: function(item, length) {
                if (this.website.tips.contains(item)) {
                    this.website.tips.erase(item);
                }
            }.bind(this)
        });
        this.website.tips.push(this.website.adminNotifier.items.getLast());
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new SharingButtonsWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var ShoppingCartWidget = new Class({
    Extends: LayoutWidget,
    Implements: WebshopWidget,
    options: {
        name: 'Shopping cart',
        short_name: 'shopping_cart',
        dropdown: true
    },
    initVariables: function() {
        this.parent();
        this.form = this.element.getElement('form');
    },
    attach: function() {
        this.parent();
        if (this.form) {
            var event = this.shoppingCartFormSubmit.bind(this, this.form);
            this.form.store('event:shoppingCartFormSubmit', event).addEvent('submit', event);
            this.form.getElements('.tpl-shopping-cart-qty').each(function(input) {
                var event = this.quantityInputFocus.bind(this, input);
                input.store('event:quantityInputFocus', event).addEvent('focus', event);
                var event = this.quantityInputBlur.bind(this, input);
                input.store('event:quantityInputBlur', event).addEvent('blur', event);
                var event = this.quantityInputKeydown.bind(this, input);
                input.store('event:quantityInputKeydown', event).addEvent('keydown', event);
                var event = this.quantityInputKeyup.bind(this, input);
                input.store('event:quantityInputKeyup', event).addEvent('keyup', event);
            }, this);
            this.form.getElements('.tpl-shopping-cart-delete-item').each(function(link) {
                var event = this.deleteCartProductLinkClick.bind(this, link);
                link.store('event:deleteCartProductLinkClick', event).addEvent('click', event);
            }, this);
        }
    },
    detach: function() {
        this.parent();
        if (this.form) {
            this.form.removeEvent('submit', this.form.retrieve('event:shoppingCartFormSubmit')).eliminate('event:shoppingCartFormSubmit');
            this.form.getElements('.tpl-shopping-cart-qty').each(function(input) {
                input.removeEvent('focus', input.retrieve('event:quantityInputFocus')).eliminate('event:quantityInputFocus');
                input.removeEvent('blur', input.retrieve('event:quantityInputBlur')).eliminate('event:quantityInputBlur');
                input.removeEvent('keydown', input.retrieve('event:quantityInputKeydown')).eliminate('event:quantityInputKeydown');
                input.removeEvent('keyup', input.retrieve('event:quantityInputKeyup')).eliminate('event:quantityInputKeyup');
            });
            this.form.getElements('.tpl-shopping-cart-delete-item').each(function(link) {
                link.removeEvent('click', link.retrieve('event:deleteCartProductLinkClick')).eliminate('event:deleteCartProductLinkClick');
            });
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new ShoppingCartWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var ShoppingCartDetailsWidget = new Class({
    Extends: LayoutWidget,
    Implements: WebshopWidget,
    options: {
        name: 'Shopping cart details',
        short_name: 'shopping_cart_details',
        dropdown: true
    },
    initVariables: function() {
        this.parent();
        this.form = this.element.getElement('form');
        this.tooltips = [];
    },
    attach: function() {
        this.parent();
        if (this.form) {
            var event = this.shoppingCartFormSubmit.bind(this, this.form);
            this.form.store('event:shoppingCartFormSubmit', event).addEvent('submit', event);
            this.form.getElements('.tpl-shopping-cart-qty').each(function(input) {
                var event = this.quantityInputFocus.bind(this, input);
                input.store('event:quantityInputFocus', event).addEvent('focus', event);
                var event = this.quantityInputBlur.bind(this, input);
                input.store('event:quantityInputBlur', event).addEvent('blur', event);
                var event = this.quantityInputKeydown.bind(this, input);
                input.store('event:quantityInputKeydown', event).addEvent('keydown', event);
                var event = this.quantityInputKeyup.bind(this, input);
                input.store('event:quantityInputKeyup', event).addEvent('keyup', event);
            }, this);
            this.form.getElements('.tpl-shopping-cart-delete-item').each(function(link) {
                switch (true) {
                    case (link.hasClass('tpl-discount-code')):
                        {
                            var event = this.deleteDiscountCodeLinkClick.bind(this, link);link.store('event:deleteDiscountCodeLinkClick', event).addEvent('click', event);
                            break;
                        }
                    default:
                        {
                            var event = this.deleteCartProductLinkClick.bind(this, link);link.store('event:deleteCartProductLinkClick', event).addEvent('click', event);
                        }
                }
            }, this);
            this.form.getElements('.tpl-help[title]').each(function(n) {
                this.tooltips.push(new FadingTooltip(n, {
                    text: n.get('title'),
                    showDelay: 10,
                    offset: {
                        x: -30,
                        y: -8
                    },
                    hook: {
                        target: 'topRight',
                        tip: 'bottomLeft'
                    },
                    width: 350,
                    container: $('PageContent'),
                    relative: true,
                    relativeParentElement: $('PageContent'),
                    classes: {
                        tooltip: 'tpl-tooltip clearfix',
                        arrow: 'tpl-tooltip-arrow tpl-bottom-left'
                    }
                }));
            }, this);
        }
    },
    detach: function() {
        this.parent();
        if (this.form) {
            this.form.removeEvent('submit', this.form.retrieve('event:shoppingCartFormSubmit')).eliminate('event:shoppingCartFormSubmit');
            this.form.getElements('.tpl-shopping-cart-qty').each(function(input) {
                input.removeEvent('focus', input.retrieve('event:quantityInputFocus')).eliminate('event:quantityInputFocus');
                input.removeEvent('blur', input.retrieve('event:quantityInputBlur')).eliminate('event:quantityInputBlur');
                input.removeEvent('keydown', input.retrieve('event:quantityInputKeydown')).eliminate('event:quantityInputKeydown');
                input.removeEvent('keyup', input.retrieve('event:quantityInputKeyup')).eliminate('event:quantityInputKeyup');
            });
            this.form.getElements('.tpl-shopping-cart-delete-item').each(function(link) {
                switch (true) {
                    case (link.hasClass('tpl-discount-code')):
                        {
                            link.removeEvent('click', link.retrieve('event:deleteDiscountCodeLinkClick')).eliminate('event:deleteDiscountCodeLinkClick');
                            break;
                        }
                    default:
                        {
                            link.removeEvent('click', link.retrieve('event:deleteCartProductLinkClick')).eliminate('event:deleteCartProductLinkClick');
                        }
                }
            });
            if (this.tooltips.length > 0) {
                this.tooltips.each(function(t) {
                    t.destroy();
                });
                this.tooltips = [];
            }
        }
    },
    deleteDiscountCodeLinkClick: function(link, ev) {
        var form = link.getParent('form');
        var parsed = new URI(link.get('href'));
        var data = (parsed ? parsed.get('data') : null);
        var action = (data && typeof(data.action) != 'undefined' ? data.action : false);
        var id = (data && typeof(data.id) != 'undefined' ? data.id : false);
        if (!form || !action || !id) {
            return;
        }
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        var elementId = (this.element ? this.element.get('id') : null);
        var widgetsToRefresh = this.page.getCartWidgetsToRefresh([this.id]);
        this.website.request({
            url: '/ajax_core_widgets_ui/request/',
            data: {
                'data[Request][widget_id]': this.id,
                'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                'data[Request][refresh_widgets_id]': widgetsToRefresh,
                'data[Request][url]': Object.getFromPath(this.page, 'options.page.here_url'),
                'data[Request][render]': 1,
                'data[Request][process]': 1,
                'data[Widget][id]': this.id,
                'data[Widget][action]': action,
                'data[CartRule][id]': id
            },
            onRequest: function() {
                this.setBusy(true);
                this.website.websiteRequest();
            }.bind(this),
            onFailure: function() {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onError: function(text, error) {
                this.setBusy(false);
                this.website.websiteRequestFailure();
            }.bind(this),
            onSuccess: function(response, options) {
                this.setBusy(false);
                if (this.website.websiteRequestSuccess(response, options) == false) {
                    return;
                }
                if (Object.getFromPath(response, 'widget_content') && Object.getFromPath(response, 'widget_content').length > 0 && Object.getFromPath(response, 'css_assets') && Object.getFromPath(response, 'js_assets')) {
                    this.page.queueWidgetInsert(elementId, response, true);
                    var notifications = [];
                    if (Object.getFromPath(response, 'notifications') && response.notifications.length > 0) {
                        notifications = response.notifications;
                    }
                    if (Object.getFromPath(response, 'widgets') && Object.getLength(response.widgets) > 0) {
                        Object.each(response.widgets, function(widget, elementId) {
                            if (this.website.isError(widget) == true || this.website.preprocessResponse(widget) == false) {
                                return;
                            }
                            this.page.queueWidgetInsert(elementId, widget, true);
                            if (Object.getFromPath(widget, 'notifications') && widget.notifications.length > 0) {
                                notifications.append(widget.notifications);
                            }
                        }, this);
                    }
                    if (notifications.length > 0) {
                        this.website.notifier.empty();
                        var duration = 5000;
                        notifications.each(function(notification) {
                            if (Object.getFromPath(notification, 'type') && Object.getFromPath(notification, 'title') && Object.getFromPath(notification, 'msg')) {
                                var options = Object.merge(Object.clone(this.website.options.notifierOptions), {
                                    duration: duration,
                                    hideOnClick: false,
                                    classes: {
                                        item: 'tpl-roar tpl-roar-' + notification.type
                                    }
                                });
                                this.website.notify(notification.title, notification.msg, options);
                            }
                        }, this);
                    }
                    if (Object.getFromPath(response, 'app_error') && Object.getFromPath(response, 'app_error') == true) {
                        var title = __('core', 'Error');
                        var msg = __('core', 'An error has occurred while communicating with the server. Please try again.');
                        if (Object.getFromPath(response, 'app_title') && Object.getFromPath(response, 'app_title').length > 0) {
                            title = Object.getFromPath(response, 'app_title');
                        }
                        if (Object.getFromPath(response, 'app_msg') && Object.getFromPath(response, 'app_msg').length > 0) {
                            msg = Object.getFromPath(response, 'app_msg');
                        }
                        new IWindow.Error(title, msg, {
                            pin: true,
                            onShow: function() {
                                this.element.getElement('input[type=button]').focus();
                            }
                        });
                    }
                    return;
                }
                new IWindow.Error(__('core', 'Error'), __('core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later."), {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    }
                });
            }.bind(this)
        });
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-settings">' + __('admin_widget', 'Settings', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new ShoppingCartDetailsWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var SiteMapWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Site map',
        short_name: 'site_map',
        dropdown: true
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editableDropdownItemClick: function(item) {
        var action = item.getElement('span').get('class');
        this.parent(item);
        switch (action) {
            case 'ui-view-news':
                {
                    this.viewNews();
                    break;
                }
        }
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new SiteMapWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var SlideshowWidget = new Class({
    Extends: LayoutWidget,
    Implements: SlideshowCommonWidget,
    options: {
        name: 'Slideshow',
        short_name: 'slideshow',
        dropdown: true
    },
    initVariables: function() {
        this.parent();
        this.initSlideshow();
    },
    attach: function() {
        this.parent();
        this.attachSlideshow();
    },
    detach: function() {
        this.parent();
        this.detachSlideshow();
    },
    resizeSlideshow: function() {
        if (this.slideshow) {
            this.slideshow.box.setStyles({
                position: 'relative',
                top: 0,
                left: 0
            });
            this.slideshow.items.setStyle('width', null);
            var size = this.element.getElement('.tpl-slideshow-container').getComputedSize({
                styles: ['border', 'padding', 'margin']
            });
            switch (this.slideshow.options.mode) {
                case 'vertical':
                    this.slideshow.setOptions({
                        size: size.height
                    });
                    break;
                case 'horizontal':
                    this.slideshow.setOptions({
                        size: size.width
                    });
                    break;
            }
            this.slideshow.items.setStyles({
                width: size.width,
                height: size.height
            });
            this.slideshow.box.setStyles({
                position: 'absolute',
                top: 0,
                left: 0
            });
            var i = this.slideshow.currentIndex;
            this.slideshow.currentIndex = null;
            this.slideshow.previousIndex = null;
            this.slideshow.nextIndex = null;
            this.slideshow.box.setStyle(this.slideshow.modes[this.slideshow.mode][1], (this.slideshow.options.size * this.slideshow.items.length) + 'px');
            if (this.slideshow.options.fade == true) {
                this.slideshow.fading(i, true, true);
            } else {
                this.slideshow.walk(i, true, true);
            }
        }
    },
    elementMoved: function(prevCol, newCol) {
        if (this.slideshow) {
            this.slideshow.box.setStyles({
                position: 'relative',
                top: 0,
                left: 0
            });
            this.slideshow.items.setStyle('width', null);
            var size = this.element.getElement('.tpl-slideshow-container').getComputedSize({
                styles: ['border', 'padding', 'margin']
            });
            switch (this.slideshow.options.mode) {
                case 'vertical':
                    this.slideshow.setOptions({
                        size: size.height
                    });
                    break;
                case 'horizontal':
                    this.slideshow.setOptions({
                        size: size.width
                    });
                    break;
            }
            this.slideshow.items.setStyles({
                width: size.width,
                height: size.height
            });
            this.slideshow.box.setStyles({
                position: 'absolute',
                top: 0,
                left: 0
            });
            this.slideshow.box.setStyle(this.slideshow.modes[this.slideshow.mode][1], (this.slideshow.options.size * this.slideshow.items.length) + 'px');
            if (this.slideshow.options.fade == true) {
                this.slideshow.fading(0, true, true);
            } else {
                this.slideshow.walk(0, true, true);
            }
        }
    },
    createComplete: function() {
        this.editWidgetContent({
            requestData: {
                'data[Request][added]': 1
            }
        });
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-edit">' + __('admin_widget', 'Edit slideshow', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    showEditBox: function() {
        this.parent();
        this.setZindex();
    },
    editWidgetSettings: function() {
        this.editWidgetContent();
    },
    editWidgetContent: function(options) {
        if (this.options.editable == false) {
            return;
        }
        var options = Object.merge({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        language_id: Object.getFromPath(this.page, 'options.page.language_id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }, options);
        new SlideshowWidgetAdminWindowUI(options).set('website', this.website).set('widget', this);
    }
});
var SoundcloudPlayerWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'SoundCloud player',
        short_name: 'soundcloud_player',
        dropdown: true
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.create();
    },
    create: function() {
        var container = this.element.getElement('.tpl-soundcloud-player-container');
        if (container && container.get('data')) {
            var data = JSON.decode(container.get('data'));
            if (data && typeof(data.url) != 'undefined' && data.url.length > 0) {
                var fn = (function() {
                    new Element('iframe', {
                        scrolling: 'no',
                        frameborder: '0',
                        src: data.url,
                        allowTransparency: true
                    }).inject(container);
                }).bind(this);
                if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                    fn.apply();
                } else {
                    window.addEvent('load', fn);
                }
            }
        }
    },
    createComplete: function() {
        this.editWidgetSettings({
            requestData: {
                'data[Request][added]': 1
            }
        });
    },
    showWeirdElements: function() {
        var iframe = this.element.getElement('.tpl-soundcloud-player-container iframe');
        if (iframe && iframe.isDisplayed() == false) {
            iframe.setStyle('display', null);
        }
    },
    hideWeirdElements: function() {
        var iframe = this.element.getElement('.tpl-soundcloud-player-container iframe');
        if (iframe && iframe.isDisplayed() == true) {
            iframe.hide();
        }
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        this.website.hideTips();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function(options) {
        if (this.options.editable == false) {
            return;
        }
        var options = Object.merge({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }, options);
        new SoundcloudPlayerWidgetAdminWindowUI(options).set('website', this.website).set('widget', this);
    }
});
var TagCloudWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Tag cloud',
        short_name: 'tag_cloud',
        dropdown: true
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new TagCloudWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var TermsAndConditionsWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Terms and conditions',
        short_name: 'terms_and_conditions',
        dropdown: true
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new TermsAndConditionsWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var TextWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Text',
        short_name: 'text',
        dropdown: true
    },
    createComplete: function() {
        this.editWidgetContent({
            requestData: {
                'data[Request][added]': 1
            }
        });
    },
    addEditableDropdownItems: function() {
        if (this.editBox.dd) {
            if (this.options.editable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-edit">' + __('admin_widget', 'Edit content', true) + '</span>'
                });
                if (this.options.deletable == true) {
                    this.editBox.dd.addSeparator();
                }
            }
            if (this.options.deletable == true) {
                this.editBox.dd.addItem({
                    html: '<span class="ui-delete">' + __('admin_widget', 'Delete', true) + '</span>'
                });
            }
        }
    },
    editWidgetContent: function(options) {
        if (this.options.editable == false) {
            return;
        }
        var options = Object.merge({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }, options);
        new TextWidgetAdminWindowUI(options).set('website', this.website).set('widget', this);
    }
});
var WGT_TEXT_LAYOUT_IMAGE_ON_LEFT = 1;
var WGT_TEXT_LAYOUT_IMAGE_ON_RIGHT = 2;
var WGT_TEXT_LAYOUT_TWO_IMAGES = 3;
var WGT_TEXT_LAYOUT_THREE_IMAGES = 4;
var WGT_TEXT_LAYOUT_IMAGE_ON_TOP = 5;
var TextWithImagesWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Text with images',
        short_name: 'text_with_images',
        dropdown: true
    },
    initVariables: function() {
        this.parent();
        this.layout = false;
        this.resizeHandles = [];
        this.draggableItems = [];
        this.bDragging = false;
        this.table = this.element.getElement('.tpl-table-wrapper table');
        if (this.table) {
            switch (true) {
                case (this.table.hasClass('tpl-image-on-left')):
                    this.layout = WGT_TEXT_LAYOUT_IMAGE_ON_LEFT;
                    break;
                case (this.table.hasClass('tpl-image-on-right')):
                    this.layout = WGT_TEXT_LAYOUT_IMAGE_ON_RIGHT;
                    break;
                case (this.table.hasClass('tpl-two-images')):
                    this.layout = WGT_TEXT_LAYOUT_TWO_IMAGES;
                    break;
                case (this.table.hasClass('tpl-three-images')):
                    this.layout = WGT_TEXT_LAYOUT_THREE_IMAGES;
                    break;
                case (this.table.hasClass('tpl-image-on-top')):
                    this.layout = WGT_TEXT_LAYOUT_IMAGE_ON_TOP;
                    break;
            }
            if (this.options.admin == true) {
                var container = this.table.getParent('.tpl-table-wrapper');
                this.table.getElements('.tpl-image-cell, .tpl-text-cell').each(function(cell) {
                    var cls = 'tpl-edit-image';
                    if (cell.hasClass('tpl-text-cell')) {
                        cls = 'tpl-edit-text ' + (cell.hasClass('tpl-text-1') ? 'tpl-text-1' : (cell.hasClass('tpl-text-2') ? 'tpl-text-2' : 'tpl-text-3'));
                    } else {
                        cls += ' ' + (cell.hasClass('tpl-image-1') ? 'tpl-image-1' : (cell.hasClass('tpl-image-2') ? 'tpl-image-2' : 'tpl-image-3'));
                    }
                    cell.editLink = new Element('a', {
                        'href': '#',
                        'class': 'tpl-edit-content-action ' + cls,
                        'title': __('admin_widget', 'Edit', true)
                    }).adopt(new Element('span')).hide().inject(container);
                }, this);
                if (this.layout) {
                    switch (this.layout) {
                        case WGT_TEXT_LAYOUT_IMAGE_ON_LEFT:
                            {
                                this.resizeHandles.push(new Element('div', {
                                    'class': 'tpl-resize-handle tpl-col-1 tpl-col-right'
                                }).adopt(new Element('div')).hide().inject(container));
                                break;
                            }
                        case WGT_TEXT_LAYOUT_IMAGE_ON_RIGHT:
                            {
                                this.resizeHandles.push(new Element('div', {
                                    'class': 'tpl-resize-handle tpl-col-2 tpl-col-left'
                                }).adopt(new Element('div')).hide().inject(container));
                                break;
                            }
                        case WGT_TEXT_LAYOUT_TWO_IMAGES:
                            {
                                this.resizeHandles.push(new Element('div', {
                                    'class': 'tpl-resize-handle tpl-col-1 tpl-col-right'
                                }).adopt(new Element('div')).hide().inject(container));this.resizeHandles.push(new Element('div', {
                                    'class': 'tpl-resize-handle tpl-col-3 tpl-col-left'
                                }).adopt(new Element('div')).hide().inject(container));
                                break;
                            }
                    }
                    if (this.resizeHandles.length > 0) {
                        this.resizeHandles.each(function(el) {
                            var h = this.table.getComputedSize({
                                mode: 'vertical',
                                styles: ['padding', 'margin', 'border']
                            }).totalHeight;
                            var t = 0;
                            var l = 0;
                            var col = (el.hasClass('tpl-col-1') ? 1 : (el.hasClass('tpl-col-2') ? 2 : 3));
                            var cell = this.table.getElement('td:nth-child(' + col + ')');
                            if (cell) {
                                var cs = cell.getComputedSize({
                                    mode: 'vertical',
                                    styles: ['padding', 'margin', 'border']
                                });
                                var ws = (cell.getElement('.tpl-cell-content') ? cell.getElement('.tpl-cell-content').getComputedSize({
                                    mode: 'vertical',
                                    styles: ['padding', 'margin', 'border']
                                }) : false);
                                var d = parseInt(el.measure(function() {
                                    return this.getComputedSize({
                                        mode: 'horizontal',
                                        styles: ['padding', 'margin', 'border']
                                    }).totalWidth;
                                }) / 2);
                                if (el.hasClass('tpl-col-left')) {
                                    l = cell.getCoordinates(cell.getParent('.tpl-table-wrapper')).left - d;
                                } else {
                                    l = cell.getCoordinates(cell.getParent('.tpl-table-wrapper')).right - d;
                                }
                                t += cs.computedTop + (ws ? ws.computedTop : 0);
                                h -= (cs.computedTop + cs.computedBottom + (ws ? ws.computedTop + ws.computedBottom : 0));
                            }
                            el.setStyles({
                                top: t + 'px',
                                left: l + 'px',
                                height: h + 'px'
                            });
                        }, this);
                    }
                }
            }
        }
    },
    attachAdminUI: function() {
        this.parent();
        if (this.options.editable == false || this.layout == false) {
            return;
        }
        var container = this.table.getParent('.tpl-table-wrapper');
        this.table.getElements('.tpl-image-cell, .tpl-text-cell').each(function(cell) {
            if (cell.editLink) {
                var event = this.tableCellEditLinkMouseEnter.bind(this, cell.editLink, cell);
                cell.editLink.store('event:tableCellEditLinkMouseEnter', event).addEvent('mouseenter', event);
                var event = this.tableCellEditLinkMouseLeave.bind(this, cell.editLink, cell);
                cell.editLink.store('event:tableCellEditLinkMouseLeave', event).addEvent('mouseleave', event);
                var event = this.emptyContentLinkClick.bind(this, cell.editLink);
                cell.editLink.store('event:emptyContentLinkClick', event).addEvent('click', event);
            }
            if (cell.hasClass('tpl-image-cell')) {
                var emptyImgLink = cell.getElement('.tpl-empty-image-action');
                if (emptyImgLink) {
                    var event = this.emptyContentLinkClick.bind(this, emptyImgLink);
                    emptyImgLink.store('event:emptyContentLinkClick', event).addEvent('click', event);
                }
            }
            var event = this.tableCellMouseEnter.bind(this, cell);
            cell.store('event:tableCellMouseEnter', event).addEvent('mouseenter', event);
            var event = this.tableCellMouseLeave.bind(this, cell);
            cell.store('event:tableCellMouseLeave', event).addEvent('mouseleave', event);
        }, this);
        if (this.draggableItems.length > 0) {
            this.draggableItems.each(function(draggable) {
                draggable.attach();
            });
        } else if (this.resizeHandles.length > 0) {
            var tW = this.table.getComputedSize({
                mode: 'horizontal',
                styles: ['padding', 'margin', 'border']
            }).totalWidth;
            var eO = (tW - 80 > 100 ? 80 : 20);
            var self = this;
            this.resizeHandles.each(function(handle) {
                var options = {};
                var col = (handle.hasClass('tpl-col-1') ? 1 : (handle.hasClass('tpl-col-2') ? 2 : 3));
                var cell = this.table.getElement('td:nth-child(' + col + ')');
                var delta = parseInt(handle.measure(function() {
                    return this.getComputedSize({
                        mode: 'horizontal',
                        styles: ['padding', 'margin', 'border']
                    }).totalWidth;
                }) / 2);
                switch (this.layout) {
                    case WGT_TEXT_LAYOUT_IMAGE_ON_LEFT:
                    case WGT_TEXT_LAYOUT_IMAGE_ON_RIGHT:
                        {
                            options.limit = {
                                x: [eO, tW - eO]
                            };
                            break;
                        }
                    case WGT_TEXT_LAYOUT_TWO_IMAGES:
                        {
                            var hL = handle.measure(function() {
                                return this.getPosition(handle.getParent('.tpl-table-wrapper')).x
                            });
                            if (handle.hasClass('tpl-col-1')) {
                                options.limit = {
                                    x: [eO < hL ? eO : parseInt(hL / 2), hL]
                                };
                                if (typeof(this.resizeHandles[1]) != 'undefined' && this.resizeHandles[1] != handle) {
                                    var lHL = this.resizeHandles[1].measure(function() {
                                        return this.getPosition(self.resizeHandles[1].getParent('.tpl-table-wrapper')).x
                                    });
                                    if (lHL > options.limit.x[1]) {
                                        var d = lHL - options.limit.x[1];
                                        options.limit.x[1] = (d >= eO ? lHL - eO : options.limit.x[1] + parseInt(d / 2));
                                    }
                                }
                            } else {
                                options.limit = {
                                    x: [hL, tW - eO > hL ? tW - eO : tW - parseInt((tW - hL) / 2)]
                                };
                                if (typeof(this.resizeHandles[0]) != 'undefined' && this.resizeHandles[0] != handle) {
                                    var fHL = this.resizeHandles[0].measure(function() {
                                        return this.getPosition(self.resizeHandles[0].getParent('.tpl-table-wrapper')).x
                                    });
                                    if (fHL < options.limit.x[0]) {
                                        var d = options.limit.x[0] - fHL;
                                        options.limit.x[0] = (d >= eO ? fHL + eO : options.limit.x[0] - parseInt(d / 2));
                                    }
                                }
                            }
                            break;
                        }
                }
                handle.draggableItem = new Drag(handle, Object.merge({
                    snap: 1,
                    modifiers: {
                        x: 'left',
                        y: false
                    },
                    onBeforeStart: function() {
                        this.bDragging = true;
                    }.bind(this),
                    onCancel: function() {
                        this.bDragging = false;
                    }.bind(this),
                    onDrag: function(el) {
                        if (cell) {
                            var drag = el.draggableItem;
                            if (el.hasClass('tpl-col-right')) {
                                cell.setStyle('width', (drag.value.now.x + delta) + 'px')
                            } else {
                                cell.setStyle('width', (tW - drag.value.now.x - delta) + 'px')
                            }
                            var h = this.table.getComputedSize({
                                mode: 'vertical',
                                styles: ['padding', 'margin', 'border']
                            }).totalHeight;
                            var cs = cell.getComputedSize({
                                mode: 'vertical',
                                styles: ['padding', 'margin', 'border']
                            });
                            var ws = (cell.getElement('.tpl-cell-content') ? cell.getElement('.tpl-cell-content').getComputedSize({
                                mode: 'vertical',
                                styles: ['padding', 'margin', 'border']
                            }) : false);
                            h -= (cs.computedTop + cs.computedBottom + (ws ? ws.computedTop + ws.computedBottom : 0));
                            this.resizeHandles.each(function(hEl) {
                                hEl.setStyle('height', h + 'px');
                            });
                            this.elementResized();
                        }
                    }.bind(this),
                    onComplete: function(el) {
                        this.bDragging = false;
                        if (this.layout == WGT_TEXT_LAYOUT_TWO_IMAGES) {
                            this.resizeHandles.each(function(handle) {
                                if (handle == el) {
                                    return;
                                }
                                var drag = handle.draggableItem;
                                var hL = handle.measure(function() {
                                    return this.getPosition(handle.getParent('.tpl-table-wrapper')).x
                                });
                                if (handle.hasClass('tpl-col-1')) {
                                    drag.options.limit.x[1] = hL;
                                    if (typeof(this.resizeHandles[1]) != 'undefined' && this.resizeHandles[1] != handle) {
                                        var lHL = this.resizeHandles[1].measure(function() {
                                            return this.getPosition(self.resizeHandles[1].getParent('.tpl-table-wrapper')).x
                                        });
                                        if (lHL > drag.options.limit.x[1]) {
                                            var d = lHL - drag.options.limit.x[1];
                                            drag.options.limit.x[1] = (d >= eO ? lHL - eO : drag.options.limit.x[1] + parseInt(d / 2));
                                        }
                                    }
                                } else {
                                    drag.options.limit.x[0] = hL;
                                    if (typeof(this.resizeHandles[0]) != 'undefined' && this.resizeHandles[0] != handle) {
                                        var fHL = this.resizeHandles[0].measure(function() {
                                            return this.getPosition(self.resizeHandles[0].getParent('.tpl-table-wrapper')).x
                                        });
                                        if (fHL < drag.options.limit.x[0]) {
                                            var d = drag.options.limit.x[0] - fHL;
                                            drag.options.limit.x[0] = (d >= eO ? fHL + eO : drag.options.limit.x[0] - parseInt(d / 2));
                                        }
                                    }
                                }
                            }, this);
                        }
                        var data = {
                            'data[Request][widget_id]': this.id,
                            'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                            'data[Request][current_page_id]': Object.getFromPath(this.page, 'id'),
                            'data[Request][text_layout]': this.layout
                        };
                        switch (this.layout) {
                            case WGT_TEXT_LAYOUT_IMAGE_ON_LEFT:
                            case WGT_TEXT_LAYOUT_IMAGE_ON_RIGHT:
                                {
                                    data = Object.merge(data, {
                                        'data[Request][image_1_width]': parseInt(this.table.getElement('td.tpl-image-1').getStyle('width'))
                                    });
                                    break;
                                }
                            case WGT_TEXT_LAYOUT_TWO_IMAGES:
                                {
                                    data = Object.merge(data, {
                                        'data[Request][image_1_width]': parseInt(this.table.getElement('td.tpl-image-1').getStyle('width')),
                                        'data[Request][image_2_width]': parseInt(this.table.getElement('td.tpl-image-2').getStyle('width'))
                                    });
                                    break;
                                }
                        }
                        var opts = {
                            url: '/admin_core_widgets_ui/update_widget_data/',
                            data: Object.toQueryString(data),
                            onFailure: function() {
                                new IWindowUI.Error(__('admin_core', 'Error communicating with the server', true), __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true), {
                                    onShow: function() {
                                        this.element.getElement('input[type=button]').focus();
                                    }
                                });
                            },
                            onError: function(text, error) {
                                new IWindowUI.Error(__('admin_core', 'Error communicating with the server', true), __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true), {
                                    onShow: function() {
                                        this.element.getElement('input[type=button]').focus();
                                    }
                                });
                            }.bind(this),
                            onSuccess: function(response) {
                                if (this.website.hasAccess(response, {
                                        frontendRequest: false,
                                        showLoginWindow: true,
                                        showWarningWindow: true,
                                        onLoginSuccess: function() {
                                            fn.apply();
                                        }
                                    }) == false) {
                                    return;
                                }
                                if (this.website.isError(response, {
                                        frontendRequest: false,
                                        showWarningWindow: true
                                    }) == true) {
                                    return;
                                }
                                if (Object.getFromPath(response, 'updated') && response.updated == true) {
                                    if (this.website.options.auto_publishing == false && this.website.statusBar && typeof(response.status_bar_unpublished_count) != 'undefined' && typeof(response.status_bar_publish_type) != 'undefined' && typeof(response.status_bar_text) != 'undefined' && typeof(response.status_bar_button_text) != 'undefined' && typeof(response.status_bar_radio_current_text) != 'undefined' && typeof(response.status_bar_radio_all_text) != 'undefined') {
                                        if (response.status_bar_unpublished_count > 0) {
                                            this.website.statusBar.show({
                                                unpublished: response.status_bar_unpublished_count,
                                                publish_type: response.status_bar_publish_type,
                                                text: response.status_bar_text,
                                                button_text: response.status_bar_button_text,
                                                radio_current_text: response.status_bar_radio_current_text,
                                                radio_all_text: response.status_bar_radio_all_text
                                            });
                                        } else {
                                            this.website.statusBar.hide();
                                        }
                                    }
                                } else {
                                    new IWindowUI.Error(__('admin_core', 'Error', true), __('admin_core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later.", true), {
                                        onShow: function() {
                                            this.element.getElement('input[type=button]').focus();
                                        }
                                    });
                                }
                            }.bind(this)
                        };
                        var fn = (function() {
                            new Request.JSON(opts).send();
                        }).bind(this);
                        fn.apply();
                    }.bind(this)
                }, options));
                this.draggableItems.push(handle.draggableItem);
            }, this);
        }
    },
    detachAdminUI: function() {
        this.parent();
        if (this.options.editable == false || this.layout == false) {
            return;
        }
        this.table.getElements('.tpl-image-cell, .tpl-text-cell').each(function(cell) {
            if (cell.editLink) {
                cell.editLink.removeEvent('mouseenter', cell.editLink.retrieve('event:tableCellEditLinkMouseEnter')).eliminate('event:tableCellEditLinkMouseEnter');
                cell.editLink.removeEvent('mouseleave', cell.editLink.retrieve('event:tableCellEditLinkMouseLeave')).eliminate('event:tableCellEditLinkMouseLeave');
                cell.editLink.removeEvent('click', cell.editLink.retrieve('event:emptyContentLinkClick')).eliminate('event:emptyContentLinkClick');
            }
            if (cell.hasClass('tpl-image-cell')) {
                var emptyImgLink = cell.getElement('.tpl-empty-image-action');
                if (emptyImgLink) {
                    emptyImgLink.removeEvent('click', emptyImgLink.retrieve('event:emptyContentLinkClick')).eliminate('event:emptyContentLinkClick');
                }
            }
            cell.removeEvent('mouseenter', cell.retrieve('event:tableCellMouseEnter')).eliminate('event:tableCellMouseEnter');
            cell.removeEvent('mouseleave', cell.retrieve('event:tableCellMouseLeave')).eliminate('event:tableCellMouseLeave');
        });
        if (this.draggableItems.length > 0) {
            this.draggableItems.each(function(draggable) {
                draggable.detach();
            });
        }
    },
    createComplete: function() {
        this.editWidgetSettings({
            requestData: {
                'data[Request][added]': 1
            }
        });
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        switch (true) {
            case (el.hasClass('tpl-edit-image')):
                {
                    this.selectImage(el);
                    break;
                }
            case (el.hasClass('tpl-edit-text')):
                {
                    this.editText(el);
                    break;
                }
            default:
                {
                    this.editWidgetSettings();
                }
        }
    },
    tableCellMouseEnter: function(el, ev) {
        if (this.bInsideBox == false || !this.editBox) {
            this.bInsideBox = true;
            this.showEditBox();
        }
        if (el.hasClass('tpl-empty-content-cell') || this.bDragging == true) {
            return;
        }
        if (el.editLinkTimer) {
            clearTimeout(el.editLinkTimer);
            el.editLinkTimer = null;
        }
        if (el.editLink && el.editLink.isDisplayed() == false) {
            var coords = el.getCoordinates(el.getParent('.tpl-table-wrapper'));
            var linkSize = el.editLink.measure(function() {
                return this.getComputedSize({
                    styles: ['padding', 'margin', 'border']
                });
            })
            el.editLink.setStyles({
                display: null,
                top: coords.top,
                left: coords.right - linkSize.totalWidth
            });
        }
    },
    tableCellMouseLeave: function(el, ev) {
        if (el.hasClass('tpl-empty-content-cell')) {
            return;
        }
        if (el.editLink) {
            el.editLinkTimer = (function() {
                el.editLink.hide();
            }).delay(50);
        }
    },
    tableCellEditLinkMouseEnter: function(el, cell, ev) {
        if (cell.editLinkTimer) {
            clearTimeout(cell.editLinkTimer);
            cell.editLinkTimer = null;
        }
    },
    tableCellEditLinkMouseLeave: function(el, cell, ev) {
        if (cell.editLink) {
            cell.editLinkTimer = (function() {
                el.hide();
            }).delay(50);
        }
    },
    editWidgetSettings: function(options) {
        if (this.options.editable == false) {
            return;
        }
        var options = Object.merge({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }, options);
        new TextWithImagesWidgetAdminWindowUI(options).set('website', this.website).set('widget', this);
    },
    selectImage: function(el) {
        var selectedObject = false;
        var cell = null;
        var imgNo = false;
        switch (true) {
            case el.hasClass('tpl-image-1'):
                {
                    cell = this.table.getElement('td.tpl-image-1');imgNo = 1;
                    break;
                }
            case el.hasClass('tpl-image-2'):
                {
                    cell = this.table.getElement('td.tpl-image-2');imgNo = 2;
                    break;
                }
            case el.hasClass('tpl-image-3'):
                {
                    cell = this.table.getElement('td.tpl-image-3');imgNo = 3;
                    break;
                }
        }
        if (!cell || !imgNo) {
            return;
        }
        if (cell.editLink && cell.editLink.isDisplayed() == true) {
            cell.editLink.hide();
        }
        var img = cell.getElement('img');
        if (img) {
            var src = new URI(img.get('src'));
            var file = src.get('directory') + src.get('file');
            var match = file.match(/^\/(\d+)-(\d+)(-(\w+(-\w+)*?))?\/(.+)$/i);
            if (match && match.length == 7 && typeof(match[1]) != 'undefined') {
                selectedObject = parseInt(match[1]);
            }
        }
        var openedFolder = (selectedObject == false ? FS_IMAGES_FOLDER : false);
        var fmWin = new FileManagerWindowUI({
            title: __('admin_window_file_manager', 'Choose image', true),
            fileManagerOptions: {
                navigation: {
                    openedFolder: openedFolder
                },
                view: {
                    type: FS_ICONS_VIEW,
                    filters: [{
                        title: __('admin_window_file_manager', 'Images', true),
                        extensions: 'jpg,jpeg,png,gif,bmp,webp'
                    }],
                    selectionMode: FS_SINGLE_SELECTION,
                    selectionType: FS_SELECT_FILES,
                    selectedObject: selectedObject,
                    objectAction: {
                        folder: {
                            title: __('admin_window_file_manager', 'Explore', true),
                            className: 'ui-file-manager-listing-item-clickable',
                            action: {
                                click: 'open'
                            }
                        },
                        filePreview: {
                            title: __('admin_window_file_manager', 'Insert', true),
                            className: 'ui-file-manager-listing-item-clickable',
                            action: {
                                click: 'insert'
                            }
                        },
                        fileNoPreview: {
                            title: __('admin_window_file_manager', 'Insert', true),
                            className: 'ui-file-manager-listing-item-clickable',
                            action: {
                                click: 'insert'
                            }
                        }
                    }
                },
                onInsertObjects: function(objects) {
                    var onHide = false;
                    if (objects && typeOf(objects) == 'array') {
                        var object = objects.shift();
                        if (typeof(object.id) != 'undefined' && typeof(object.name) != 'undefined' && typeof(object.display_name) != 'undefined' && typeof(object.virtual_name) != 'undefined') {
                            var resizeFn = (function() {
                                var h = this.table.getComputedSize({
                                    mode: 'vertical',
                                    styles: ['padding', 'margin', 'border']
                                }).totalHeight;
                                var cs = cell.getComputedSize({
                                    mode: 'vertical',
                                    styles: ['padding', 'margin', 'border']
                                });
                                var ws = (cell.getElement('.tpl-cell-content') ? cell.getElement('.tpl-cell-content').getComputedSize({
                                    mode: 'vertical',
                                    styles: ['padding', 'margin', 'border']
                                }) : false);
                                h -= (cs.computedTop + cs.computedBottom + (ws ? ws.computedTop + ws.computedBottom : 0));
                                this.resizeHandles.each(function(hEl) {
                                    hEl.setStyle('height', h + 'px');
                                });
                                this.elementResized();
                            }).bind(this);
                            var onLoad = (function() {
                                resizeFn.apply();
                                if (img) {
                                    img.onload = img.onabort = img.onerror = null;
                                }
                            });
                            var src = this.website.options.files_host + '/' + object.virtual_name + '/' + rawurlencode(object.name);
                            if (img) {
                                img.onload = img.onabort = img.onerror = onLoad;
                                img.set('src', src);
                            } else {
                                var content = cell.getElement('.tpl-cell-content');
                                var link = (content ? content.getElement('.tpl-empty-image-action') : null);
                                if (content) {
                                    img = new Element('img').inject(content);
                                    img.onload = img.onabort = img.onerror = onLoad;
                                    img.set('src', src);
                                }
                                if (link && link.isDisplayed() == true) {
                                    link.hide();
                                }
                                if (cell.hasClass('tpl-empty-content-cell')) {
                                    cell.removeClass('tpl-empty-content-cell');
                                }
                            }
                            resizeFn.apply();
                            onHide = (function() {
                                var data = {
                                    'data[Request][widget_id]': this.id,
                                    'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                                    'data[Request][current_page_id]': Object.getFromPath(this.page, 'id'),
                                    'data[Request][text_layout]': this.layout
                                };
                                data['data[Request][image_' + imgNo + ']'] = {
                                    'virtual_name': object.virtual_name,
                                    'file_name': object.name,
                                    'file_display_name': object.display_name
                                };
                                var opts = {
                                    url: '/admin_core_widgets_ui/update_widget_data/',
                                    data: Object.toQueryString(data),
                                    onFailure: function() {
                                        new IWindowUI.Error(__('admin_core', 'Error communicating with the server', true), __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true), {
                                            onShow: function() {
                                                this.element.getElement('input[type=button]').focus();
                                            }
                                        });
                                    },
                                    onError: function(text, error) {
                                        new IWindowUI.Error(__('admin_core', 'Error communicating with the server', true), __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true), {
                                            onShow: function() {
                                                this.element.getElement('input[type=button]').focus();
                                            }
                                        });
                                    }.bind(this),
                                    onSuccess: function(response) {
                                        if (this.website.hasAccess(response, {
                                                frontendRequest: false,
                                                showLoginWindow: true,
                                                showWarningWindow: true,
                                                onLoginSuccess: function() {
                                                    fn.apply();
                                                }
                                            }) == false) {
                                            return;
                                        }
                                        if (this.website.isError(response, {
                                                frontendRequest: false,
                                                showWarningWindow: true
                                            }) == true) {
                                            return;
                                        }
                                        if (Object.getFromPath(response, 'updated') && response.updated == true) {
                                            if (this.website.options.auto_publishing == false && this.website.statusBar && typeof(response.status_bar_unpublished_count) != 'undefined' && typeof(response.status_bar_publish_type) != 'undefined' && typeof(response.status_bar_text) != 'undefined' && typeof(response.status_bar_button_text) != 'undefined' && typeof(response.status_bar_radio_current_text) != 'undefined' && typeof(response.status_bar_radio_all_text) != 'undefined') {
                                                if (response.status_bar_unpublished_count > 0) {
                                                    this.website.statusBar.show({
                                                        unpublished: response.status_bar_unpublished_count,
                                                        publish_type: response.status_bar_publish_type,
                                                        text: response.status_bar_text,
                                                        button_text: response.status_bar_button_text,
                                                        radio_current_text: response.status_bar_radio_current_text,
                                                        radio_all_text: response.status_bar_radio_all_text
                                                    });
                                                } else {
                                                    this.website.statusBar.hide();
                                                }
                                            }
                                        } else {
                                            new IWindowUI.Error(__('admin_core', 'Error', true), __('admin_core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later.", true), {
                                                onShow: function() {
                                                    this.element.getElement('input[type=button]').focus();
                                                }
                                            });
                                        }
                                    }.bind(this)
                                };
                                var fn = (function() {
                                    new Request.JSON(opts).send();
                                }).bind(this);
                                fn.apply();
                            }).bind(this);
                        }
                    }
                    if (onHide) {
                        fmWin.win.addEvent('hide', onHide);
                    }
                    fmWin.win.hide(true);
                }.bind(this)
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        (function() {
                            this.website.attach();
                        }).delay(10, this);
                    }.bind(this)
                });
            }.bind(this),
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website);
    },
    editText: function(el) {
        var cell = null;
        var textNo = false;
        switch (true) {
            case el.hasClass('tpl-text-1'):
                {
                    cell = this.table.getElement('td.tpl-text-1');textNo = 1;
                    break;
                }
            case el.hasClass('tpl-text-2'):
                {
                    cell = this.table.getElement('td.tpl-text-2');textNo = 2;
                    break;
                }
            case el.hasClass('tpl-text-3'):
                {
                    cell = this.table.getElement('td.tpl-text-3');textNo = 3;
                    break;
                }
        }
        if (!cell || !textNo) {
            return;
        }
        if (cell.editLink && cell.editLink.isDisplayed() == true) {
            cell.editLink.hide();
        }
        var textarea = cell.getElement('textarea');
        var text = (textarea ? textarea.get('value') : '');
        var options = Object.merge({
            content: text,
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onSave: function(html) {
                if (textarea) {
                    textarea.set('value', html);
                }
                var content = cell.getElement('.tpl-cell-content');
                var link = (content ? content.getElement('.tpl-empty-content-action') : null);
                if (content) {
                    if (html.length > 0) {
                        if (cell.hasClass('tpl-empty-content-cell')) {
                            cell.removeClass('tpl-empty-content-cell');
                        }
                        if (link) {
                            if (link.isDisplayed() == true) {
                                link.hide();
                            }
                            link.inject(link.getParent().getParent());
                        }
                        content.set('html', html);
                        if (link) {
                            link.inject(content);
                        }
                    } else {
                        if (!cell.hasClass('tpl-empty-content-cell')) {
                            cell.addClass('tpl-empty-content-cell');
                        }
                        if (link) {
                            link.inject(link.getParent().getParent());
                        }
                        content.set('html', '');
                        if (link) {
                            link.inject(content);
                            if (link.isDisplayed() == false) {
                                link.setStyle('display', null);
                            }
                        }
                    }
                    var h = this.table.getComputedSize({
                        mode: 'vertical',
                        styles: ['padding', 'margin', 'border']
                    }).totalHeight;
                    var cs = cell.getComputedSize({
                        mode: 'vertical',
                        styles: ['padding', 'margin', 'border']
                    });
                    var ws = (cell.getElement('.tpl-cell-content') ? cell.getElement('.tpl-cell-content').getComputedSize({
                        mode: 'vertical',
                        styles: ['padding', 'margin', 'border']
                    }) : false);
                    h -= (cs.computedTop + cs.computedBottom + (ws ? ws.computedTop + ws.computedBottom : 0));
                    this.resizeHandles.each(function(hEl) {
                        hEl.setStyle('height', h + 'px');
                    });
                    this.elementResized();
                }
                var data = {
                    'data[Request][widget_id]': this.id,
                    'data[Request][page_id]': Object.getFromPath(this.page, 'id'),
                    'data[Request][current_page_id]': Object.getFromPath(this.page, 'id'),
                    'data[Request][text_layout]': this.layout
                };
                data['data[Request][text_' + textNo + ']'] = html;
                var opts = {
                    url: '/admin_core_widgets_ui/update_widget_data/',
                    data: Object.toQueryString(data),
                    onFailure: function() {
                        new IWindowUI.Error(__('admin_core', 'Error communicating with the server', true), __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true), {
                            onShow: function() {
                                this.element.getElement('input[type=button]').focus();
                            }
                        });
                    },
                    onError: function(text, error) {
                        new IWindowUI.Error(__('admin_core', 'Error communicating with the server', true), __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true), {
                            onShow: function() {
                                this.element.getElement('input[type=button]').focus();
                            }
                        });
                    }.bind(this),
                    onSuccess: function(response) {
                        if (this.website.hasAccess(response, {
                                frontendRequest: false,
                                showLoginWindow: true,
                                showWarningWindow: true,
                                onLoginSuccess: function() {
                                    fn.apply();
                                }
                            }) == false) {
                            return;
                        }
                        if (this.website.isError(response, {
                                frontendRequest: false,
                                showWarningWindow: true
                            }) == true) {
                            return;
                        }
                        if (Object.getFromPath(response, 'updated') && response.updated == true) {
                            if (this.website.options.auto_publishing == false && this.website.statusBar && typeof(response.status_bar_unpublished_count) != 'undefined' && typeof(response.status_bar_publish_type) != 'undefined' && typeof(response.status_bar_text) != 'undefined' && typeof(response.status_bar_button_text) != 'undefined' && typeof(response.status_bar_radio_current_text) != 'undefined' && typeof(response.status_bar_radio_all_text) != 'undefined') {
                                if (response.status_bar_unpublished_count > 0) {
                                    this.website.statusBar.show({
                                        unpublished: response.status_bar_unpublished_count,
                                        publish_type: response.status_bar_publish_type,
                                        text: response.status_bar_text,
                                        button_text: response.status_bar_button_text,
                                        radio_current_text: response.status_bar_radio_current_text,
                                        radio_all_text: response.status_bar_radio_all_text
                                    });
                                } else {
                                    this.website.statusBar.hide();
                                }
                            }
                        } else {
                            new IWindowUI.Error(__('admin_core', 'Error', true), __('admin_core', "An error occurred while processing the request. We're working to get it fixed as soon as we can. Please try again later.", true), {
                                onShow: function() {
                                    this.element.getElement('input[type=button]').focus();
                                }
                            });
                        }
                    }.bind(this)
                };
                var fn = (function() {
                    new Request.JSON(opts).send();
                }).bind(this);
                fn.apply();
            }.bind(this)
        }, options);
        new TextEditorAdminWindowUI(options).set('website', this.website);
    },
    showEditBox: function() {
        if (this.editBox) {
            return;
        }
        this.parent();
        if (this.resizeHandles.length > 0) {
            this.resizeHandles.each(function(handle) {
                handle.setStyle('display', null);
            });
        }
    },
    hideEditBox: function() {
        var bHide = (this.editBox && this.editBoxFrozen == false ? true : false);
        this.parent();
        if (bHide == true && this.resizeHandles.length > 0) {
            this.resizeHandles.each(function(handle) {
                handle.hide();
            });
        }
    }
});
var TopBarWidget = new Class({
    Extends: Widget,
    options: {
        name: 'Top bar',
        short_name: 'top_bar',
        editable: true,
        box_class: 'tpl-no-offset'
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.create();
    },
    initVariables: function() {
        this.parent();
        this.bound = Object.merge(this.bound, {
            modalLayerClick: this.modalLayerClick.bind(this)
        });
    },
    create: function() {
        if ($('TopBarGoogleTranslateBox_' + this.id)) {
            var container = $('TopBarGoogleTranslateBox_' + this.id).getElement('.tpl-google-translate-container');
            if (container && container.get('data')) {
                var data = JSON.decode(container.get('data'));
                if (data && typeof(data.url) != 'undefined') {
                    var fn = function() {
                        new Element('iframe', {
                            scrolling: 'no',
                            frameborder: '0',
                            src: data.url
                        }).inject(container);
                    };
                    if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                        fn.apply();
                    } else {
                        window.addEvent('load', fn);
                    }
                }
            }
        }
    },
    attach: function() {
        this.parent();
        this.element.getElements('.tpl-top-bar-link').each(function(link) {
            switch (true) {
                case link.hasClass('tpl-top-bar-link-language'):
                    {
                        var box = $('TopBarLanguagesListBox_' + this.id);this.attachLanguageDropdown(link, box);
                        break;
                    }
                case link.hasClass('tpl-top-bar-link-google-translate'):
                    {
                        var box = $('TopBarGoogleTranslateBox_' + this.id);this.attachGoogleTranslateDropdown(link, box);
                        break;
                    }
                case link.hasClass('tpl-top-bar-link-currency'):
                    {
                        var box = $('TopBarCurrenciesListBox_' + this.id);this.attachCurrencyDropdown(link, box);
                        break;
                    }
            }
        }, this);
    },
    detach: function() {
        this.parent();
        this.element.getElements('.tpl-top-bar-link').each(function(link) {
            switch (true) {
                case link.hasClass('tpl-top-bar-link-language'):
                    {
                        this.detachLanguageDropdown(link);
                        break;
                    }
                case link.hasClass('tpl-top-bar-link-google-translate'):
                    {
                        this.detachGoogleTranslateDropdown(link);
                        break;
                    }
                case link.hasClass('tpl-top-bar-link-currency'):
                    {
                        this.detachCurrencyDropdown(link);
                        break;
                    }
            }
        }, this);
    },
    attachLanguageDropdown: function(el, box) {
        if (this.ld) {
            this.ld.attach();
        } else if (el && box) {
            this.ld = new DropdownBox(el, {
                displayMode: 2,
                hideDelay: 400,
                positionRelativeTarget: $('PageWrapper'),
                alignment: 'left',
                container: $('PageContent'),
                viewport: (this.admin || this.preview ? $('PageWrapper') : $(document.body)),
                box: box
            });
        }
    },
    detachLanguageDropdown: function(el) {
        if (this.ld) {
            this.ld.detach();
        }
    },
    attachGoogleTranslateDropdown: function(el, box) {
        if (this.gd) {
            this.gd.attach();
        } else if (el && box) {
            this.gd = new DropdownBox(el, {
                displayMode: 2,
                closeButton: true,
                hideDelay: 400,
                positionRelativeTarget: $('PageWrapper'),
                alignment: 'left',
                container: $('PageContent'),
                viewport: (this.admin || this.preview ? $('PageWrapper') : $(document.body)),
                box: box
            });
        }
    },
    detachGoogleTranslateDropdown: function(el) {
        if (this.gd) {
            this.gd.detach();
        }
    },
    attachCurrencyDropdown: function(el, box) {
        if (this.cd) {
            this.cd.attach();
        } else if (el && box) {
            this.cd = new DropdownBox(el, {
                displayMode: 2,
                hideDelay: 400,
                positionRelativeTarget: $('PageWrapper'),
                alignment: 'left',
                container: $('PageContent'),
                viewport: (this.admin || this.preview ? $('PageWrapper') : $(document.body)),
                box: box
            });
        }
    },
    detachCurrencyDropdown: function(el) {
        if (this.cd) {
            this.cd.detach();
        }
    },
    attachAdminUI: function() {
        this.parent();
        var box = $('TopBarGoogleTranslateBox_' + this.id);
        if (box) {
            var modalLayer = box.getElement('.tpl-dropdown-box-content-overlay');
            if (modalLayer) {
                modalLayer.addEvent('click', this.bound.modalLayerClick);
            }
        }
    },
    detachAdminUI: function() {
        this.parent();
        var box = $('TopBarGoogleTranslateBox_' + this.id);
        if (box) {
            var modalLayer = box.getElement('.tpl-dropdown-box-content-overlay');
            if (modalLayer) {
                modalLayer.removeEvent('click', this.bound.modalLayerClick);
            }
        }
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editableElementMouseEnter: function(el, ev) {
        this.parent();
        if (el.hasClass('tpl-editable-indicator-button')) {
            if (this.ld) {
                this.ld.toggleDropdown(-1);
            }
            if (this.cd) {
                this.cd.toggleDropdown(-1);
            }
            if (this.gd) {
                this.gd.toggleDropdown(-1);
            }
        }
    },
    editableButtonClick: function(ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    modalLayerClick: function(ev) {
        this.website.hideTips();
        this.website.notifyAdmin(__('admin_core', 'Administration mode', true), __('admin_core', 'The interaction with this widget is disabled in the administration panel. Click the "Preview" button in the top toolbar, if you want to test the functionality of the widget.', true), {
            width: 450,
            duration: 10000,
            classes: {
                title: '',
                icon: 'ui-tip'
            },
            onHide: function(item, length) {
                if (this.website.tips.contains(item)) {
                    this.website.tips.erase(item);
                }
            }.bind(this)
        });
        this.website.tips.push(this.website.adminNotifier.items.getLast());
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new TopBarWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    },
    destroy: function() {
        this.parent();
        if (this.ld) {
            this.ld.box.destroy();
        }
        if (this.gd) {
            this.gd.box.destroy();
        }
        if (this.cd) {
            this.cd.box.destroy();
        }
    }
});
var TopMenuWidget = new Class({
    Extends: Widget,
    options: {
        name: 'Top menu',
        short_name: 'top_menu',
        editable: true
    },
    initVariables: function() {
        this.menu = null;
        this.responsiveMenu = null;
    },
    attach: function() {
        this.parent();
        if (this.element.hasClass('tpl-top-menu-multi-level')) {
            this.attachDropdownMenu();
        }
        if (this.website.responsive == true) {
            this.attachResponsiveMenu();
        }
    },
    detach: function() {
        this.parent();
        if (this.element.hasClass('tpl-top-menu-multi-level')) {
            this.detachDropdownMenu();
        }
        if (this.website.responsive == true) {
            this.detachResponsiveMenu();
        }
    },
    attachDropdownMenu: function() {
        if (this.menu) {
            this.menu.attach();
        } else {
            this.page.requirePluginAssets({
                js: ['menumatic.min.js'],
                css: ['menumatic.css'],
                onLoad: function() {
                    if (typeof(MenuMatic) != 'undefined') {
                        var list = this.element.getElement('.tpl-main-menu ul');
                        if (list) {
                            this.menu = new MenuMatic(list, {
                                hideDelay: 1000,
                                container: $('PageContent'),
                                positionTarget: $('PageWrapper'),
                                scrollableElement: (this.admin || this.preview ? $('PageWrapper') : window),
                                viewportElement: (this.admin || this.preview ? $('PageWrapper') : document),
                                classes: {
                                    submenuToggler: 'tpl-submenu-button'
                                }
                            });
                        }
                    }
                }.bind(this)
            });
        }
    },
    detachDropdownMenu: function() {
        if (this.menu) {
            this.menu.detach();
        }
    },
    attachResponsiveMenu: function() {
        if (this.responsiveMenu) {
            this.responsiveMenu.attach();
        } else {
            this.page.requirePluginAssets({
                js: ['responsive_menu.min.js'],
                onLoad: function() {
                    if (typeof(ResponsiveMenu) != 'undefined') {
                        var button = this.element.getElement('.tpl-responsive-menu-button');
                        var container = this.element.getElement('.tpl-responsive-menu-container');
                        if (button && container) {
                            this.responsiveMenu = new ResponsiveMenu(container, {
                                button: button,
                                positionTarget: $('PageWrapper'),
                                viewportElement: (this.admin || this.preview ? $('PageWrapper') : document)
                            });
                        }
                    }
                }.bind(this)
            });
        }
    },
    detachResponsiveMenu: function() {
        if (this.responsiveMenu) {
            this.responsiveMenu.detach();
        }
    },
    editWidgetContent: function() {
        if (this.options.editable == false) {
            return;
        }
        new MenuEditorWindowUI({
            menuEditorOptions: {
                navigation: {
                    currentPage: Object.getFromPath(this.page, 'id')
                },
                view: {
                    showMenuVisibility: PG_TOP_MENU
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website);
    }
});
var TopShoppingCartWidget = new Class({
    Extends: Widget,
    Implements: WebshopWidget,
    options: {
        name: 'Top shopping cart',
        short_name: 'top_shopping_cart'
    }
});
var ACCOUNT_TYPE_PERSON = 1;
var ACCOUNT_TYPE_COMPANY = 2;
var UserAccountWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'User account',
        short_name: 'user_account',
        dropdown: true
    },
    initVariables: function() {
        this.parent();
        this.tabs = this.element.getElements('.tpl-tabs li');
        this.tabContents = this.element.getElements('.tpl-tab-content');
        this.activeTabIdx = this.tabs.indexOf(this.element.getElement('.tpl-tabs .tpl-active'));
        this.userAccountFormPreviewSections = [];
        this.userAccountFormEditSections = [];
        this.userAccountForm = this.element.getElement('form.tpl-user-account-form');
        if (this.userAccountForm) {
            this.userAccountFormPreviewSections = this.userAccountForm.getElements('.tpl-preview-section');
            this.userAccountFormEditSections = this.userAccountForm.getElements('.tpl-edit-section');
        }
        this.userAccountValidator = null;
        this.orderDetailsLinks = this.element.getElements('.tpl-tab-content.tpl-orders .tpl-orders-history-table tbody a');
        this.ordersPagerLinks = this.element.getElements('.tpl-tab-content.tpl-orders .tpl-pager-links a:not(.tpl-disabled)');
        this.orderBackLinks = this.element.getElements('.tpl-tab-content.tpl-orders .tpl-listing-back-to-list a');
    },
    attach: function() {
        this.parent();
        if (this.tabs.length > 0) {
            this.attachTabsUI();
        }
        if (this.userAccountForm) {
            this.attachUserAccountFormUI();
        }
        if (this.orderDetailsLinks.length > 0 || this.ordersPagerLinks.length > 0 || this.orderBackLinks.length > 0) {
            this.attachOrdersHistoryUI();
        }
    },
    attachTabsUI: function() {
        this.tabs.each(function(tab, i) {
            var event = this.tabClick.bind(this, tab);
            tab.store('event:tabClick', event).addEvent('click', event);
        }, this);
    },
    attachUserAccountFormUI: function() {
        if (this.userAccountValidator) {
            this.userAccountValidator.attach();
        } else if (typeof(window['FormCheck']) != 'undefined') {
            var customElAlerts = {};
            customElAlerts['UserAccountFirstName_' + this.id] = __('form_check', 'Please enter a valid first name.');
            customElAlerts['UserAccountLastName_' + this.id] = __('form_check', 'Please enter a valid last name.');
            customElAlerts['UserAccountEmail_' + this.id] = __('form_check', 'Please enter a valid e-mail.');
            customElAlerts['UserAccountNewPasswd_' + this.id] = __('form_check', 'Please enter a password containing at least 5 characters.');
            customElAlerts['UserAccountConfirmNewPasswd_' + this.id] = __('form_check', 'The password does not match the confirmation password.');
            var at = this.userAccountForm.getElements('input[name="data[UserAccountDetails][account_type]"]');
            if (at && at.length > 0) {
                at = at.shift();
                customElAlerts[at.get('id')] = __('form_check', 'Please select the account type.');
            }
            customElAlerts['UserAccountDetailsBillingCompanyName_' + this.id] = __('form_check', 'Please enter a valid company name.');
            customElAlerts['UserAccountDetailsBillingStreet_' + this.id] = __('form_check', 'Please enter a valid street address.');
            customElAlerts['UserAccountDetailsBillingPostalCode_' + this.id] = __('form_check', 'Please enter a valid postal code.');
            customElAlerts['UserAccountDetailsBillingTown_' + this.id] = __('form_check', 'Please enter a valid town.');
            customElAlerts['UserAccountDetailsBillingRegularPhone_' + this.id] = __('form_check', 'Please enter a valid regular phone number.');
            customElAlerts['UserAccountDetailsBillingMobilePhone_' + this.id] = __('form_check', 'Please enter a valid mobile phone number.');
            customElAlerts['UserAccountDetailsBillingVatNumber_' + this.id] = __('form_check', 'Please enter a valid VAT identification number.');
            customElAlerts['UserAccountDetailsShippingCompanyName_' + this.id] = __('form_check', 'Please enter a valid company name.');
            customElAlerts['UserAccountDetailsShippingFirstName_' + this.id] = __('form_check', 'Please enter a valid first name.');
            customElAlerts['UserAccountDetailsShippingLastName_' + this.id] = __('form_check', 'Please enter a valid last name.');
            customElAlerts['UserAccountDetailsShippingStreet_' + this.id] = __('form_check', 'Please enter a valid street address.');
            customElAlerts['UserAccountDetailsShippingPostalCode_' + this.id] = __('form_check', 'Please enter a valid postal code.');
            customElAlerts['UserAccountDetailsShippingTown_' + this.id] = __('form_check', 'Please enter a valid town.');
            customElAlerts['UserAccountDetailsShippingRegularPhone_' + this.id] = __('form_check', 'Please enter a valid regular phone number.');
            customElAlerts['UserAccountDetailsShippingMobilePhone_' + this.id] = __('form_check', 'Please enter a valid mobile phone number.');
            var self = this;
            var msgBox = this.element.getElement('.tpl-message');
            var options = Object.merge(this.getValidatorOptions(), {
                display: {
                    errorsListContainer: msgBox,
                    customElAlerts: customElAlerts
                },
                onInputInvalid: function(input) {
                    if (this.options.display.errorsListContainer && this.options.display.errorsListContainer.hasClass('tpl-success')) {
                        this.options.display.errorsListContainer.removeClass('tpl-success');
                        this.options.display.errorsListContainer.addClass('tpl-error');
                    }
                    var row = input.getParent('.tpl-form-row');
                    if (row && !row.hasClass('tpl-invalid')) {
                        row.addClass('tpl-invalid');
                    }
                    if (input.getParent('.tpl-edit-section').isDisplayed() == false) {
                        var editEl = input.getParent('.tpl-edit-section');
                        var idx = self.userAccountFormEditSections.indexOf(editEl);
                        var prevEl = (typeof(self.userAccountFormPreviewSections[idx]) != 'undefined' ? self.userAccountFormPreviewSections[idx] : null);
                        if (prevEl && editEl) {
                            switch (true) {
                                case editEl.hasClass('tpl-account-information'):
                                    {
                                        self.toggleAccountInformationSection(prevEl, editEl);
                                        break;
                                    }
                                case editEl.hasClass('tpl-billing-address'):
                                    {
                                        self.toggleBillingAddressSection(prevEl, editEl);
                                        break;
                                    }
                                case editEl.hasClass('tpl-shipping-address'):
                                    {
                                        self.toggleShippingAddressSection(prevEl, editEl);
                                        break;
                                    }
                            }
                        }
                    }
                    var focused = $(document.body).getElement('*:focus');
                    if (focused && focused != input) {
                        focused.blur();
                    }
                }
            });
            this.userAccountValidator = new FormCheck(this.userAccountForm, options);
            Object.each(this.userAccountValidator.options.alerts, function(msg, idx) {
                this.userAccountValidator.options.alerts[idx] = __('form_check', msg);
            }, this);
        }
        this.userAccountForm.getElements('input.tpl-account-type').each(function(input) {
            var event = this.accountTypeRadioChange.bind(this, input);
            input.store('event:accountTypeRadioChange', event).addEvent('change', event);
        }, this);
        var shCbx = this.userAccountForm.getElement('#UserAccountDetailsShippingUseBilling_' + this.id);
        if (shCbx) {
            var event = this.useBillingAddressCheckboxClick.bind(this, shCbx);
            shCbx.store('event:useBillingAddressCheckboxClick', event).addEvent('click', event);
        }
        this.userAccountFormPreviewSections.each(function(ps, i) {
            var es = (typeof(this.userAccountFormEditSections[i]) != 'undefined' ? this.userAccountFormEditSections[i] : null);
            ps.getElements('.tpl-data-preview-toggler a').each(function(tgl) {
                var event = this.sectionTogglerLinkClick.bind(this, ps, es);
                tgl.store('event:sectionTogglerLinkClick', event).addEvent('click', event);
            }, this);
            if (es) {
                es.getElements('.tpl-cancel a').each(function(tgl) {
                    var event = this.sectionTogglerLinkClick.bind(this, ps, es);
                    tgl.store('event:sectionTogglerLinkClick', event).addEvent('click', event);
                }, this);
                if (es.isDisplayed() == true) {
                    switch (true) {
                        case es.hasClass('tpl-account-information'):
                            {
                                this.attachAccountInformationInputs();
                                break;
                            }
                    }
                }
            }
        }, this);
    },
    attachOrdersHistoryUI: function() {
        if (this.orderDetailsLinks.length > 0) {
            this.orderDetailsLinks.each(function(link) {
                var event = this.orderDetailsLinkClick.bind(this, link);
                link.store('event:orderDetailsLinkClick', event).addEvent('click', event);
            }, this);
        }
        if (this.ordersPagerLinks.length > 0) {
            this.ordersPagerLinks.each(function(link) {
                var event = this.ordersPagerLinkClick.bind(this, link);
                link.store('event:ordersPagerLinkClick', event).addEvent('click', event);
            }, this);
        }
        if (this.orderBackLinks.length > 0) {
            this.orderBackLinks.each(function(link) {
                var event = this.orderBackLinkClick.bind(this, link);
                link.store('event:orderBackLinkClick', event).addEvent('click', event);
            }, this);
        }
    },
    detach: function() {
        this.parent();
        if (this.tabs.length > 0) {
            this.detachTabsUI();
        }
        if (this.userAccountForm) {
            this.detachUserAccountFormUI();
        }
        if (this.orderDetailsLinks.length > 0 || this.ordersPagerLinks.length > 0 || this.orderBackLinks.length > 0) {
            this.detachOrdersHistoryUI();
        }
    },
    detachTabsUI: function() {
        this.tabs.each(function(tab, i) {
            tab.removeEvent('click', tab.retrieve('event:tabClick')).eliminate('event:tabClick');
        });
    },
    detachUserAccountFormUI: function() {
        if (this.userAccountValidator) {
            this.userAccountValidator.detach();
        }
        this.userAccountForm.getElements('input.tpl-account-type').each(function(input) {
            input.removeEvent('change', input.retrieve('event:accountTypeRadioChange')).eliminate('event:accountTypeRadioChange');
        }, this);
        var shCbx = this.userAccountForm.getElement('#UserAccountDetailsShippingUseBilling_' + this.id);
        if (shCbx) {
            shCbx.removeEvent('click', shCbx.retrieve('event:useBillingAddressCheckboxClick')).eliminate('event:useBillingAddressCheckboxClick');
        }
        this.userAccountFormPreviewSections.each(function(ps, i) {
            var es = (typeof(this.userAccountFormEditSections[i]) != 'undefined' ? this.userAccountFormEditSections[i] : null);
            ps.getElements('.tpl-data-preview-toggler a').each(function(tgl) {
                tgl.removeEvent('click', tgl.retrieve('event:sectionTogglerLinkClick')).eliminate('event:sectionTogglerLinkClick');
            }, this);
            if (es) {
                es.getElements('.tpl-cancel a').each(function(tgl) {
                    tgl.removeEvent('click', tgl.retrieve('event:sectionTogglerLinkClick')).eliminate('event:sectionTogglerLinkClick');
                }, this);
                if (es.isDisplayed() == true) {
                    switch (true) {
                        case es.hasClass('tpl-account-information'):
                            {
                                this.detachAccountInformationInputs();
                                break;
                            }
                    }
                }
            }
        }, this);
    },
    detachOrdersHistoryUI: function() {
        if (this.orderDetailsLinks.length > 0) {
            this.orderDetailsLinks.each(function(link) {
                link.removeEvent('click', link.retrieve('event:orderDetailsLinkClick')).eliminate('event:orderDetailsLinkClick');
            });
        }
        if (this.ordersPagerLinks.length > 0) {
            this.ordersPagerLinks.each(function(link) {
                link.removeEvent('click', link.retrieve('event:ordersPagerLinkClick')).eliminate('event:ordersPagerLinkClick');
            });
        }
        if (this.orderBackLinks.length > 0) {
            this.orderBackLinks.each(function(link) {
                link.removeEvent('click', link.retrieve('event:orderBackLinkClick')).eliminate('event:orderBackLinkClick');
            });
        }
    },
    tabClick: function(tab, ev) {
        ev.preventDefault();
        if (this.isBusy() == true) {
            return;
        }
        var idx = this.tabs.indexOf(tab);
        if (idx == -1 || idx == this.activeTabIdx || typeof(this.tabContents[idx]) == 'undefined' || this.tabContents[idx].isDisplayed() == true) {
            return;
        }
        var link = tab.getElement('a');
        if (!link) {
            return;
        }
        if (History.push(History.toRelativeUrl(link.get('href')), null, {
                a: 'widget',
                m: 'showTab',
                w: this.element.get('id')
            }) == false) {
            this.showTab({
                url: link.get('href')
            });
        }
    },
    orderDetailsLinkClick: function(link, ev) {
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        if (History.push(History.toRelativeUrl(link.get('href')), null, {
                a: 'widget',
                m: 'getView',
                w: this.element.get('id')
            }) == false) {
            this.getView({
                data: {
                    'data[Request][url]': History.toRelativeUrl(link.get('href'))
                }
            });
        }
    },
    ordersPagerLinkClick: function(link, ev) {
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        if (History.push(History.toRelativeUrl(link.get('href')), null, {
                a: 'widget',
                m: 'getView',
                w: this.element.get('id')
            }) == false) {
            this.getView({
                data: {
                    'data[Request][url]': History.toRelativeUrl(link.get('href'))
                }
            });
        }
    },
    orderBackLinkClick: function(link, ev) {
        ev.preventDefault();
        if (this.isBusy()) {
            return;
        }
        if (History.push(History.toRelativeUrl(link.get('href')), null, {
                a: 'widget',
                m: 'getView',
                w: this.element.get('id')
            }) == false) {
            this.getView({
                data: {
                    'data[Request][url]': History.toRelativeUrl(link.get('href'))
                }
            });
        }
    },
    sectionTogglerLinkClick: function(prevEl, editEl, ev) {
        ev.preventDefault();
        switch (true) {
            case editEl.hasClass('tpl-account-information'):
                {
                    this.toggleAccountInformationSection(prevEl, editEl);
                    break;
                }
            case editEl.hasClass('tpl-billing-address'):
                {
                    this.toggleBillingAddressSection(prevEl, editEl);
                    break;
                }
            case editEl.hasClass('tpl-shipping-address'):
                {
                    this.toggleShippingAddressSection(prevEl, editEl);
                    break;
                }
        }
        this.elementResized();
    },
    accountTypeRadioChange: function(input, ev) {
        var type = parseInt(input.get('value'));
        switch (type) {
            case ACCOUNT_TYPE_COMPANY:
                {
                    this.showCompanyInputs();
                    break;
                }
            default:
                {
                    this.hideCompanyInputs();
                    break;
                }
        }
        this.elementResized();
    },
    useBillingAddressCheckboxClick: function(cb, ev) {
        if (cb.checked == true) {
            this.disableShippingAddressInputs();
        } else {
            this.enableShippingAddressInputs();
        }
    },
    showTab: function(options) {
        var tab = new URI(this.page.options.page.here_url).getData('tab') || false;
        var idx = false;
        if (tab !== false) {
            var re = 'tpl-' + tab;
            this.tabs.each(function(t, i) {
                if (new RegExp(re, 'i').test(t.get('class'))) {
                    idx = i;
                }
            });
        } else {
            idx = 0;
        }
        if (idx === false) {
            return;
        }
        this.activeTabIdx = idx;
        this.tabContents.hide();
        this.tabs.each(function(tab) {
            if (tab.hasClass('tpl-active')) {
                tab.removeClass('tpl-active');
            }
        });
        if (!this.tabs[idx].hasClass('tpl-active')) {
            this.tabs[idx].addClass('tpl-active');
        }
        this.tabContents[idx].setStyles({
            display: null
        });
        if (this.userAccountValidator) {
            this.userAccountValidator.reinitialize();
        }
        if (Browser.ie && Math.round(Browser.version) < 8) {
            Browser.redraw();
        }
        var tabsEl = this.element.getElement('.tpl-tabs');
        if (tabsEl) {
            var scrollY = this.scrollableElement.getScroll().y;
            var viewportSize = this.viewportElement.getSize();
            var coords = null;
            if (this.admin || this.preview) {
                coords = tabsEl.getRelativeCoordinates($('PageWrapper'));
            } else {
                coords = tabsEl.getCoordinates();
            }
            if (scrollY > coords.top) {
                this.scrollFx.start(0, coords.top - 10);
            }
        }
        this.elementResized();
    },
    toggleAccountInformationSection: function(prevEl, editEl) {
        var top = null;
        var bottom = null;
        if (editEl.isDisplayed() == false) {
            prevEl.hide();
            editEl.show();
            top = (editEl.getParent('.tpl-section') ? editEl.getParent('.tpl-section').getElement('.tpl-data-preview-section-header') : editEl);
            bottom = editEl;
            this.attachAccountInformationInputs();
        } else {
            this.resetAccountInformationInputs();
            editEl.hide();
            prevEl.show();
            top = (prevEl.getParent('.tpl-section') ? prevEl.getParent('.tpl-section').getElement('.tpl-data-preview-section-header') : prevEl);
            bottom = prevEl;
        }
        if (this.userAccountValidator) {
            this.userAccountValidator.reinitialize();
        }
        var scrollY = this.scrollableElement.getScroll().y;
        var viewportSize = this.viewportElement.getSize();
        var topCoords = null;
        var bottomCoords = null;
        if (this.admin || this.preview) {
            topCoords = top.getRelativeCoordinates($('PageWrapper'));
            bottomCoords = bottom.getRelativeCoordinates($('PageWrapper'));
        } else {
            topCoords = top.getCoordinates();
            bottomCoords = bottom.getCoordinates();
        }
        var height = bottomCoords.bottom - topCoords.top;
        if (viewportSize.y > height + 20 && bottomCoords.bottom > viewportSize.y + scrollY) {
            this.scrollFx.start(0, bottomCoords.bottom - viewportSize.y + 10);
        } else if (viewportSize.y < height + 20 || scrollY > topCoords.top) {
            this.scrollFx.start(0, topCoords.top - 10);
        }
    },
    toggleBillingAddressSection: function(prevEl, editEl) {
        var top = null;
        var bottom = null;
        if (editEl.isDisplayed() == false) {
            prevEl.hide();
            editEl.show();
            top = (editEl.getParent('.tpl-section') ? editEl.getParent('.tpl-section').getElement('.tpl-data-preview-section-header') : editEl);
            bottom = editEl;
        } else {
            this.resetBillingAddressInputs();
            editEl.hide();
            prevEl.show();
            top = (prevEl.getParent('.tpl-section') ? prevEl.getParent('.tpl-section').getElement('.tpl-data-preview-section-header') : prevEl);
            bottom = prevEl;
        }
        if (this.userAccountValidator) {
            this.userAccountValidator.reinitialize();
        }
        var scrollY = this.scrollableElement.getScroll().y;
        var viewportSize = this.viewportElement.getSize();
        var topCoords = null;
        var bottomCoords = null;
        if (this.admin || this.preview) {
            topCoords = top.getRelativeCoordinates($('PageWrapper'));
            bottomCoords = bottom.getRelativeCoordinates($('PageWrapper'));
        } else {
            topCoords = top.getCoordinates();
            bottomCoords = bottom.getCoordinates();
        }
        var height = bottomCoords.bottom - topCoords.top;
        if (viewportSize.y > height + 20 && bottomCoords.bottom > viewportSize.y + scrollY) {
            this.scrollFx.start(0, bottomCoords.bottom - viewportSize.y + 10);
        } else if (viewportSize.y < height + 20 || scrollY > topCoords.top) {
            this.scrollFx.start(0, topCoords.top - 10);
        }
    },
    toggleShippingAddressSection: function(prevEl, editEl) {
        var top = null;
        var bottom = null;
        if (editEl.isDisplayed() == false) {
            prevEl.hide();
            editEl.show();
            top = (editEl.getParent('.tpl-section') ? editEl.getParent('.tpl-section').getElement('.tpl-data-preview-section-header') : editEl);
            bottom = editEl;
        } else {
            this.resetShippingAddressInputs();
            editEl.hide();
            prevEl.show();
            top = (prevEl.getParent('.tpl-section') ? prevEl.getParent('.tpl-section').getElement('.tpl-data-preview-section-header') : prevEl);
            bottom = prevEl;
        }
        if (this.userAccountValidator) {
            this.userAccountValidator.reinitialize();
        }
        var scrollY = this.scrollableElement.getScroll().y;
        var viewportSize = this.viewportElement.getSize();
        var topCoords = null;
        var bottomCoords = null;
        if (this.admin || this.preview) {
            topCoords = top.getRelativeCoordinates($('PageWrapper'));
            bottomCoords = bottom.getRelativeCoordinates($('PageWrapper'));
        } else {
            topCoords = top.getCoordinates();
            bottomCoords = bottom.getCoordinates();
        }
        var height = bottomCoords.bottom - topCoords.top;
        if (viewportSize.y > height + 20 && bottomCoords.bottom > viewportSize.y + scrollY) {
            this.scrollFx.start(0, bottomCoords.bottom - viewportSize.y + 10);
        } else if (viewportSize.y < height + 20 || scrollY > topCoords.top) {
            this.scrollFx.start(0, topCoords.top - 10);
        }
    },
    attachAccountInformationInputs: function() {
        var em = this.userAccountForm.getElement('.tpl-account-information #UserAccountEmail_' + this.id);
        var at = this.userAccountForm.getElements('.tpl-account-information input[name="data[UserAccountDetails][account_type]"]');
        if (at && at.length > 0) {
            at = at.shift();
        } else {
            at = false;
        }
        if (this.userAccountValidator) {
            var v = this.userAccountValidator.validations;
            if (v.contains(em) && typeof(em.validation) != 'undefined' && !em.validation.contains('required')) {
                em.validation.push('required');
            }
            if (at) {
                if (v.contains(at) && typeof(at.validation) != 'undefined' && !at.validation.contains('required')) {
                    at.validation.push('required');
                } else {
                    var c = "validate['required']";
                    if (!at.hasClass(c)) {
                        at.addClass(c);
                    }
                    this.userAccountValidator.registerElement(at);
                }
            }
        }
    },
    detachAccountInformationInputs: function() {
        var em = this.userAccountForm.getElement('.tpl-account-information #UserAccountEmail_' + this.id);
        var at = this.userAccountForm.getElements('.tpl-account-information input[name="data[UserAccountDetails][account_type]"]');
        if (this.userAccountValidator) {
            var v = this.userAccountValidator.validations;
            if (v.contains(em) && typeof(em.validation) != 'undefined' && em.validation.contains('required')) {
                em.validation.erase('required');
            }
            if (at && at.length > 0 && v.contains(at[0]) && typeof(at[0].validation) != 'undefined' && at[0].validation.contains('required')) {
                at[0].validation.erase('required');
                if (at[0].validation.length == 0) {
                    this.userAccountValidator.disposeElement(at[0]);
                    var c = "validate['required']";
                    if (at[0].hasClass(c)) {
                        at.removeClass(c);
                    }
                }
            }
        }
    },
    resetAccountInformationInputs: function() {
        this.detachAccountInformationInputs();
        var fn = this.userAccountForm.getElement('.tpl-account-information #UserAccountFirstName_' + this.id);
        var ln = this.userAccountForm.getElement('.tpl-account-information #UserAccountLastName_' + this.id);
        var em = this.userAccountForm.getElement('.tpl-account-information #UserAccountEmail_' + this.id);
        var np = this.userAccountForm.getElement('.tpl-account-information #UserAccountNewPasswd_' + this.id);
        var cp = this.userAccountForm.getElement('.tpl-account-information #UserAccountConfirmNewPasswd_' + this.id);
        var at = this.userAccountForm.getElements('.tpl-account-information input[name="data[UserAccountDetails][account_type]"]');
        var _fn = this.userAccountForm.getElement('.tpl-account-information #UserAccountFirstName_' + this.id + '_');
        var _ln = this.userAccountForm.getElement('.tpl-account-information #UserAccountLastName_' + this.id + '_');
        var _em = this.userAccountForm.getElement('.tpl-account-information #UserAccountEmail_' + this.id + '_');
        var _at = this.userAccountForm.getElement('.tpl-account-information #UserAccountDetailsAccountType_' + this.id + '_');
        if (fn) {
            fn.set('value', (_fn ? _fn.get('value') : ''));
        }
        if (ln) {
            ln.set('value', (_ln ? _ln.get('value') : ''));
        }
        em.set('value', (_em ? _em.get('value') : ''));
        np.set('value', '');
        cp.set('value', '');
        if (at && _at && at.length > 0) {
            var prevAt = this.userAccountForm.getElement('input[name="data[UserAccountDetails][account_type]"]:checked');
            at.each(function(r) {
                r.checked = (r.get('value') == _at.get('value') ? true : false);
            });
            var newAt = this.userAccountForm.getElement('input[name="data[UserAccountDetails][account_type]"]:checked');
            if (prevAt != newAt) {
                var type = (newAt ? parseInt(newAt.get('value')) : null);
                switch (type) {
                    case ACCOUNT_TYPE_COMPANY:
                        {
                            this.showCompanyInputs();
                            break;
                        }
                    default:
                        {
                            this.hideCompanyInputs();
                            break;
                        }
                }
            }
        }
        [fn, ln, em, np, cp, at].clean().each(function(input) {
            var row = input.getParent('.tpl-form-row');
            if (row && row.hasClass('tpl-invalid')) {
                row.removeClass('tpl-invalid');
            }
        });
    },
    resetBillingAddressInputs: function() {
        var cn = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingCompanyName_' + this.id);
        var fn = this.userAccountForm.getElement('.tpl-billing-address #UserAccountFirstName_' + this.id);
        var ln = this.userAccountForm.getElement('.tpl-billing-address #UserAccountLastName_' + this.id);
        var st = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingStreet_' + this.id);
        var pc = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingPostalCode_' + this.id);
        var tw = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingTown_' + this.id);
        var ct = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingCountryId_' + this.id);
        var rp = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingRegularPhone_' + this.id);
        var mp = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingMobilePhone_' + this.id);
        var vt = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingVatNumber_' + this.id);
        var _cn = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingCompanyName_' + this.id + '_');
        var _fn = this.userAccountForm.getElement('.tpl-billing-address #UserAccountFirstName_' + this.id + '_');
        var _ln = this.userAccountForm.getElement('.tpl-billing-address #UserAccountLastName_' + this.id + '_');
        var _st = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingStreet_' + this.id + '_');
        var _pc = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingPostalCode_' + this.id + '_');
        var _tw = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingTown_' + this.id + '_');
        var _ct = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingCountryId_' + this.id + '_');
        var _rp = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingRegularPhone_' + this.id + '_');
        var _mp = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingMobilePhone_' + this.id + '_');
        var _vt = this.userAccountForm.getElement('.tpl-billing-address #UserAccountDetailsBillingVatNumber_' + this.id + '_');
        if (cn.getParent('.tpl-company-row') && cn.getParent('.tpl-company-row').isDisplayed() == true) {
            cn.set('value', (_cn ? _cn.get('value') : ''));
        } else {
            cn.set('value', '');
        }
        fn.set('value', (_fn ? _fn.get('value') : ''));
        ln.set('value', (_ln ? _ln.get('value') : ''));
        st.set('value', (_st ? _st.get('value') : ''));
        pc.set('value', (_pc ? _pc.get('value') : ''));
        tw.set('value', (_tw ? _tw.get('value') : ''));
        ct.set('value', (_ct ? _ct.get('value') : ''));
        if (rp) {
            rp.set('value', (_rp ? _rp.get('value') : ''));
        }
        mp.set('value', (_mp ? _mp.get('value') : ''));
        vt.set('value', (_vt ? _vt.get('value') : ''));
        [cn, fn, ln, st, pc, tw, ct, rp, mp, vt].clean().each(function(input) {
            var row = input.getParent('.tpl-form-row');
            if (row && row.hasClass('tpl-invalid')) {
                row.removeClass('tpl-invalid');
            }
        });
    },
    resetShippingAddressInputs: function() {
        var cb = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingUseBilling_' + this.id);
        var cn = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingCompanyName_' + this.id);
        var fn = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingFirstName_' + this.id);
        var ln = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingLastName_' + this.id);
        var st = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingStreet_' + this.id);
        var pc = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingPostalCode_' + this.id);
        var tw = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingTown_' + this.id);
        var ct = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingCountryId_' + this.id);
        var rp = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingRegularPhone_' + this.id);
        var mp = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingMobilePhone_' + this.id);
        var _cb = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingUseBilling_' + this.id + '_');
        var _cn = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingCompanyName_' + this.id + '_');
        var _fn = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingFirstName_' + this.id + '_');
        var _ln = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingLastName_' + this.id + '_');
        var _st = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingStreet_' + this.id + '_');
        var _pc = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingPostalCode_' + this.id + '_');
        var _tw = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingTown_' + this.id + '_');
        var _ct = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingCountryId_' + this.id + '_');
        var _rp = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingRegularPhone_' + this.id + '_');
        var _mp = this.userAccountForm.getElement('.tpl-shipping-address #UserAccountDetailsShippingMobilePhone_' + this.id + '_');
        var _cbVal = parseInt(_cb.get('value'));
        if (cb && _cb) {
            if (_cbVal == 1) {
                cb.checked = true;
                this.disableShippingAddressInputs();
            } else {
                cb.checked = false;
                cn.store('shipping-input:value', (_cn ? _cn.get('value') : ''));
                fn.store('shipping-input:value', (_fn ? _fn.get('value') : ''));
                ln.store('shipping-input:value', (_ln ? _ln.get('value') : ''));
                st.store('shipping-input:value', (_st ? _st.get('value') : ''));
                pc.store('shipping-input:value', (_pc ? _pc.get('value') : ''));
                tw.store('shipping-input:value', (_tw ? _tw.get('value') : ''));
                ct.store('shipping-input:value', (_ct ? _ct.get('value') : ''));
                if (rp) {
                    rp.store('shipping-input:value', (_rp ? _rp.get('value') : ''));
                }
                mp.store('shipping-input:value', (_mp ? _mp.get('value') : ''));
                this.enableShippingAddressInputs();
            }
        }
        [cn, fn, ln, st, pc, tw, ct, rp, mp].clean().each(function(input) {
            var row = input.getParent('.tpl-form-row');
            if (row && row.hasClass('tpl-invalid')) {
                row.removeClass('tpl-invalid');
            }
        });
    },
    showCompanyInputs: function() {
        this.userAccountForm.getElements('.tpl-company-row').each(function(row) {
            if (row.isDisplayed() == false) {
                var input = row.getElement('input[type=text]');
                if (input && input.retrieve('company-input:value')) {
                    input.set('value', input.retrieve('company-input:value')).eliminate('company-input:value');
                }
                row.show();
                if (this.userAccountValidator) {
                    this.userAccountValidator.reinitialize();
                }
            }
        }, this);
    },
    hideCompanyInputs: function() {
        this.element.getElements('.tpl-company-row').each(function(row) {
            if (row.isDisplayed() == true) {
                var input = row.getElement('input[type=text]');
                if (input) {
                    input.store('company-input:value', input.get('value')).set('value', '');
                }
                row.hide();
                if (this.userAccountValidator) {
                    this.userAccountValidator.reinitialize();
                }
            }
        }, this);
    },
    enableShippingAddressInputs: function() {
        if (this.userAccountForm) {
            var shippingTextInputs = ['UserAccountDetailsShippingCompanyName_' + this.id, 'UserAccountDetailsShippingFirstName_' + this.id, 'UserAccountDetailsShippingLastName_' + this.id, 'UserAccountDetailsShippingStreet_' + this.id, 'UserAccountDetailsShippingPostalCode_' + this.id, 'UserAccountDetailsShippingTown_' + this.id, 'UserAccountDetailsShippingCountryId_' + this.id, 'UserAccountDetailsShippingRegularPhone_' + this.id, 'UserAccountDetailsShippingMobilePhone_' + this.id];
            shippingTextInputs.each(function(shippingInputId, idx) {
                var shippingInput = this.userAccountForm.getElement('#' + shippingInputId);
                var shippingInputWrapper = null;
                if (!shippingInput) {
                    return;
                }
                switch (shippingInput.tagName.toLowerCase()) {
                    case 'input':
                        {
                            shippingInputWrapper = shippingInput.getParent('.tpl-form-input');
                            break;
                        }
                    case 'select':
                        {
                            shippingInputWrapper = shippingInput.getParent('.tpl-form-select');
                            break;
                        }
                    case 'textarea':
                        {
                            shippingInputWrapper = shippingInput.getParent('.tpl-form-textarea');
                            break;
                        }
                }
                shippingInput.set('value', shippingInput.retrieve('shipping-input:value')).eliminate('shipping-input:value');
                shippingInput.disabled = false;
                if (shippingInputWrapper.hasClass('tpl-form-input-disabled')) {
                    shippingInputWrapper.removeClass('tpl-form-input-disabled');
                }
            }, this);
        }
    },
    disableShippingAddressInputs: function() {
        if (this.userAccountForm) {
            var shippingTextInputs = ['UserAccountDetailsShippingCompanyName_' + this.id, 'UserAccountDetailsShippingFirstName_' + this.id, 'UserAccountDetailsShippingLastName_' + this.id, 'UserAccountDetailsShippingStreet_' + this.id, 'UserAccountDetailsShippingPostalCode_' + this.id, 'UserAccountDetailsShippingTown_' + this.id, 'UserAccountDetailsShippingCountryId_' + this.id, 'UserAccountDetailsShippingRegularPhone_' + this.id, 'UserAccountDetailsShippingMobilePhone_' + this.id];
            shippingTextInputs.each(function(shippingInputId, idx) {
                var shippingInput = this.userAccountForm.getElement('#' + shippingInputId);
                var shippingInputWrapper = null;
                if (!shippingInput) {
                    return;
                }
                var shippingInputRow = shippingInput.getParent('.tpl-form-row');
                switch (shippingInput.tagName.toLowerCase()) {
                    case 'input':
                        {
                            shippingInputWrapper = shippingInput.getParent('.tpl-form-input');
                            break;
                        }
                    case 'select':
                        {
                            shippingInputWrapper = shippingInput.getParent('.tpl-form-select');
                            break;
                        }
                    case 'textarea':
                        {
                            shippingInputWrapper = shippingInput.getParent('.tpl-form-textarea');
                            break;
                        }
                }
                shippingInput.store('shipping-input:value', shippingInput.get('value')).set('value', '');
                shippingInput.disabled = true;
                if (!shippingInputWrapper.hasClass('tpl-form-input-disabled')) {
                    shippingInputWrapper.addClass('tpl-form-input-disabled');
                }
                if (shippingInputRow.hasClass('tpl-invalid')) {
                    shippingInputRow.removeClass('tpl-invalid');
                }
            }, this);
        }
    },
    getView: function(options) {
        var data = {
            'data[Request][url]': this.page.options.page.here_url
        };
        if (options && typeof(options.data) != 'undefined') {
            data = Object.merge(data, options.data);
        }
        this.GETRequest(data);
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function() {
        if (this.options.editable == false) {
            return;
        }
        new UserAccountWidgetAdminWindowUI({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }).set('website', this.website).set('widget', this);
    }
});
var VideoPlayerWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'Video player',
        short_name: 'video_player',
        dropdown: true
    },
    initVariables: function() {
        this.player = null;
    },
    attach: function() {
        this.parent();
        this.attachPlayer();
    },
    detach: function() {
        this.parent();
        this.detachPlayer();
    },
    attachPlayer: function() {
        if (!this.player) {
            this.page.requirePluginAssets({
                js: ['mediaelement.min.js'],
                css: ['mediaelement.css'],
                onLoad: function() {
                    var video = this.element.getElement('video');
                    if (typeof(MediaElementPlayer) != 'undefined' && video) {
                        var playerWidth = '100%';
                        var playerHeight = '100%';
                        if (video.getProperty('width')) {
                            playerWidth = video.getProperty('width');
                        }
                        if (video.getProperty('height')) {
                            playerHeight = video.getProperty('height');
                        } else if (video.getParent().getStyle('min-height') != 'auto' && parseInt(video.getParent().getStyle('min-height')) > 0) {
                            playerHeight = parseInt(video.getParent().getStyle('min-height'));
                        }
                        this.player = new MediaElementPlayer(video, {
                            playerWidth: playerWidth,
                            playerHeight: playerHeight,
                            mode: 'shim',
                            flashPluginPath: this.website.options.core_assets_base_path + 'flash/',
                            silverlightPluginPath: this.website.options.core_assets_base_path + 'silverlight/',
                            hideUnsupported: true,
                            onResize: function() {
                                this.elementResized();
                            }.bind(this)
                        });
                    }
                }.bind(this)
            });
        }
    },
    detachPlayer: function() {
        if (this.player) {
            this.player.remove();
            this.player = null;
        }
    },
    createComplete: function() {
        this.editWidgetSettings({
            requestData: {
                'data[Request][added]': 1
            }
        });
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        this.website.hideTips();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    elementMoved: function(prevCol, newCol) {
        this.detachPlayer();
        this.attachPlayer();
    },
    editWidgetSettings: function(options) {
        if (this.options.editable == false) {
            return;
        }
        var options = Object.merge({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }, options);
        new VideoPlayerWidgetAdminWindowUI(options).set('website', this.website).set('widget', this);
    }
});
var YoutubeVimeoPlayerWidget = new Class({
    Extends: LayoutWidget,
    options: {
        name: 'YouTube / Vimeo',
        short_name: 'youtube_vimeo_player',
        dropdown: true
    },
    initialize: function(wId, options) {
        this.parent(wId, options);
        this.create();
    },
    create: function() {
        var container = this.element.getElement('.tpl-youtube-vimeo-player-container');
        if (container && container.get('data')) {
            var data = JSON.decode(container.get('data'));
            if (data && typeof(data.url) != 'undefined' && typeof(data.width) != 'undefined' && typeof(data.height) != 'undefined' && data.url.length > 0) {
                var styles = {};
                if (data.width > 0) {
                    styles.width = data.width;
                }
                if (data.height > 0) {
                    styles.height = data.height;
                }
                var fn = (function() {
                    new Element('iframe', {
                        scrolling: 'no',
                        frameborder: '0',
                        src: data.url,
                        allowTransparency: true,
                        allowFullScreen: true,
                        mozAllowFullScreen: true,
                        webkitAllowFullScreen: true,
                        styles: styles
                    }).inject(container);
                }).bind(this);
                if (typeof(window.bLoaded) != 'undefined' && window.bLoaded == true) {
                    fn.apply();
                } else {
                    window.addEvent('load', fn);
                }
            }
        }
    },
    createComplete: function() {
        this.editWidgetSettings({
            requestData: {
                'data[Request][added]': 1
            }
        });
    },
    emptyContentLinkClick: function(el, ev) {
        ev.preventDefault();
        this.hideEditBox();
        this.editWidgetSettings();
    },
    elementDoubleClick: function(ev) {
        ev.preventDefault();
        this.website.hideTips();
        if (window.getSelection) {
            var selection = window.getSelection();
            if (selection.rangeCount > 0) {
                var range = selection.getRangeAt(0);
                range.collapse(false);
            }
        } else {
            var textRange = document.selection.createRange();
            textRange.collapse(false);
        }
        this.hideEditBox();
        this.editWidgetSettings();
    },
    editWidgetSettings: function(options) {
        if (this.options.editable == false) {
            return;
        }
        var options = Object.merge({
            requestData: {
                data: {
                    Request: {
                        widget_id: this.id,
                        page_id: Object.getFromPath(this.page, 'id'),
                        current_page_id: Object.getFromPath(this.page, 'id'),
                        url: Object.getFromPath(this.page, 'options.page.here_url')
                    }
                }
            },
            onAttachParent: function() {
                this.website.attach();
            }.bind(this),
            onDetachParent: function() {
                this.website.detach();
            }.bind(this),
            onCreateFailure: function() {
                var self = this;
                var title = __('admin_core', 'Error communicating with the server', true);
                var msg = __('admin_core', 'An error has occurred while communicating with the server. Please try again.', true);
                new IWindowUI.Error(title, msg, {
                    onShow: function() {
                        this.element.getElement('input[type=button]').focus();
                    },
                    onHide: function() {
                        self.fireEvent('attachParent');
                    }
                });
            },
            onAjaxRequest: function() {
                this.website.adminLoadingOverlay(true);
                this.website.adminLoadingBox(true);
            }.bind(this),
            onAjaxComplete: function() {
                this.website.adminLoadingOverlay(false);
                this.website.adminLoadingBox(false);
            }.bind(this)
        }, options);
        new YoutubeVimeoPlayerWidgetAdminWindowUI(options).set('website', this.website).set('widget', this);
    }
});