var ResponsiveMenu = new Class({
    Implements: [Options, Events],
    options: {
        button: null,
        absolutize: true,
        container: null,
        positionTarget: false,
        viewportElement: document,
        offset: 5
    },
    initialize: function(element, options) {
        this.setOptions(options);
        this.element = element;
        this.lists = this.element.getChildren('ul');
        this.button = this.options.button;
        this.display = false;
        if (this.options.absolutize == true && this.element.getStyle('position') != 'absolute') {
            this.element.setStyles({
                position: 'absolute',
                left: 0,
                right: 0
            });
        }
        if (this.options.container) {
            this.element.inject(this.options.container);
        }
        this.element.set('reveal', {
            duration: 200,
            link: 'cancel'
        });
        this.lists.each(function(list) {
            list.getElements('ul').each(function(list) {
                var button = list.getPrevious('.tpl-submenu-button');
                if (list.isDisplayed() == true && button && !button.hasClass('tpl-expanded')) {
                    button.addClass('tpl-expanded');
                }
                list.set('reveal', {
                    duration: 200,
                    link: 'cancel'
                });
            });
        });
        this.bound = {
            buttonClick: this.buttonClick.bind(this),
            documentClick: this.documentClick.bind(this),
            windowResize: this.windowResize.bind(this)
        };
        this.attach();
    },
    attach: function() {
        this.button.addEvent('click', this.bound.buttonClick);
        document.addEvent('click', this.bound.documentClick);
        window.addEvent('resize', this.bound.windowResize);
        this.lists.each(function(list) {
            list.getElements('.tpl-submenu-button').each(function(button) {
                var event = this.submenuButtonClick.bind(this, button);
                button.store('event:submenuButtonClick', event).addEvent('click', event);
            }, this);
        }, this);
    },
    detach: function() {
        this.button.removeEvent('click', this.bound.buttonClick);
        document.removeEvent('click', this.bound.documentClick);
        window.removeEvent('resize', this.bound.windowResize);
        this.lists.each(function(list) {
            list.getElements('.tpl-submenu-button').each(function(button) {
                button.removeEvent('click', button.retrieve('event:submenuButtonClick')).eliminate('event:submenuButtonClick');
            });
        });
    },
    buttonClick: function(ev) {
        ev.preventDefault();
        if (this.display == false) {
            this.show();
        } else {
            this.hide();
        }
    },
    documentClick: function(ev) {
        ev = new DOMEvent(ev);
        if (this.display == false || ev.rightClick) {
            return;
        }
        try {
            var eventTarget = $(ev.target);
            if (this.display && eventTarget != this.element && eventTarget != this.button && Element.getParents(eventTarget).contains(this.button) == false && Element.getParent(eventTarget, '#' + this.element.get('id')) != this.element) {
                this.hide();
            }
        } catch (e) {}
    },
    windowResize: function() {
        var parent = this.element.getParent('.tpl-responsive-menu');
        if (parent && parent.isDisplayed() == false) {
            this.hide();
        }
        this.position();
    },
    submenuButtonClick: function(button, ev) {
        ev.preventDefault();
        var submenu = button.getNext('ul');
        if (submenu) {
            this.toggleSubmenu(submenu, button);
        }
    },
    show: function() {
        this.display = true;
        this.element.show();
        this.position();
        this.element.hide();
        this.element.reveal();
        if (!this.button.hasClass('tpl-expanded')) {
            this.button.addClass('tpl-expanded');
        }
    },
    hide: function() {
        this.element.dissolve();
        this.display = false;
        if (this.button.hasClass('tpl-expanded')) {
            this.button.removeClass('tpl-expanded');
        }
    },
    toggleSubmenu: function(list, button) {
        var bVisible = list.bVisible || list.isDisplayed();
        if (bVisible == false) {
            list.bVisible = true;
            list.reveal();
            if (!button.hasClass('tpl-expanded')) {
                button.addClass('tpl-expanded');
            }
        } else {
            list.dissolve();
            list.bVisible = false;
            if (button.hasClass('tpl-expanded')) {
                button.removeClass('tpl-expanded');
            }
        }
    },
    position: function() {
        if (this.display == false || this.options.absolutize == false) {
            return;
        }
        var coords = this.button.getCoordinates(this.options.positionTarget);
        this.element.setStyle('top', coords.bottom + this.options.positionTarget.getScroll().y + this.options.offset);
    }
});