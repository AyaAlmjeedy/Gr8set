var Slideshow = new Class({
    Implements: [Options, Events],
    options: {
        box: null,
        items: [],
        size: 0,
        mode: 'horizontal',
        fade: false,
        handles: null,
        handleEventType: 'click',
        buttons: null,
        buttonEventType: 'click',
        fxOptions: {
            duration: 500,
            wait: false
        },
        interval: 5000,
        autoPlay: true,
        hoverPause: true,
        swipe: true,
        startItem: 0,
        onWalk: function() {},
        classes: {
            stopButton: 'tpl-stop'
        }
    },
    initialize: function(options) {
        this.setOptions(options);
        this.box = this.options.box;
        this.items = this.options.items;
        this.handles = this.options.handles;
        this.buttons = this.options.buttons;
        this.mode = this.options.mode;
        this.modes = {
            horizontal: ['left', 'width'],
            vertical: ['top', 'height']
        };
        this.currentIndex = null;
        this.previousIndex = null;
        this.nextIndex = null;
        this.fx = null;
        this.swipe = null;
        this.timer = null;
        this.box.setStyle(this.modes[this.mode][1], (this.options.size * this.items.length) + 'px');
        if (this.options.fade == true) {
            this.orderItems();
        } else {
            this.fx = new Fx.Tween(this.box, Object.merge(this.options.fxOptions, {
                property: this.modes[this.mode][0]
            }));
        }
        this.attach();
    },
    attach: function() {
        if (this.handles && this.handles.length > 0) {
            this.handles.each(function(handle, i) {
                var event = null;
                if (this.options.fade == true) {
                    event = (function() {
                        this.fading(i, true);
                    }).bind(this);
                } else {
                    event = (function() {
                        this.fx.cancel();
                        this.walk(i, true);
                    }).bind(this);
                }
                handle.store('event:handle' + this.options.handleEventType.camelCase(), event).addEvent(this.options.handleEventType, event);
            }, this);
        }
        if (this.buttons && Object.getLength(this.buttons) > 0) {
            Object.each(this.buttons, function(buttons, action) {
                buttons.each(function(button) {
                    var event = null;
                    switch (action) {
                        case 'previous':
                            {
                                event = (function(ev) {
                                    ev.preventDefault();
                                    this.previous(true);
                                }).bind(this);
                                break;
                            }
                        case 'next':
                            {
                                event = (function(ev) {
                                    ev.preventDefault();
                                    this.next(true);
                                }).bind(this);
                                break;
                            }
                        case 'play':
                            {
                                if (this.options.autoPlay == true && !button.hasClass(this.options.classes.stopButton)) {
                                    button.addClass(this.options.classes.stopButton);
                                }
                                event = (function(ev) {
                                    ev.preventDefault();
                                    if (button.hasClass(this.options.classes.stopButton)) {
                                        button.removeClass(this.options.classes.stopButton);
                                        this.stop();
                                    } else {
                                        button.addClass(this.options.classes.stopButton);
                                        this.play(this.options.interval, 'next', false);
                                    }
                                }).bind(this);
                                break;
                            }
                        case 'playback':
                            {
                                event = (function(ev) {
                                    ev.preventDefault();
                                    this.play(this.options.interval, 'previous', false);
                                }).bind(this);
                                break;
                            }
                        case 'stop':
                            {
                                event = (function(ev) {
                                    ev.preventDefault();
                                    this.stop();
                                }).bind(this);
                                break;
                            }
                    }
                    button.store('event:button' + this.options.buttonEventType.camelCase(), event).addEvent(this.options.buttonEventType, event);
                }, this);
            }, this);
        }
        if (this.options.autoPlay == true && this.options.hoverPause == true) {
            var event = (function() {
                this.stop();
            }).bind(this);
            this.box.getParent().store('event:slideshowMouseEnter', event).addEvent('mouseenter', event);
            var event = (function() {
                this.play(this.options.interval, 'next', true);
            }).bind(this);
            this.box.getParent().store('event:slideshowMouseLeave', event).addEvent('mouseleave', event);
        }
        if (this.swipe) {
            this.swipe.attach();
        } else if (this.options.swipe == true && typeof(Swipe) != 'undefined') {
            this.swipe = new Swipe(this.box, {
                onSwipeLeft: function() {
                    if (this.options.fade == false) {
                        this.fx.cancel();
                    }
                    this.next(true);
                }.bind(this),
                onSwipeRight: function() {
                    if (this.options.fade == false) {
                        this.fx.cancel();
                    }
                    this.previous(true);
                }.bind(this)
            });
        }
        if (this.options.fade == true) {
            this.fading(this.options.startItem, true, true, true);
        } else {
            this.walk(this.options.startItem, true, true, true);
        }
    },
    detach: function() {
        this.stop();
        if (this.handles && this.handles.length > 0) {
            this.handles.each(function(handle) {
                handle.removeEvent(this.options.handleEventType, handle.retrieve('event:handle' + this.options.handleEventType.camelCase())).eliminate('event:handle' + this.options.handleEventType.camelCase());
            }, this);
        }
        if (this.buttons && Object.getLength(this.buttons) > 0) {
            Object.each(this.buttons, function(buttons, action) {
                buttons.each(function(button) {
                    button.removeEvent(this.options.buttonEventType, button.retrieve('event:button' + this.options.buttonEventType.camelCase())).eliminate('event:button' + this.options.buttonEventType.camelCase());
                }, this);
            }, this);
        }
        if (this.swipe) {
            this.swipe.detach();
        }
        if (this.options.autoPlay == true && this.options.hoverPause == true) {
            this.box.getParent().removeEvent('mouseenter', this.box.getParent().retrieve('event:slideshowMouseEnter')).eliminate('event:slideshowMouseEnter');
            this.box.getParent().removeEvent('mouseleave', this.box.getParent().retrieve('event:slideshowMouseLeave')).eliminate('event:slideshowMouseLeave');
        }
        this.options.startItem = this.currentIndex;
    },
    orderItems: function() {
        this.items.each(function(item, i) {
            item.setStyles({
                'position': 'absolute',
                'left': '0px',
                'z-index': i + 1
            });
            if (i > 0) {
                item.fade('hide');
            }
        }, this);
    },
    previous: function(manual) {
        if (this.options.fade == true) {
            this.fading((this.currentIndex > 0 ? this.currentIndex - 1 : this.items.length - 1), manual);
        } else {
            this.walk((this.currentIndex > 0 ? this.currentIndex - 1 : this.items.length - 1), manual);
        }
    },
    next: function(manual) {
        if (this.options.fade) {
            this.fading((this.currentIndex < this.items.length - 1 ? this.currentIndex + 1 : 0), manual);
        } else {
            this.walk((this.currentIndex < this.items.length - 1 ? this.currentIndex + 1 : 0), manual);
        }
    },
    play: function(interval, direction, wait) {
        this.stop();
        if (!wait) {
            this[direction](false);
        }
        this.timer = this[direction].periodical(interval, this, [false]);
    },
    stop: function() {
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
    },
    walk: function(item, manual, noFx, bForce) {
        if (item != this.currentIndex) {
            this.currentIndex = item;
            this.previousIndex = this.currentIndex + (this.currentIndex > 0 ? -1 : this.items.length - 1);
            this.nextIndex = this.currentIndex + (this.currentIndex < this.items.length - 1 ? 1 : 1 - this.items.length);
            if (manual) {
                this.stop();
            }
            if (noFx) {
                this.fx.cancel().set((this.options.size * -this.currentIndex) + 'px');
            } else {
                this.fx.start(this.options.size * -this.currentIndex);
            }
            if (manual && this.options.autoPlay) {
                this.play(this.options.interval, 'next', true);
            }
            this.fireEvent('walk', [(this.items[this.currentIndex] || null), (this.handles && this.handles[this.currentIndex] ? this.handles[this.currentIndex] : null)]);
        } else if (bForce) {
            if (manual) {
                this.stop();
            }
            if (noFx) {
                this.fx.cancel().set((this.options.size * -this.currentIndex) + 'px');
            } else {
                this.fx.start(this.options.size * -this.currentIndex);
            }
            if (manual && this.options.autoPlay) {
                this.play(this.options.interval, 'next', true);
            }
            this.fireEvent('walk', [(this.items[this.currentIndex] || null), (this.handles && this.handles[this.currentIndex] ? this.handles[this.currentIndex] : null)]);
        }
    },
    fading: function(item, manual, noFx, bForce) {
        if (item != this.currentIndex) {
            this.lastIndex = this.currentIndex;
            this.currentIndex = item;
            this.previousIndex = this.currentIndex + (this.currentIndex > 0 ? -1 : this.items.length - 1);
            this.nextIndex = this.currentIndex + (this.currentIndex < this.items.length - 1 ? 1 : 1 - this.items.length);
            if (manual) {
                this.stop();
            }
            if (!noFx) {
                this.items[this.lastIndex].set('tween', this.options.fxOptions).fade('out');
                this.items[this.currentIndex].set('tween', this.options.fxOptions).fade('in');
            }
            if (manual && this.options.autoPlay) {
                this.play(this.options.interval, 'next', true);
            }
            this.fireEvent('walk', [(this.items[this.currentIndex] || null), (this.handles && this.handles[this.currentIndex] ? this.handles[this.currentIndex] : null)]);
        } else if (bForce) {
            if (manual) {
                this.stop();
            }
            if (!noFx) {
                this.items[this.lastIndex].set('tween', this.options.fxOptions).fade('out');
                this.items[this.currentIndex].set('tween', this.options.fxOptions).fade('in');
            }
            if (manual && this.options.autoPlay) {
                this.play(this.options.interval, 'next', true);
            }
            this.fireEvent('walk', [(this.items[this.currentIndex] || null), (this.handles && this.handles[this.currentIndex] ? this.handles[this.currentIndex] : null)]);
        }
    }
});